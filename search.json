[{"path":"index.html","id":"preface","chapter":"Preface","heading":"Preface","text":"excited book published. book meant guide data integration, manipulation visualization phylogenetic trees using suite R packages, tidytree, treeio, ggtree ggtreeExtra. Hence, starting read book, assume working knowledge use R ggplot2.development ggtree package started PhD study University Hong Kong. joined State Key Laboratory Emerging Infectious Diseases (SKLEID) supervision Yi Guan Tommy Lam. asked provide assistance modify newick tree string incorporate additional information, amino acid substitutions, internal node labels phylogeny visualization. wrote R script soon realized phylogenetic tree visualization software can display one type data node labels. Basically, display two data variables time comparative analysis. order produce tree graphs displaying different types branch/node associated information, bootstrap values substitutions, people mostly relied post-processing image software. situation motivates develop ggtree. First , think good user interface must fully support ggplot2 syntax, allows us draw graphs superimposing layers. way, simple graphs simple, complex graphs just combination simple layers, easy generate.several years development, ggtree evolved package suite, including tidytree manipulating tree data using tidy interface; treeio importing exporting tree richly annotated data; ggtree tree visualization annotation ggtreeExtra presenting data phylogeny side--side rectangular layout outer rings circular layout. ggtree general tool supports different types tree tree-like structures can applied different disciplines help researchers presenting interpreting data evolutionary hierarchical context.","code":""},{"path":"index.html","id":"structure-of-the-book","chapter":"Preface","heading":"Structure of the book","text":"Part (Tree data input, output manipulation) describes treeio package tree data input output, tidytree package tree data manipulation.Part II (Tree data visualization annotation) introduces tree visualization annotation using grammar graphic syntax implemented ggtree package. emphasizes presenting tree-associated data tree.Part III (ggtree extensions) introduces ggtreeExtra presenting data circular layout trees extensions including MicrobiotaProcess tanggle etc.Part IV (Miscellaneous topics) describes utilities provided ggtree package suite presents set reproducible examples.","code":""},{"path":"index.html","id":"software-information-and-conventions","chapter":"Preface","heading":"Software information and conventions","text":"R core packages information compiling book \nfollows:treedataverse \nmeta package make easy install load core packages \nprocessing visualizing tree data using packages described\nbook. installation guide \ntreedataverse can \nfound FAQ.datasets used book three sources:Simulation dataDatasets R packagesData downloaded InternetIn order make data downloaded Internet accessible,\npacked data R package,\nTDbook, detailed\ndocumentation original source, including URL, authors, \ncitation information available. \nTDbook available \nCRAN can installed using install.packages(\"TDbook\").Package names book formatted bold text (e.g.,\nggtree), function\nnames followed parentheses (e.g., treeio::read.beast()). \ndouble-colon operator (::) means accessing object package.","code":"\nR.version.string## [1] \"R version 4.1.2 (2021-11-01)\"\nlibrary(treedataverse)##  Attaching packages  treedataverse 0.0.1 \n\n##  ape         5.5            treeio      1.18.1   \n##  dplyr       1.0.7          ggtree      3.2.1\n##  ggplot2     3.3.5          ggtreeExtra 1.4.1    \n##  tidytree    0.3.6"},{"path":"index.html","id":"acknowledgments","chapter":"Preface","heading":"Acknowledgments","text":"Many people contributed book spelling grammar corrections. ’d particularly like thank Shuangbin Xu, Lin Li Xiao Luo detailed technical reviews book, Tiao designing front cover book.Many others contributed development ggtree package suite. like thank Hadley Wickham, creating ggplot2 package ggtree relies ; Tommy Tsan-Yuk Lam Yi Guan great advisors supporting development ggtree PhD; Richard Ree inviting catalysis meeting phylogenetic tree visualization; William Pearson inviting publish protocol paper ggtree Current Procotols Bioinformatics journal; Shuangbin Xu, Yonghe Xia, Justin Silverman, Bradley Jones, Watal M. Iwasaki, Ruizhu Huang, Casey Dunn, Tyler Bradley, Konstantinos Geles, Zebulun Arendsee many others contributed source code given feedback; last, least, members ggtree mailing list1, providing many challenging problems helped improve ggtree package suite.","code":""},{"path":"author.html","id":"author","chapter":"About the Author","heading":"About the Author","text":"Guangchuang Yu (https://yulab-smu.top) professor Bioinformatics director Department Bioinformatics Southern Medical University. earned Ph.D. School Public Health, University Hong Kong. active R user, authored several R packages, aplot, badger, ChIPseeker, clusterProfiler, DOSE, emojifont, enrichplot, ggbreak, ggfun, ggimage, ggplotify, ggtree, GOSemSim, hexSticker, meme, meshes, nCov2019, plotbb, ReactomePA, scatterpie, seqmagick, seqcombo, shadowtext, tidytree treeio. supervised post-graduate students develop packages, including ggmsa, ggtreeExtra, MicrobiomeProfiler MicrobiotaProcess.research group aims generate new insights human health disease development new software tools novel analysis biomedical data. software package developed research group helps biologists analyze data reveal biological clues hidden data.published several journal articles, including 5 highly cited papers (Yu et al., 2017, 2012; Yu, Wang, Yan, et al., 2015; Yu, Wang, & , 2015; Yu & , 2016). articles cited 10,000 times. ggtree (Yu et al., 2017) paper selected feature article celebrate 10th anniversary launch Methods Ecology Evolution2. one 2020 Highly Cited Chinese Researchers (Elsevier-Scopus) Biomedical Engineering.","code":""},{"path":"chapter1.html","id":"chapter1","chapter":"1 Importing Tree with Data","heading":"1 Importing Tree with Data","text":"","code":""},{"path":"chapter1.html","id":"pc","chapter":"1 Importing Tree with Data","heading":"1.1 Overview of Phylogenetic Tree Construction","text":"Phylogenetic trees used describe genealogical relationships among group organisms, can constructed based genetic sequences organisms. rooted phylogenetic tree represents model evolutionary history depicted ancestor-descendant relationships tree nodes clustering ‘sister’ ‘cousin’ organisms different level relatedness, illustrated Figure 1.1. infectious disease research, phylogenetic trees usually built pathogens’ gene genome sequences show pathogen sample genetically closer another sample, providing insights underlying unobserved epidemiologic linkage potential source outbreak.\nFIGURE 1.1: Components phylogenetic tree. External nodes (green circles), also called ‘tips’, represent actual organisms sampled sequenced (e.g., viruses infectious disease research). ‘taxa’ terminology evolutionary biology. internal nodes (blue circles) represent hypothetical ancestors tips. root (red circle) common ancestor species tree. horizontal lines branches represent evolutionary changes (gray number) measured unit time genetic divergence. bar bottom provides scale branch lengths.\nphylogenetic tree can constructed genetic sequences using distance-based methods character-based methods. Distance-based methods, including unweighted pair group method arithmetic means (UPGMA) Neighbor-joining (NJ), based matrix pairwise genetic distances calculated sequences. character-based methods, including maximum parsimony (MP) (Fitch, 1971), maximum likelihood (ML) (Felsenstein, 1981), Bayesian Markov Chain Monte Carlo (BMCMC) method (Rannala & Yang, 1996), based mathematical model describes evolution genetic characters searches best phylogenetic tree according optimality criteria.MP method assumes evolutionary change rare minimizes amount character-state changes (e.g., number DNA substitutions). criterion similar Occam’s razor, simplest hypothesis can explain data best hypothesis. Unweighted parsimony assumes mutations across different characters (nucleotides amino acids) equally likely, weighted method assumes unequal likelihood mutations (e.g., third codon position liable codon positions; transition mutations higher frequency transversion). concept MP method straightforward intuitive, probable reason popularity amongst biologists care research question rather computational details analysis. However, method several disadvantages, particular, tree inference can biased well-known systematic error called long-branch attraction (LBA) incorrectly infer distantly related lineages closely related (Felsenstein, 1978). MP method poorly takes consideration many sequence evolution factors (e.g., reversals convergence) hardly observable existing genetic data.maximum likelihood (ML) method Bayesian Markov Chain Monte Carlo (BMCMC) method two commonly used methods phylogenetic tree construction often used scientific publications. ML BMCMC methods require substitution model sequence evolution. Different sequence data different substitution models formulate evolutionary process DNA, codon amino acid. several models nucleotide substitution, including JC69, K2P, F81, HKY, GTR (Arenas, 2015). models can used conjunction rate variation across sites (denoted +\\(\\Gamma\\))) (Yang, 1994) proportion invariable sites (denoted +) (Shoemaker & Fitch, 1989). Previous research (Lemmon & Moriarty, 2004) suggested misspecification substitution model might bias phylogenetic inference. Procedural testing best-fit substitution model recommended.optimal criterion ML method find tree maximizes likelihood given sequence data. procedure ML method simple: calculating likelihood tree optimizing topology branches (substitution model parameters, fixed) best tree found. Heuristic search, implemented PhyML RAxML, often used find best tree based likelihood criterion. Bayesian method finds tree maximizes posterior probability sampling trees MCMC based given substitution model. One advantages BMCMC parameter variance tree topological uncertainty, included posterior clade probability, can naturally conveniently obtained sampling trees MCMC process. Moreover, influence topological uncertainty parameter estimates also naturally integrated BMCMC phylogenetic framework.simple phylogenetic tree, data associated tree branches/nodes branch lengths (indicating genetic time divergence) lineage supports bootstrap values estimated bootstrapping procedure posterior clade probability summarized sampled trees BMCMC analysis.","code":""},{"path":"chapter1.html","id":"format","chapter":"1 Importing Tree with Data","heading":"1.2 Phylogenetic Tree Formats","text":"several file formats designed store phylogenetic trees data associated nodes branches. three commonly used formats Newick3, NEXUS (Maddison et al., 1997), Phylip (Felsenstein, 1989). formats (e.g., NHX) extended Newick format. Newick NEXUS formats supported input software evolutionary biology, software tools output newer standard files (e.g., BEAST MrBayes) introducing new rules/data blocks storing evolutionary inferences. cases (e.g., PAML r8s), output log files recognized single software.","code":""},{"path":"chapter1.html","id":"newick-tree-format","chapter":"1 Importing Tree with Data","heading":"1.2.1 Newick tree format","text":"Newick tree format standard representing trees computer-readable form.\nFIGURE 1.2: sample tree demonstrating Newick text encode tree structure. Tips aligned right-hand side branch lengths labeled middle branch.\nrooted tree shown Figure 1.2 can represented following sequence characters Newick tree text.tree text ends semicolon. Internal nodes represented pair matched parentheses. parentheses descendant nodes node. instance (t2:0.04,t1:0.34) represents parent node t2 t1 immediate descendants. Sibling nodes separated comma tips represented names. branch length (parent node child node) represented real number child node preceded colon. Singular data (e.g., bootstrap values) associated internal nodes branches may encoded node labels represented simple text/numbers colon.Newick tree format developed Meacham 1984 Phylogeny Inference Package PHYLIP (Retief, 2000) package. Newick format now widely used tree format used PHYLIP, PAUP* (Wilgenbusch & Swofford, 2003), TREE-PUZZLE (Schmidt et al., 2002), MrBayes, many applications. Phylip tree format contains Phylip multiple sequence alignment (MSA) corresponding Newick tree text built based MSA sequences file.","code":"((t2:0.04,t1:0.34):0.89,(t5:0.37,(t4:0.03,t3:0.67):0.9):0.59); "},{"path":"chapter1.html","id":"nexus-tree-format","chapter":"1 Importing Tree with Data","heading":"1.2.2 NEXUS tree format","text":"NEXUS format (Maddison et al., 1997) incorporates Newick tree text related information organized separated units known blocks. NEXUS block following structure:example, example tree can saved following NEXUS format:Comments can placed using square brackets. blocks can recognized programs including TAXA (contains information taxa), DATA (contains data matrix, e.g., sequence alignment), TREE (contains phylogenetic tree, .e., Newick tree text). Notably, blocks can diverse recognized one particular program. example NEXUS file exported PAUP* paup block contains PAUP* commands, whereas FigTree exports NEXUS file figtree block contains visualization settings. NEXUS organizes different types data different blocks, whereas programs support reading NEXUS can parse blocks recognized ignore . good mechanism allow different programs use format without crashing unsupported types data present. Notably, programs support parsing TAXA, DATA, TREE blocks; therefore, program/platform generically read kinds data blocks NEXUS useful phylogenetic data integration.DATA block widely used store sequence alignment. purpose, user can store tree sequence data Phylip format essentially Phylip multiple sequence alignment Newick tree text, respectively. used PHYLIP.","code":"#NEXUS\n...\nBEGIN characters;\n...\nEND;#NEXUS\n[R-package APE, Fri Apr 15 15:43:58 2022]\n\nBEGIN TAXA;\n    DIMENSIONS NTAX = 5;\n    TAXLABELS\n        t2\n        t1\n        t5\n        t4\n        t3\n    ;\nEND;\nBEGIN TREES;\n    TRANSLATE\n        1   t2,\n        2   t1,\n        3   t5,\n        4   t4,\n        5   t3\n    ;\n    TREE * UNTITLED = [&R]\n((1:0.04,2:0.34):0.89,(3:0.37,(4:0.03,5:0.67):0.9):0.59);\nEND;"},{"path":"chapter1.html","id":"nhxtext","chapter":"1 Importing Tree with Data","heading":"1.2.3 New Hampshire eXtended format","text":"Newick, NEXUS, phylip mainly designed store phylogenetic trees basic singular data associated internal nodes branches. addition singular data annotation branches nodes (mentioned ), New Hampshire eXtended (NHX) format, based Newick (also called New Hampshire), developed introduce tags associate multiple data fields tree nodes (internal nodes tips). Tags placed branch length must wrapped [&&NHX ] makes possible compatible NEXUS format defined characters [ ] comments. NHX also output format PHYLDOG (Boussau et al., 2013) RevBayes (Höhna et al., 2016). Tree Viewer (ATV) (Zmasek & Eddy, 2001) java tool supports displaying annotation data stored NHX format, package longer maintained.sample tree NHX definition document4:","code":"(((ADH2:0.1[&&NHX:S=human], ADH1:0.11[&&NHX:S=human]):0.05\n[&&NHX:S=primates:D=Y:B=100],ADHY:0.1[&&NHX:S=nematode],\nADHX:0.12[&&NHX:S=insect]):0.1[&&NHX:S=metazoa:D=N],(ADH4:0.09\n[&&NHX:S=yeast],ADH3:0.13[&&NHX:S=yeast],ADH2:0.12[&&NHX:S=yeast],\nADH1:0.11[&&NHX:S=yeast]):0.1[&&NHX:S=Fungi])[&&NHX:D=N];"},{"path":"chapter1.html","id":"jplace-format","chapter":"1 Importing Tree with Data","heading":"1.2.4 Jplace format","text":"store Next Generation Sequencing (NGS) short reads mapped onto phylogenetic tree (metagenomic classification), Matsen (Matsen et al., 2012) proposed jplace format phylogenetic placements. Jplace format based JSON contains four keys: tree, fields, placements, metadata, version. tree value contains tree text extended Newick tree format putting edge label brackets (available) branch length putting edge number curly braces edge label. fields value contains header information placement data. value placements list pqueries. pquery contains two keys: p placements n name nm names multiplicity. value p list placement pqueries.jplace sample file:Jplace output format PPLACER (Matsen et al., 2010a) Evolutionary Placement Algorithm (EPA) (Berger et al., 2011). two programs contain tools visualize placement results. PPLACER provides placeviz convert jplace file phyloXML Newick formats can visualized Archaeopteryx.","code":"{\n    \"tree\": \"(((((((A:4{1},B:4{2}):6{3},C:5{4}):8{5},D:6{6}):\n    3{7},E:21{8}):10{9},((F:4{10},G:12{11}):14{12},H:8{13}):\n    13{14}):13{15},((I:5{16},J:2{17}):30{18},(K:11{19},\n    L:11{20}):2{21}):17{22}):4{23},M:56{24});\",\n    \"placements\": [\n    {\"p\":[24, -61371.300778, 0.333344, 0.000003, 0.003887], \n     \"n\":[\"AA\"]\n    },\n    {\"p\":[[1, -61312.210786, 0.333335, 0.000001, 0.000003],\n          [2, -61322.210823, 0.333322, 0.000003, 0.000003],\n          [3, -61352.210823, 0.333322, 0.000961, 0.000003]],\n     \"n\":[\"BB\"]\n    },\n    {\"p\":[[8, -61312.229128, 0.200011, 0.000001, 0.000003],\n          [9, -61322.229179, 0.200000, 0.000003, 0.000003],\n          [10, -61342.229223, 0.199992, 0.000003, 0.000003]], \n    \"n\":[\"CC\"]\n    }\n    ],\n    \"metadata\": {\"info\": \"a jplace sample file\"},\n    \"version\" : 2,\n    \"fields\": [\"edge_num\", \"likelihood\", \"like_weight_ratio\", \n    \"distal_length\", \"pendant_length\"\n    ]\n}"},{"path":"chapter1.html","id":"software-outputs","chapter":"1 Importing Tree with Data","heading":"1.2.5 Software outputs","text":"RAxML (Stamatakis, 2014) can output Newick format storing bootstrap values internal node labels. Another way RAxML supports place bootstrap value inside square brackets branch length. supported software supports Newick format square brackets ignored.BEAST (Bouckaert et al., 2014) output based NEXUS, also introduces square brackets tree block store evolutionary evidence inferred BEAST. Inside brackets, curly braces may also incorporated feature values length 1 (e.g., Highest Probability Density (HPD) range substitution rate). brackets placed node branch length (.e., label exists colon). bracket defined Newick format reserved character NEXUS comment. information ignored standard NEXUS parsers.sample TREE block BEAST output:BEAST output can contain many different evolutionary inferences, depending analysis models defined BEAUTi running. example molecular clock analysis, contains rate, length, height, posterior corresponding HPD range uncertainty estimation. Rate estimated evolutionary rate branch. Length length branch years. Height time node root, posterior Bayesian clade credibility value. example output tree molecular clock analysis contain inferences. save space, length estimation shown . Besides, Molecular Evolutionary Genetics Analysis (MEGA) (Kumar et al., 2016) also supports exporting trees BEAST compatible Nexus format (see session 1.3.2).MrBayes (Huelsenbeck & Ronquist, 2001) program uses Markov Chain Monte Carlo method sample posterior probability distributions. output file annotates nodes branches separately two sets square brackets. example , posterior clade probabilities node branch length estimates branch:save space, inferences removed contains prob clade probability length_mean mean value branch length. full version file also contains prob_stddev, prob_range, prob(percent), prob+-sd probability inferences length_median, length_95%_HPD every branch.BEAST MrBayes outputs expected parsed without inferences (dropped comments) software supports NEXUS. FigTree supports parsing BEAST, MrBayes outputs inferences can used display annotate tree. , extracting data analysis still challenging.HyPhy (Pond et al., 2005) number phylogenetic analyses, including ancestral sequence reconstruction. ancestral sequence reconstruction, sequences Newick tree text stored NEXUS format major analysis output. completely follow NEXUS definition put ancestral node labels TAXA instead external node label. MATRIX block contains sequence alignment ancestral nodes referred back tree stored TREES block since contain node labels. sample output (save space, first 72bp alignment shown):applications output rich information text also contains phylogenetic trees associated data. example r8s (Sanderson, 2003) output three trees log file, namely TREE, RATE, PHYLO branches scaled time, substitution rate, absolute substitutions, respectively.Phylogenetic Analysis Maximum Likelihood (PAML) (Yang, 2007) package programs phylogenetic analyses DNA protein sequences. Two main programs, BASEML CODEML, implement variety models. BASEML estimates tree topology, branch lengths, substitution parameters using number nucleotide substitution models available, including JC69, K80, F81, F84, HKY85, T92, TN93, GTR. CODEML estimates synonymous non-synonymous substitution rates, likelihood ratio test positive selection codon substitution models (Goldman & Yang, 1994).BASEML outputs mlb file contains input sequence (taxa) alignment phylogenetic tree branch length well substitution model parameters estimated. supplementary result file, rst, contains sequence alignment (ancestral sequence performs reconstruction ancestral sequences) Naive Empirical Bayes (NBE) probabilities site alignment evolved. CODEML outputs mlc file contains tree structure estimation synonymous non-synonymous substitution rates. CODEML also outputs supplementary result file, rst, similar BASEML except site defined codon instead nucleotide. Parsing files can tedious oftentimes need number post-processing steps require expertise programming (e.g., Python5 Perl6).Introducing square brackets quite common storing extra information, including RAxML store bootstrap value, NHX format annotation, jplace edge label, BEAST evolutionary estimation, etc. positions place square brackets consistent different software contents employ different rules storing associated data, properties make difficult parse associated data. software, just ignore square brackets parse tree structure file compatible. contain invalid characters (e.g., curly braces tree field jplace format), even tree structure can’t parsed standard parsers.difficult extract useful phylogeny/taxon-related information different analysis outputs produced various evolutionary inference software, displaying phylogenetic tree analysis. FigTree supports BEAST output, software outputs contain evolutionary inferences associated data. output-rich text files (e.g., r8s, PAML, etc.), tree structure parsed tree viewing software users need expertise manually extract phylogenetic tree useful result data output file. However, manual operation slow error-prone.easy retrieve phylogenetic trees evolutionary data different analysis outputs commonly used software field. (e.g., PAML output jplace file) without software programming library support parsing file, others (e.g., BEAST MrBayes output) can parsed without evolutionary inferences stored square brackets omitted comment software. Although FigTree support visualizing evolutionary statistics inferred BEAST MrBayes, extracting data analysis supported. Different software packages implement different algorithms different analyses (e.g., PAML dN/dS, HyPhy ancestral sequences, BEAST skyline analysis). Therefore, encountering genomic sequence data, desired need efficiently flexibly integrate different analysis inference results comprehensive understanding, comparison, analysis. motivated us develop programming library parse phylogenetic trees data various sources.","code":"TREE * TREE1 = [&R] (((11[&length=9.47]:9.39,14[&length=6.47]:6.39)\n[&length=25.72]:25.44,4[&length=9.14]:8.82)[&length=3.01]:3.1,\n(12[&length=0.62]:0.57,(10[&length=1.6]:1.56,(7[&length=5.21]:5.19,\n((((2[&length=3.3]:3.26,(1[&length=1.34]:1.32,(6[&length=0.85]:0.83,\n13[&length=0.85]:0.83)[&length=2.5]:2.49)[&length=0.97]:0.94)\n[&length=0.5]:0.5,9[&length=1.76]:1.76)[&length=2.41]:2.36,\n8[&length=2.19]:2.11)[&length=0.27]:0.24,(3[&length=3.33]:3.31,\n(15[&length=5.29]:5.27,5[&length=3.29]:3.27)[&length=1.04]:1.04)\n[&length=1.98]:2.04)[&length=2.83]:2.84)[&length=5.39]:5.37)\n[&length=2.02]:2)[&length=4.35]:4.36)[&length=0];  tree con_all_compat = [&U] (8[&prob=1.0]:2.94e-1[&length_mean=2.9e-1],\n10[&prob=1.0]:2.25e-1[&length_mean=2.2e-1],((((1[&prob=1.0]:1.43e-1\n[&length_mean=1.4e-1],2[&prob=1.0]:1.92e-1[&length_mean=1.9e-1])[&prob=1.0]:\n1.24e-1[&length_mean=1.2e-1],9[&prob=1.0]:2.27e-1[&length_mean=2.2e-1])\n[&prob=1.0]:1.72e-1[&length_mean=1.7e-1],12[&prob=1.0]:5.11e-1\n[&length_mean=5.1e-1])[&prob=1.0]:1.76e-1[&length_mean=1.7e-1],\n(((3[&prob=1.0]:5.46e-2[&length_mean=5.4e-2],(6[&prob=1.0]:1.03e-2\n[&length_mean=1.0e-2],7[&prob=1.0]:7.13e-3[&length_mean=7.2e-3])[&prob=1.0]:\n6.93e-2[&length_mean=6.9e-2])[&prob=1.0]:6.03e-2[&length_mean=6.0e-2],\n(4[&prob=1.0]:6.27e-2[&length_mean=6.2e-2],5[&prob=1.0]:6.31e-2\n[&length_mean=6.3e-2])[&prob=1.0]:6.07e-2[&length_mean=6.0e-2])[&prob=1.0]:,\n1.80e-1[&length_mean=1.8e-1]11[&prob=1.0]:2.37e-1[&length_mean=2.3e-1])\n[&prob=1.0]:4.05e-1[&length_mean=4.0e-1])[&prob=1.0]:1.16e+000\n[&length_mean=1.162699558201079e+000])[&prob=1.0][&length_mean=0];#NEXUS\n\n[\nGenerated by HYPHY 2.0020110620beta(MP) for MacOS(Universal Binary) \n    on Tue Dec 23 13:52:34 2014\n\n]\n\nBEGIN TAXA;\n    DIMENSIONS NTAX = 13;\n    TAXLABELS\n        'Node1' 'Node2' 'Node3' 'Node4' 'Node5' 'Node12' 'Node13' 'Node15'\n            'Node18' 'Node20' 'Node22' 'Node24' 'Node26' ;\nEND;\n\nBEGIN CHARACTERS;\n    DIMENSIONS NCHAR = 2148;\n    FORMAT\n        DATATYPE = DNA\n\n        GAP=-\n        MISSING=?\n        NOLABELS\n    ;\n\nMATRIX\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATTGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAATGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\n ATGGAAGACTTTGTGCGACAGTGCTTCAATCCAATGATCGTCGAGCTTGCGGAAAAGGCAATGAAAGAATAT\nEND;\n\nBEGIN TREES;\n    TREE tree = (K,N,(D,(L,(J,(G,((C,(E,O)),(H,(I,(B,(A,(F,M)))))))))));\nEND;"},{"path":"chapter1.html","id":"getting-tree-data-with-treeio","chapter":"1 Importing Tree with Data","heading":"1.3 Getting Tree Data with treeio","text":"Phylogenetic trees commonly used present evolutionary relationships \nspecies. Information associated taxon species/strains may \nanalyzed context evolutionary history depicted phylogenetic\ntree. example, host information influenza virus strains tree\nstudied understand host range virus lineage. Moreover, \nmeta-data (e.g., isolation host, time, location, etc.) directly associated\ntaxon strains also often subjected evolutionary \ncomparative phylogenetic models analyses, infer dynamics associated\nevolutionary transmission processes virus. \nmeta-data phenotypic experimental data stored either \nannotation data associated nodes branches often produced \ninconsistent format different analysis programs.Getting trees R still limited. Newick Nexus can imported \nseveral packages, including ape, phylobase. NeXML\nformat can parsed RNeXML. However, analysis results \nwidely used software packages field well\nsupported. SIMMAP output can parsed phyext2 phytools.\nAlthough PHYLOCH can\nimport BEAST MrBayes output, internal node attributes parsed \ntip attributes ignored7. Many software outputs mainly required\nprogramming expertise import tree associated data. Linking external\ndata, including experimental clinical data, phylogeny another obstacle\nevolution biologists.fill gap tree formats software outputs parsed within software/platform, R package treeio (Wang et al., 2020) developed parsing various tree file formats outputs common evolutionary analysis software. treeio package developed R programming language (R Core Team, 2016). tree structure can parsed, also associated data evolutionary inferences, including NHX\nannotation, clock rate inferences (BEAST r8s (Sanderson, 2003) programs),\nsynonymous non-synonymous substitutions (CODEML), ancestral\nsequence construction (\nHyPhy, BASEML CODEML), etc..\nCurrently, treeio able read\nfollowing file formats: Newick, Nexus, New Hampshire eXtended format (NHX),\njplace Phylip well data outputs following analysis programs:\nASTRAL,\nBEAST,\nEPA,\nHyPhy,\nMEGA,\nMrBayes,\nPAML,\nPHYLDOG,\nPPLACER,\nr8s,\nRAxML \nRevBayes, etc.\nmade possible several parser functions developed treeio (Table 1.1) (Wang et al., 2020).\nTABLE 1.1: Parser functions defined treeio\ntreeio package defines base\nclasses functions phylogenetic tree input output. \ninfrastructure enables evolutionary evidence inferred commonly\nused software packages used R. instance, dN/dS values \nancestral sequences inferred\nCODEML (Yang, 2007),\nclade support values (posterior) inferred\nBEAST (Bouckaert et al., 2014) short read placement\nEPA (Berger et al., 2011)\nPPLACER (Matsen et al., 2010b). pieces \nevolutionary evidence can analyzed R used annotate\nphylogenetic tree using ggtree\n(Yu et al., 2017). growth analysis tools models introduces\nchallenge integrate different varieties data analysis results \ndifferent sources integral analysis phylogenetic tree\nbackground. treeio package (Wang et al., 2020)\nprovides merge_tree function allow combining tree data obtained \ndifferent sources. addition, treeio also enables external data linked phylogenetic tree structure.parsing, storage tree structure associated data made\nS4 class, treedata, defined tidytree package. parsed data\nmapped tree branches nodes inside treedata object, \ncan efficiently used visually annotate tree\nusing ggtree (Yu et al., 2017) ggtreeExtra (Xu, Dai, et al., 2021).\nprogrammable platform phylogenetic data parsing, integration, annotations makes us easily identify evolutionary dynamics correlation patterns (Figure 1.3) (Wang et al., 2020).\nFIGURE 1.3: Overview treeio package relations tidytree ggtree. Treeio supports parsing tree data number file formats software outputs. treedata object stores phylogenetic tree node/branch-associated data. Treeio provides several functions manipulate tree data. Users can convert treedata object tidy data frame (row represents node tree column represents variable) process tree data using tidy interface implemented tidytree. tree can extracted treedata object exported Newick NEXUS file can exported associated data single file (either BEAST NEXUS jtree format). Associated data stored treedata object can used annotate tree using ggtree. addition, ggtree supports number tree objects, including phyloseq microbiome data obkData outbreak data. phylo, multiPhylo (ape package), phylo4, phylo4d (phylobase package), phylog (ade4 package), phyloseq (phyloseq package), obkData (OutbreakTools package) tree objects defined R community store tree without domain-specific data. tree objects well hierarchical clustering results (e.g., hclust dendrogram objects) supported ggtree.\n","code":""},{"path":"chapter1.html","id":"overview-of-treeio","chapter":"1 Importing Tree with Data","heading":"1.3.1 Overview of treeio","text":"treeio package (Wang et al., 2020) defined S4 classes storing phylogenetic trees diverse types associated data covariates different sources including analysis outputs different software packages. also defined corresponding parser functions parsing phylogenetic trees annotation data stored data objects R manipulation analysis (see Table 1.1). Several accessor functions defined facilitate accessing tree annotation data, including get.fields obtaining annotation features available tree object, get.placements obtaining phylogenetic placement results (.e., output PPLACER, EPA, etc.), get.subs obtaining genetic substitutions parent node child node, get.tipseq getting tip sequences.S3 class, phylo, defined ape (Paradis et al., 2004) package, widely used R community many packages. treeio uses S4 class, enable available R packages analyze tree imported treeio, treeio provides .phylo function convert treeio-generated tree object phylo object contains tree structure without annotation data. way, treeio also provides .treedata function convert phylo object evolutionary analysis result (e.g., bootstrap values calculated ape ancestral states inferred phangorn (Schliep, 2011) etc.) stored treedata S4 object, making easy map data tree structure visualized using ggtree (Yu et al., 2017).allow integration different kinds data phylogenetic tree, treeio (Wang et al., 2020) provides merge_tree function (details section 2.2.1) combining evolutionary statistics/evidence imported different sources including common tree files outputs analysis programs (Table 1.1). information, sampling location, taxonomy information, experimental result, evolutionary traits, etc. stored separate files user-defined format. treeio, read data users’ files using standard R IO functions, attach tree object full_join methods defined tidytree treeio packages (see also %<+% operator defined ggtree). attaching, data become attributes associated nodes branches, can compared data incorporated can visually displayed tree (Yu et al., 2018).facilitate storing complex data associated phylogenetic tree, treeio implemented write.beast write.jtree functions export treedata object single file (see Chapter 3).","code":""},{"path":"chapter1.html","id":"function-demonstration","chapter":"1 Importing Tree with Data","heading":"1.3.2 Function demonstration","text":"","code":""},{"path":"chapter1.html","id":"parsing-beast-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.1 Parsing BEAST output","text":"Since % valid character names, feature names contain x% convert 0.x. example, length_95%_HPD changed length_0.95_HPD.tree structure also features inferred BEAST stored S4 object. features can used tree annotation (Figure 5.8).","code":"\nfile <- system.file(\"extdata/BEAST\", \"beast_mcc.tree\", package=\"treeio\")\nbeast <- read.beast(file)\nbeast## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/BEAST/beast_mcc.tree'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 15 tips and 14 internal nodes.\n## \n## Tip labels:\n##   A_1995, B_1996, C_1995, D_1987, E_1996, F_1997, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'height', 'height_0.95_HPD', 'height_median',\n## 'height_range', 'length', 'length_0.95_HPD',\n## 'length_median', 'length_range', 'posterior', 'rate',\n## 'rate_0.95_HPD', 'rate_median', 'rate_range'."},{"path":"chapter1.html","id":"mega","chapter":"1 Importing Tree with Data","heading":"1.3.2.2 Parsing MEGA output","text":"Molecular Evolutionary Genetics Analysis (MEGA) software (Kumar et al., 2016) supports exporting trees three distinct formats: Newick, tabular, Nexus. Newick file can parsed using read.tree read.newick functions. MEGA Nexus file similar BEAST Nexus treeio (Wang et al., 2020) provides read.mega function parse tree.tabular output contains tree associated information (divergence time example) tabular flat text file. read.mega_tabular function can parse tree data simultaneously.","code":"\nfile <- system.file(\"extdata/MEGA7\", \"mtCDNA_timetree.nex\", \n                    package = \"treeio\")\nread.mega(file)## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/MEGA7/mtCDNA_timetree.nex'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 7 tips and 6 internal nodes.\n## \n## Tip labels:\n##   homo_sapiens, chimpanzee, bonobo, gorilla,\n## orangutan, sumatran, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'branch_length', 'data_coverage', 'rate',\n## 'reltime', 'reltime_0.95_CI', 'reltime_stderr'.\nfile <- system.file(\"extdata/MEGA7\", \"mtCDNA_timetree_tabular.txt\", \n                    package = \"treeio\")\nread.mega_tabular(file) ## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/MEGA7/mtCDNA_timetree_tabular.txt'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 7 tips and 6 internal nodes.\n## \n## Tip labels:\n##   chimpanzee, bonobo, homo sapiens, gorilla,\n## orangutan, sumatran, ...\n## Node labels:\n##   , , demoLabel2, , , \n## \n## Rooted; no branch lengths.\n## \n## with the following features available:\n##   'RelTime', 'CI_Lower', 'CI_Upper', 'Rate', 'Data\n## Coverage'."},{"path":"chapter1.html","id":"parsing-mrbayes-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.3 Parsing MrBayes output","text":"Although Nexus file generated MrBayes different output BEAST, similar. treeio package provides read.mrbayes() internally calls read.beast() parse MrBayes outputs.","code":"\nfile <- system.file(\"extdata/MrBayes\", \"Gq_nxs.tre\", package=\"treeio\")\nread.mrbayes(file)## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/MrBayes/Gq_nxs.tre'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 12 tips and 10 internal nodes.\n## \n## Tip labels:\n##   B_h, B_s, G_d, G_k, G_q, G_s, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##   'length_0.95HPD', 'length_mean', 'length_median',\n## 'prob', 'prob_range', 'prob_stddev', 'prob_percent',\n## 'prob+-sd'."},{"path":"chapter1.html","id":"parsing-paml-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.4 Parsing PAML output","text":"Phylogenetic Analysis Maximum Likelihood (PAML) package tools phylogenetic analyses DNA protein sequences using maximum likelihood. Tree search algorithms implemented BASEML CODEML. read.paml_rst() function provided treeio can parse rst file BASEML CODEML. difference space sequences.\nBASEML, every ten bases separated one space, CODEML, every three bases (triplet) separated one space.Similarly, can parse rst file CODEML.Ancestral sequences inferred BASEML CODEML via marginal \njoint ML reconstruction methods stored S4 object mapped \ntree nodes. treeio (Wang et al., 2020) automatically determine substitutions \nsequences ends branch. amino acid substitution also \ndetermined translating nucleotide sequences amino acid sequences. \ncomputed substitutions also stored S4 object efficient tree annotation later (Figure 5.10).CODEML infers selection\npressure estimated dN/dS, dN dS. pieces information \nstored output file mlc, can parsed read.codeml_mlc() function.rst mlc files can parsed separately demonstrated previously, \ncan also parsed together using read.codeml() function.features rst mlc files imported single S4\nobject hence available annotation visualization. \nexample, can annotate display dN/dS (mlc file) \namino acid substitutions (derived rst file) phylogenetic tree (Yu et al., 2017).","code":"\nbrstfile <- system.file(\"extdata/PAML_Baseml\", \"rst\", package=\"treeio\")\nbrst <- read.paml_rst(brstfile)\nbrst## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/PAML_Baseml/rst'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   A, B, C, D, E, F, ...\n## Node labels:\n##   16, 17, 18, 19, 20, 21, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##   'subs', 'AA_subs'.\ncrstfile <- system.file(\"extdata/PAML_Codeml\", \"rst\", package=\"treeio\")\n## type can be one of \"Marginal\" or \"Joint\"\ncrst <- read.paml_rst(crstfile, type = \"Joint\")\ncrst## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/PAML_Codeml/rst'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   A, B, C, D, E, F, ...\n## Node labels:\n##   16, 17, 18, 19, 20, 21, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##   'subs', 'AA_subs'.\nmlcfile <- system.file(\"extdata/PAML_Codeml\", \"mlc\", package=\"treeio\")\nmlc <- read.codeml_mlc(mlcfile)\nmlc## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/PAML_Codeml/mlc'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   A, B, C, D, E, F, ...\n## Node labels:\n##   16, 17, 18, 19, 20, 21, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##   't', 'N', 'S', 'dN_vs_dS', 'dN', 'dS', 'N_x_dN',\n## 'S_x_dS'.\n## tree can be one of \"rst\" or \"mlc\" to specify\n## using tree from which file as base tree in the object\nml <- read.codeml(crstfile, mlcfile, tree = \"mlc\")\nml## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/PAML_Codeml/rst',\n##  '/home/ygc/R/library/treeio/extdata/PAML_Codeml/mlc'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   A, B, C, D, E, F, ...\n## Node labels:\n##   16, 17, 18, 19, 20, 21, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##   'subs', 'AA_subs', 't', 'N', 'S', 'dN_vs_dS', 'dN',\n## 'dS', 'N_x_dN', 'S_x_dS'."},{"path":"chapter1.html","id":"parsing-hyphy-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.5 Parsing HyPhy output","text":"Hypothesis testing using Phylogenies (HyPhy) software package analyzing genetic sequences. Ancestral sequences inferred HyPhy \nstored Nexus output file, contains tree topology ancestral\nsequences. parse data file, users can use read.hyphy.seq() function.map sequences tree, users also provide \ninternal-node-labeled tree. users want determine substitution, need\nalso provide tip sequences. case, substitutions determined automatically, just parse output CODEML.","code":"\nancseq <- system.file(\"extdata/HYPHY\", \"ancseq.nex\", package=\"treeio\")\nread.hyphy.seq(ancseq)## 13 DNA sequences in binary format stored in a list.\n## \n## All sequences of same length: 2148 \n## \n## Labels:\n## Node1\n## Node2\n## Node3\n## Node4\n## Node5\n## Node12\n## ...\n## \n## Base composition:\n##     a     c     g     t \n## 0.335 0.208 0.237 0.220 \n## (Total: 27.92 kb)\nnwk <- system.file(\"extdata/HYPHY\", \"labelledtree.tree\", package=\"treeio\")\ntipfas <- system.file(\"extdata\", \"pa.fas\", package=\"treeio\")\nhy <- read.hyphy(nwk, ancseq, tipfas)\nhy## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/HYPHY/labelledtree.tree'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   K, N, D, L, J, G, ...\n## Node labels:\n##   Node1, Node2, Node3, Node4, Node5, Node12, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##   'subs', 'AA_subs'."},{"path":"chapter1.html","id":"parsing-r8s-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.6 Parsing r8s output","text":"r8s package uses parametric, semi-parametric, \nnon-parametric methods relax molecular clock allow better estimations \ndivergence times evolution rates (Sanderson, 2003). outputs three\ntrees log file, namely, TREE, RATO, PHYLO time tree, rate tree,\nabsolute substitution tree, respectively.time tree scaled divergence time, rate tree scaled substitution rate\nabsolute substitution tree scaled absolute number substitutions.\nparsing file, three trees stored multiPhylo object (Figure 4.15).","code":"\nr8s <- read.r8s(system.file(\"extdata/r8s\", \"H3_r8s_output.log\", package=\"treeio\"))\nr8s## 3 phylogenetic trees"},{"path":"chapter1.html","id":"parsing-output-of-raxml-bootstrap-analysis","chapter":"1 Importing Tree with Data","heading":"1.3.2.7 Parsing output of RAxML bootstrap analysis","text":"RAxML bootstrapping analysis\noutputs Newick tree text standard, stores bootstrap values\ninside square brackets branch lengths. file usually parsed\ntraditional Newick parser, ape::read.tree(). function\nread.raxml() can read files store bootstrap additional\nfeature, can used display tree used color tree\nbranches, etc.","code":"\nraxml_file <- system.file(\"extdata/RAxML\", \n                          \"RAxML_bipartitionsBranchLabels.H3\", \n                          package=\"treeio\")\nraxml <- read.raxml(raxml_file)\nraxml## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/RAxML/RAxML_bipartitionsBranchLabels.H3'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 64 tips and 62 internal nodes.\n## \n## Tip labels:\n##   A_Hokkaido_M1_2014_H3N2_2014,\n## A_Czech_Republic_1_2014_H3N2_2014,\n## FJ532080_A_California_09_2008_H3N2_2008,\n## EU199359_A_Pennsylvania_05_2007_H3N2_2007,\n## EU857080_A_Hong_Kong_CUHK69904_2006_H3N2_2006,\n## EU857082_A_Hong_Kong_CUHK7047_2005_H3N2_2005, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##   'bootstrap'."},{"path":"chapter1.html","id":"parsing-nhx-tree","chapter":"1 Importing Tree with Data","heading":"1.3.2.8 Parsing NHX tree","text":"NHX (New Hampshire eXtended) format extension Newick introducing NHX\ntags. NHX commonly used phylogenetics software,\nincluding\nPHYLDOG (Boussau et al., 2013),\nRevBayes (Höhna et al., 2014),\nstoring statistical inferences. following codes imported NHX tree \nassociated data inferred PHYLDOG (Figure 3.1A).","code":"\nnhxfile <- system.file(\"extdata/NHX\", \"phyldog.nhx\", package=\"treeio\")\nnhx <- read.nhx(nhxfile)\nnhx## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/NHX/phyldog.nhx'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 16 tips and 15 internal nodes.\n## \n## Tip labels:\n##   Prayidae_D27SS7@2825365, Kephyes_ovata@2606431,\n## Chuniphyes_multidentata@1277217,\n## Apolemia_sp_@1353964, Bargmannia_amoena@263997,\n## Bargmannia_elongata@946788, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'Ev', 'ND', 'S'."},{"path":"chapter1.html","id":"parsing-phylip-tree","chapter":"1 Importing Tree with Data","heading":"1.3.2.9 Parsing Phylip tree","text":"Phylip format contains multiple sequence alignment taxa Phylip sequence\nformat corresponding Newick tree text built taxon sequences.\nMultiple sequence alignment can sorted based tree structure displayed \nright-hand side tree using ggtree msaplot() function combining ggmsa package (see also Basic Protocol 5 (Yu, 2020)).","code":"\nphyfile <- system.file(\"extdata\", \"sample.phy\", package=\"treeio\")\nphylip <- read.phylip(phyfile)\nphylip## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/sample.phy'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   K, N, D, L, J, G, ...\n## \n## Unrooted; no branch lengths."},{"path":"chapter1.html","id":"parsing-epa-and-pplacer-output","chapter":"1 Importing Tree with Data","heading":"1.3.2.10 Parsing EPA and pplacer output","text":"EPA (Berger et al., 2011) PPLACER (Matsen et al., 2010b) common output file format, jplace, can \nparsed read.jplace() function.number evolutionary placement branch calculated \nstored nplace feature, can mapped line size /color\nusing ggtree (Yu et al., 2017).","code":"\njpf <- system.file(\"extdata/EPA.jplace\",  package=\"treeio\")\njp <- read.jplace(jpf)\nprint(jp)## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/EPA.jplace'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 493 tips and 492 internal nodes.\n## \n## Tip labels:\n##   CIR000447A, CIR000479, CIR000078, CIR000083,\n## CIR000070, CIR000060, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'nplace'."},{"path":"chapter1.html","id":"jtree","chapter":"1 Importing Tree with Data","heading":"1.3.2.11 Parsing jtree format","text":"jtree JSON-based format defined \ntreeio package (Wang et al., 2020) support tree\ndata interchange (see session 3.3).\nPhylogenetic tree associated data can exported single jtree\nfile using write.jtree() function. jtree can easily parsed using \nJSON parser. jtree format contains three keys: tree, data, meta-data.\ntree value contains tree text extended Newick tree format putting\nedge number curly braces branch length. data value contains\nnode/branch-specific data, meta-data value contains additional meta information.","code":"\njtree_file <- tempfile(fileext = '.jtree')\nwrite.jtree(beast, file = jtree_file)\nread.jtree(file = jtree_file)## 'treedata' S4 object that stored information\n## of\n##  '/tmp/Rtmp5zDeZ2/file1eea82133a2fb.jtree'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 15 tips and 14 internal nodes.\n## \n## Tip labels:\n##   K_2013, N_2010, D_1987, L_1980, J_1983, G_1992, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'height', 'height_0.95_HPD', 'height_range',\n## 'length', 'length_0.95_HPD', 'length_median',\n## 'length_range', 'rate', 'rate_0.95_HPD',\n## 'rate_median', 'rate_range', 'height_median',\n## 'posterior'."},{"path":"chapter1.html","id":"as-treedata","chapter":"1 Importing Tree with Data","heading":"1.3.3 Converting other tree-like objects to phylo or treedata objects","text":"extend application scopes treeio, tidytree ggtree, treeio (Wang et al., 2020) provides several .phylo .treedata methods convert tree-like objects, phylo4d pml, phylo treedata object. users can easily map associated data tree structure, export tree /without data single file, manipulate visualize tree /without data. convert functions (Table 1.2) create possibility using tidytree process tree using tidy interface ggtree visualize tree using grammar graphic syntax.\nTABLE 1.2: Conversion tree-like object phylo treedata object\n, used pml object defined phangorn package, example. pml() function computes likelihood phylogenetic tree given sequence alignment model optim.pml() function optimizes different model parameters. output pml object, can converted treedata object using .treedata provided treeio (Wang et al., 2020). amino acid substitution (ancestral sequence estimated pml) stored treedata object can visualized using ggtree demonstrated Figure 1.4.\nFIGURE 1.4: Converting pml object treedata object. allows using tidytree process tree data well using ggtree ggtreeExtra visualize tree associated data.\n","code":"\nlibrary(phangorn)\ntreefile <- system.file(\"extdata\", \"pa.nwk\", package=\"treeio\")\ntre <- read.tree(treefile)\ntipseqfile <- system.file(\"extdata\", \"pa.fas\", package=\"treeio\")\ntipseq <- read.phyDat(tipseqfile,format=\"fasta\")\nfit <- pml(tre, tipseq, k=4)\nfit <- optim.pml(fit, optNni=FALSE, optBf=T, optQ=T,\n                 optInv=T, optGamma=T, optEdge=TRUE,\n                 optRooted=FALSE, model = \"GTR\",\n                 control = pml.control(trace =0))\n\npmltree <- as.treedata(fit)\nggtree(pmltree) + geom_text(aes(x=branch, label=AA_subs, vjust=-.5))"},{"path":"chapter1.html","id":"get-treedata-data","chapter":"1 Importing Tree with Data","heading":"1.3.4 Getting information from treedata object","text":"tree imported, users may want extract information stored\ntreedata object. treeio provides several accessor\nmethods extract tree structure, features/attributes stored object,\ncorresponding values.get.tree() .phylo() methods can convert treedata object \nphylo object fundamental tree object R community \nmany packages work phylo object.get.fields method returns vector features/attributes stored \nobject associated phylogeny.get.data method returns tibble associated data.users interested subset features/attributes returned \nget.fields, can extract information output get.data \ndirectly subset data [ [[.","code":"\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\n# or get.tree\nas.phylo(beast_tree)\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\n# or get.tree\nprint(as.phylo(beast_tree), printlen=3)## \n## Phylogenetic tree with 76 tips and 75 internal nodes.\n## \n## Tip labels:\n##   A/Hokkaido/30-1-a/2013, A/New_York/334/2004, A/New_York/463/2005, ...\n## \n## Rooted; includes branch lengths.\nget.fields(beast_tree)##  [1] \"height\"          \"height_0.95_HPD\"\n##  [3] \"height_median\"   \"height_range\"   \n##  [5] \"length\"          \"length_0.95_HPD\"\n##  [7] \"length_median\"   \"length_range\"   \n##  [9] \"posterior\"       \"rate\"           \n## [11] \"rate_0.95_HPD\"   \"rate_median\"    \n## [13] \"rate_range\"\nget.data(beast_tree)## # A tibble: 151 × 14\n##    height height_0.95_HPD height_median height_range\n##     <dbl> <list>                  <dbl> <list>      \n##  1   19   <dbl [2]>                19   <dbl [2]>   \n##  2   17   <dbl [2]>                17   <dbl [2]>   \n##  3   14   <dbl [2]>                14   <dbl [2]>   \n##  4   12   <dbl [2]>                12   <dbl [2]>   \n##  5    9   <dbl [2]>                 9   <dbl [2]>   \n##  6   10   <dbl [2]>                10   <dbl [2]>   \n##  7   10   <dbl [2]>                10   <dbl [2]>   \n##  8   10.8 <dbl [2]>                10.8 <dbl [2]>   \n##  9    9   <dbl [2]>                 9   <dbl [2]>   \n## 10    9   <dbl [2]>                 9   <dbl [2]>   \n## # … with 141 more rows, and 10 more variables:\n## #   length <dbl>, length_0.95_HPD <list>,\n## #   length_median <dbl>, length_range <list>,\n## #   posterior <dbl>, rate <dbl>, rate_0.95_HPD <list>,\n## #   rate_median <dbl>, rate_range <list>, node <int>\nbeast_tree[, c(\"node\", \"height\")]## # A tibble: 151 × 2\n##     node height\n##    <int>  <dbl>\n##  1    10   19  \n##  2     9   17  \n##  3    36   14  \n##  4    31   12  \n##  5    29    9  \n##  6    28   10  \n##  7    39   10  \n##  8    90   10.8\n##  9    16    9  \n## 10     2    9  \n## # … with 141 more rows\nhead(beast_tree[[\"height_median\"]])## height_median1 height_median2 height_median3 \n##             19             17             14 \n## height_median4 height_median5 height_median6 \n##             12              9             10"},{"path":"chapter1.html","id":"summary1","chapter":"1 Importing Tree with Data","heading":"1.4 Summary","text":"Software tools inferring molecular evolution (e.g., ancestral states, molecular dating selection pressure, etc.) proliferating, single data format used different programs capable store different types phylogenetic data. software packages unique output formats formats compatible . Parsing software outputs challenging, restricts joint analysis using different tools. treeio package (Wang et al., 2020) provides set functions (Table 1.1) parsing various types phylogenetic data files set converters (Table 1.2) convert tree-like objects phylo treedata objects. phylogenetic data can integrated allow exploration comparison. date, software tools field molecular evolution isolated often fully compatible ’s input output files. software tools designed analysis outputs often readable software. tools designed unify inference data different analysis programs. Efficient incorporation data different inference methods can enhance comparison understanding study target, may help discover new systematic patterns generate new hypotheses.phylogenetic trees growing application identify patterns evolutionary context, different disciplines employing phylogenetic trees research. example, spatial ecologists may map geographical positions organisms phylogenetic trees understand biogeography species (Schön et al., 2015); disease epidemiologists may incorporate pathogen sampling time locations phylogenetic analysis infer disease transmission dynamics spatiotemporal space (Y.-Q. et al., 2013); microbiologists may determine pathogenicity different pathogen strains map phylogenetic trees identify genetic determinants pathogenicity (Bosi et al., 2016); genomic scientists may use phylogenetic trees help taxonomically classify metagenomic sequence data (Gupta & Sharma, 2015). robust tool treeio import map different types data phylogenetic tree important facilitate phylogenetics-related research, ‘phylodynamics’. tools also help integrate different meta-data (time, geography, genotype, epidemiological information) analysis results (selective pressure, evolutionary rates) highest level provide comprehensive understanding study organisms. field influenza research, attempts studying phylodynamics influenza virus mapping different meta-data analysis results phylogenetic tree evolutionary timescale (Lam et al., 2015).","code":""},{"path":"chapter2.html","id":"chapter2","chapter":"2 Manipulating Tree with Data","heading":"2 Manipulating Tree with Data","text":"","code":""},{"path":"chapter2.html","id":"tidytree","chapter":"2 Manipulating Tree with Data","heading":"2.1 Manipulating Tree Data Using Tidy Interface","text":"tree data parsed/merged\ntreeio (Wang et al., 2020) can converted tidy\ndata frame using tidytree\npackage. tidytree package\nprovides tidy interfaces manipulate trees associated data. instance,\nexternal data can linked phylogeny evolutionary data obtained \ndifferent sources can merged using tidyverse verbs. tree data \nprocessed, can converted back treedata object exported single tree file, analyzed R visualized using ggtree (Yu et al., 2017) ggtreeExtra (Xu, Dai, et al., 2021).","code":""},{"path":"chapter2.html","id":"the-phylo-object","chapter":"2 Manipulating Tree with Data","heading":"2.1.1 The phylo object","text":"phylo class defined ape package (Paradis et al., 2004) \nfundamental phylogenetic analysis R. R packages\nfield rely\nextensively phylo object. tidytree package provides as_tibble\nmethod convert phylo object tidy data frame, tbl_tree object.tbl_tree object can converted back phylo object using .phylo() method.Using tbl_tree object makes tree data manipulation effective \neasier (see also example FAQ). example, can link evolutionary trait phylogeny using dplyr verbs full_join():","code":"\nlibrary(ape)\nset.seed(2017)\ntree <- rtree(4)\ntree## \n## Phylogenetic tree with 4 tips and 3 internal nodes.\n## \n## Tip labels:\n##   t4, t1, t3, t2\n## \n## Rooted; includes branch lengths.\nx <- as_tibble(tree)\nx## # A tibble: 7 × 4\n##   parent  node branch.length label\n##    <int> <int>         <dbl> <chr>\n## 1      5     1       0.435   t4   \n## 2      7     2       0.674   t1   \n## 3      7     3       0.00202 t3   \n## 4      6     4       0.0251  t2   \n## 5      5     5      NA       <NA> \n## 6      5     6       0.472   <NA> \n## 7      6     7       0.274   <NA>\nas.phylo(x)## \n## Phylogenetic tree with 4 tips and 3 internal nodes.\n## \n## Tip labels:\n##   t4, t1, t3, t2\n## \n## Rooted; includes branch lengths.\nd <- tibble(label = paste0('t', 1:4),\n            trait = rnorm(4))\n\ny <- full_join(x, d, by = 'label')\ny## # A tibble: 7 × 5\n##   parent  node branch.length label  trait\n##    <int> <int>         <dbl> <chr>  <dbl>\n## 1      5     1       0.435   t4     0.943\n## 2      7     2       0.674   t1    -0.171\n## 3      7     3       0.00202 t3     0.570\n## 4      6     4       0.0251  t2    -0.283\n## 5      5     5      NA       <NA>  NA    \n## 6      5     6       0.472   <NA>  NA    \n## 7      6     7       0.274   <NA>  NA"},{"path":"chapter2.html","id":"the-treedata-object","chapter":"2 Manipulating Tree with Data","heading":"2.1.2 The treedata object","text":"tidytree package defines treedata class store phylogenetic tree \nassociated data. mapping external data tree structure, \ntbl_tree object can converted treedata object.treedata class used\ntreeio package (Wang et al., 2020) store evolutionary evidence inferred commonly used software (BEAST, EPA, HyPhy, MrBayes, PAML, PHYLDOG, PPLACER, r8s, RAxML, RevBayes, etc.) (see details Chapter 1).tidytree package also provides as_tibble() method convert treedata object tidy data frame. phylogenetic tree structure evolutionary\ninferences stored tbl_tree object, making consistent easier\nmanipulating evolutionary statistics inferred different software well\nlinking external data tree structure.","code":"\nas.treedata(y)## 'treedata' S4 object'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 4 tips and 3 internal nodes.\n## \n## Tip labels:\n##   t4, t1, t3, t2\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'trait'.\ny %>% as.treedata %>% as_tibble## # A tibble: 7 × 5\n##   parent  node branch.length label  trait\n##    <int> <int>         <dbl> <chr>  <dbl>\n## 1      5     1       0.435   t4     0.943\n## 2      7     2       0.674   t1    -0.171\n## 3      7     3       0.00202 t3     0.570\n## 4      6     4       0.0251  t2    -0.283\n## 5      5     5      NA       <NA>  NA    \n## 6      5     6       0.472   <NA>  NA    \n## 7      6     7       0.274   <NA>  NA"},{"path":"chapter2.html","id":"accesor-tidytree","chapter":"2 Manipulating Tree with Data","heading":"2.1.3 Access related nodes","text":"dplyr verbs can applied tbl_tree directly manipulate tree data. addition, tidytree provides several verbs filter related nodes, including\nchild(), parent(), offspring(), ancestor(), sibling() MRCA().verbs accept tbl_tree object selected node can node number label.methods also implemented treeio working phylo treedata objects. can try accessing related nodes using tree object. instance, following command output child nodes selected internal node 5:Beware methods tree objects output relevant node numbers, methods tbl_tree object output tibble object contains related information.","code":"\nchild(y, 5)## # A tibble: 2 × 5\n##   parent  node branch.length label  trait\n##    <int> <int>         <dbl> <chr>  <dbl>\n## 1      5     1         0.435 t4     0.943\n## 2      5     6         0.472 <NA>  NA\nparent(y, 2)## # A tibble: 1 × 5\n##   parent  node branch.length label trait\n##    <int> <int>         <dbl> <chr> <dbl>\n## 1      6     7         0.274 <NA>     NA\noffspring(y, 5)## # A tibble: 6 × 5\n##   parent  node branch.length label  trait\n##    <int> <int>         <dbl> <chr>  <dbl>\n## 1      5     1       0.435   t4     0.943\n## 2      7     2       0.674   t1    -0.171\n## 3      7     3       0.00202 t3     0.570\n## 4      6     4       0.0251  t2    -0.283\n## 5      5     6       0.472   <NA>  NA    \n## 6      6     7       0.274   <NA>  NA\nancestor(y, 2)## # A tibble: 3 × 5\n##   parent  node branch.length label trait\n##    <int> <int>         <dbl> <chr> <dbl>\n## 1      5     5        NA     <NA>     NA\n## 2      5     6         0.472 <NA>     NA\n## 3      6     7         0.274 <NA>     NA\nsibling(y, 2)## # A tibble: 1 × 5\n##   parent  node branch.length label trait\n##    <int> <int>         <dbl> <chr> <dbl>\n## 1      7     3       0.00202 t3    0.570\nMRCA(y, 2, 3)## # A tibble: 1 × 5\n##   parent  node branch.length label trait\n##    <int> <int>         <dbl> <chr> <dbl>\n## 1      6     7         0.274 <NA>     NA\nchild(tree, 5)## [1] 1 6"},{"path":"chapter2.html","id":"data-integration","chapter":"2 Manipulating Tree with Data","heading":"2.2 Data Integration","text":"","code":""},{"path":"chapter2.html","id":"merge-tree","chapter":"2 Manipulating Tree with Data","heading":"2.2.1 Combining tree data","text":"treeio package (Wang et al., 2020) serves \ninfrastructure enables various types phylogenetic data inferred \ncommon analysis programs imported used R. instance, dN/dS\nancestral sequences estimated CODEML,\nclade support values (posterior) inferred BEAST/MrBayes.\naddition, treeio supports linking external data phylogeny. brings external phylogenetic data (either software output external sources) R\ncommunity makes available analysis R.\nFurthermore, treeio can combine\nmultiple phylogenetic trees one node/branch-specific\nattribute data. Essentially, result, one attribute (e.g.,\nsubstitution rate) can mapped another attribute (e.g., dN/dS) \nnode/branch comparison computations (Yu et al., 2017; Yu et al., 2018).previously published dataset, seventy-six H3 hemagglutinin gene sequences \nlineage containing swine human influenza viruses\n(Liang et al., 2014), used demonstrate utilities comparing\nevolutionary statistics inferred different software. dataset \nre-analyzed BEAST timescale estimation\nCODEML synonymous \nnon-synonymous substitution estimation. example, first parsed \noutputs BEAST using read.beast() function \nCODEML using\nread.codeml() function two treedata objects. two objects containing separate sets node/branch-specific data merged via merge_tree() function.merging beast_tree codeml_tree objects, \nnode/branch-specific data imported BEAST\nCODEML output files \navailable merged_tree object. tree object converted \ntidy data frame using tidytree\npackage visualized hexbin scatterplots dN/dS, dN, dS inferred\nCODEML vs. rate\n(substitution rate unit substitutions/site/year) inferred\nBEAST branches.\nFIGURE 2.1: Correlation dN/dS, dN, dS vs. substitution rate. merging BEAST CodeML outputs, branch-specific estimates (substitution rate, dN/dS , dN, dS) two analysis programs compared branch basis. associations dN/dS, dN, dS vs. rate visualized hexbin scatter plots.\noutput illustrated Figure 2.1. can test association node/branch-specific data using Pearson correlation, case showed dN dS, dN/dS significantly (p-values) associated rate.Using merge_tree() function, able compare analysis results using identical\nmodel different software packages different models using different \nidentical software. also allows users integrate different analysis findings\ndifferent software packages. Merging tree data restricted \nsoftware findings, associating external data analysis findings also\ngranted. merge_tree() function chainable allows several tree objects\nmerged one.triple_tree object shown contains analysis results obtained BEAST\nCODEML, evolutionary\ntraits external sources. pieces information can used annotate \ntree using ggtree (Yu et al., 2017) ggtreeExtra (Xu, Dai, et al., 2021).","code":"\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nrst_file <- system.file(\"examples/rst\", package=\"ggtree\")\nmlc_file <- system.file(\"examples/mlc\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\ncodeml_tree <- read.codeml(rst_file, mlc_file)\n\nmerged_tree <- merge_tree(beast_tree, codeml_tree)\nmerged_tree## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/ggtree/examples/MCC_FluA_H3.tree',\n##  '/home/ygc/R/library/ggtree/examples/rst',\n##  '/home/ygc/R/library/ggtree/examples/mlc'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 76 tips and 75 internal nodes.\n## \n## Tip labels:\n##   A/Hokkaido/30-1-a/2013, A/New_York/334/2004,\n## A/New_York/463/2005, A/New_York/452/1999,\n## A/New_York/238/2005, A/New_York/523/1998, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'height', 'height_0.95_HPD', 'height_median',\n## 'height_range', 'length', 'length_0.95_HPD',\n## 'length_median', 'length_range', 'posterior', 'rate',\n## 'rate_0.95_HPD', 'rate_median', 'rate_range', 'subs',\n## 'AA_subs', 't', 'N', 'S', 'dN_vs_dS', 'dN', 'dS',\n## 'N_x_dN', 'S_x_dS'.\nlibrary(dplyr)\ndf <- merged_tree %>% \n  as_tibble() %>%\n  select(dN_vs_dS, dN, dS, rate) %>%\n  subset(dN_vs_dS >=0 & dN_vs_dS <= 1.5) %>%\n  tidyr::gather(type, value, dN_vs_dS:dS)\ndf$type[df$type == 'dN_vs_dS'] <- 'dN/dS'\ndf$type <- factor(df$type, levels=c(\"dN/dS\", \"dN\", \"dS\"))\nggplot(df, aes(rate, value)) + geom_hex() + \n  facet_wrap(~type, scale='free_y') \nphylo <- as.phylo(beast_tree)\nN <- Nnode2(phylo)\nd <- tibble(node = 1:N, fake_trait = rnorm(N), another_trait = runif(N))\nfake_tree <- treedata(phylo = phylo, data = d)\ntriple_tree <- merge_tree(merged_tree, fake_tree)\ntriple_tree## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/ggtree/examples/MCC_FluA_H3.tree',\n##  '/home/ygc/R/library/ggtree/examples/rst',\n##  '/home/ygc/R/library/ggtree/examples/mlc'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 76 tips and 75 internal nodes.\n## \n## Tip labels:\n##   A/Hokkaido/30-1-a/2013, A/New_York/334/2004,\n## A/New_York/463/2005, A/New_York/452/1999,\n## A/New_York/238/2005, A/New_York/523/1998, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'height', 'height_0.95_HPD', 'height_median',\n## 'height_range', 'length', 'length_0.95_HPD',\n## 'length_median', 'length_range', 'posterior', 'rate',\n## 'rate_0.95_HPD', 'rate_median', 'rate_range', 'subs',\n## 'AA_subs', 't', 'N', 'S', 'dN_vs_dS', 'dN', 'dS',\n## 'N_x_dN', 'S_x_dS', 'fake_trait', 'another_trait'."},{"path":"chapter2.html","id":"link-external-data","chapter":"2 Manipulating Tree with Data","heading":"2.2.2 Linking external data to phylogeny","text":"addition analysis findings associated tree demonstrated\n, wide range heterogeneous data, including phenotypic data,\nexperimental data, clinical data, etc., need integrated \nlinked phylogeny. example, study viral evolution, tree nodes may \nassociated epidemiological information, location, age, subtype.\nFunctional annotations may need mapped onto gene trees comparative\ngenomics studies. facilitate data\nintegration, treeio provides\nfull_join() methods link external data phylogeny store either phylo treedata object. Beware linking external data phylo object produce treedata object store input phylo associated data. full_join methods can also used tidy data frame level (.e., tbl_tree object described previously) ggtree level (described Chapter 7) (Yu et al., 2018).following example calculated bootstrap values merged values tree (phylo object) matching node numbers.Another example demonstrates merging evolutionary traits tree (treedata object) matching tip labels.Manipulating tree objects frustrated fragmented functions available\nworking phylo objects, mention linking external data \nphylogeny structure. treeio package (Wang et al., 2020), easy combine tree data various sources.\naddition, tidytree package, manipulating trees easier using tidy data principles \nconsistent tools already wide use, including\ndplyr,\ntidyr,\nggplot2,\nggtree (Yu et al., 2017).","code":"\nlibrary(ape)\ndata(woodmouse)\nd <- dist.dna(woodmouse)\ntr <- nj(d)\nbp <- boot.phylo(tr, woodmouse, function(x) nj(dist.dna(x)))## \nRunning bootstraps:       100 / 100\n## Calculating bootstrap values... done.\nbp2 <- tibble(node=1:Nnode(tr) + Ntip(tr), bootstrap = bp)\nfull_join(tr, bp2, by=\"node\")## 'treedata' S4 object'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 15 tips and 13 internal nodes.\n## \n## Tip labels:\n##   No305, No304, No306, No0906S, No0908S, No0909S, ...\n## \n## Unrooted; includes branch lengths.\n## \n## with the following features available:\n##   'bootstrap'.\n## \n## # The associated data tibble abstraction: 28 × 4\n## # The 'node', 'label' and 'isTip' are from the phylo tree.\n##     node label   isTip bootstrap\n##    <int> <chr>   <lgl>     <int>\n##  1     1 No305   TRUE         NA\n##  2     2 No304   TRUE         NA\n##  3     3 No306   TRUE         NA\n##  4     4 No0906S TRUE         NA\n##  5     5 No0908S TRUE         NA\n##  6     6 No0909S TRUE         NA\n##  7     7 No0910S TRUE         NA\n##  8     8 No0912S TRUE         NA\n##  9     9 No0913S TRUE         NA\n## 10    10 No1103S TRUE         NA\n## # … with 18 more rows\nfile <- system.file(\"extdata/BEAST\", \"beast_mcc.tree\", package=\"treeio\")\nbeast <- read.beast(file)\nx <- tibble(label = as.phylo(beast)$tip.label, trait = rnorm(Ntip(beast)))\nfull_join(beast, x, by=\"label\")## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/BEAST/beast_mcc.tree'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 15 tips and 14 internal nodes.\n## \n## Tip labels:\n##   A_1995, B_1996, C_1995, D_1987, E_1996, F_1997, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'height', 'height_0.95_HPD', 'height_median',\n## 'height_range', 'length', 'length_0.95_HPD',\n## 'length_median', 'length_range', 'posterior', 'rate',\n## 'rate_0.95_HPD', 'rate_median', 'rate_range', 'trait'."},{"path":"chapter2.html","id":"grouping-taxa","chapter":"2 Manipulating Tree with Data","heading":"2.2.3 Grouping taxa","text":"groupOTU() groupClade() methods designed adding taxa grouping\ninformation input tree object. methods implemented tidytree,\ntreeio, ggtree respectively support adding grouping information \ntbl_tree, phylo treedata, ggtree objects. grouping information can \nused directly tree visualization (e.g., coloring tree based grouping information)\nggtree (Figure 6.5).","code":""},{"path":"chapter2.html","id":"groupclade","chapter":"2 Manipulating Tree with Data","heading":"2.2.3.1 groupClade","text":"groupClade() method accepts internal node vector internal nodes\nadd grouping information selected clade/clades.","code":"\nnwk <- '(((((((A:4,B:4):6,C:5):8,D:6):3,E:21):10,((F:4,G:12):14,H:8):13):\n        13,((I:5,J:2):30,(K:11,L:11):2):17):4,M:56);'\ntree <- read.tree(text=nwk)\n\ngroupClade(as_tibble(tree), c(17, 21))## # A tibble: 25 × 5\n##    parent  node branch.length label group\n##     <int> <int>         <dbl> <chr> <fct>\n##  1     20     1             4 A     1    \n##  2     20     2             4 B     1    \n##  3     19     3             5 C     1    \n##  4     18     4             6 D     1    \n##  5     17     5            21 E     1    \n##  6     22     6             4 F     2    \n##  7     22     7            12 G     2    \n##  8     21     8             8 H     2    \n##  9     24     9             5 I     0    \n## 10     24    10             2 J     0    \n## # … with 15 more rows"},{"path":"chapter2.html","id":"groupotu","chapter":"2 Manipulating Tree with Data","heading":"2.2.3.2 groupOTU","text":"groupClade() groupOTU() work tbl_tree, phylo treedata, ggtree objects. example using groupOTU() phylo tree object.Another example working ggtree object can found session 6.4.groupOTU trace back input nodes recent common ancestor.\nexample, nodes 1, 4, 5 6 \ngrouping together (4 (t2) -> 6 -> 5 1 (t4) -> 5).Related operational taxonomic units (OTUs) grouping necessarily within clade.\ncan monophyletic (clade), polyphyletic paraphyletic.conflicts tracing back recent common ancestor, users can set overlap\nparameter “origin” (first one counts), “overwrite” (default, last one\ncounts), “abandon” (un-selected grouping)8.","code":"\nset.seed(2017)\ntr <- rtree(4)\nx <- as_tibble(tr)\n## the input nodes can be node ID or label\ngroupOTU(x, c('t1', 't4'), group_name = \"fake_group\")## # A tibble: 7 × 5\n##   parent  node branch.length label fake_group\n##    <int> <int>         <dbl> <chr> <fct>     \n## 1      5     1       0.435   t4    1         \n## 2      7     2       0.674   t1    1         \n## 3      7     3       0.00202 t3    0         \n## 4      6     4       0.0251  t2    0         \n## 5      5     5      NA       <NA>  1         \n## 6      5     6       0.472   <NA>  1         \n## 7      6     7       0.274   <NA>  1\ngroupOTU(tr, c('t2', 't4'), group_name = \"fake_group\") %>%\n  as_tibble## # A tibble: 7 × 5\n##   parent  node branch.length label fake_group\n##    <int> <int>         <dbl> <chr> <fct>     \n## 1      5     1       0.435   t4    1         \n## 2      7     2       0.674   t1    0         \n## 3      7     3       0.00202 t3    0         \n## 4      6     4       0.0251  t2    1         \n## 5      5     5      NA       <NA>  1         \n## 6      5     6       0.472   <NA>  1         \n## 7      6     7       0.274   <NA>  0\ncls <- list(c1=c(\"A\", \"B\", \"C\", \"D\", \"E\"),\n            c2=c(\"F\", \"G\", \"H\"),\n            c3=c(\"L\", \"K\", \"I\", \"J\"),\n            c4=\"M\")\n\nas_tibble(tree) %>% groupOTU(cls)## # A tibble: 25 × 5\n##    parent  node branch.length label group\n##     <int> <int>         <dbl> <chr> <fct>\n##  1     20     1             4 A     c1   \n##  2     20     2             4 B     c1   \n##  3     19     3             5 C     c1   \n##  4     18     4             6 D     c1   \n##  5     17     5            21 E     c1   \n##  6     22     6             4 F     c2   \n##  7     22     7            12 G     c2   \n##  8     21     8             8 H     c2   \n##  9     24     9             5 I     c3   \n## 10     24    10             2 J     c3   \n## # … with 15 more rows"},{"path":"chapter2.html","id":"reroot-treeio","chapter":"2 Manipulating Tree with Data","heading":"2.3 Rerooting tree","text":"phylogenetic tree can rerooted specified outgroup. ape package implements root() method reroot tree stored phylo object, treeio package provides root() method treedata object. method designed re-root phylogenetic tree associated data concerning specified outgroup specified node based root() implemented ape package.first linked external data tree using left_join() stored information treedata object, trda.can reroot tree associated data mapping branches nodes correctly demonstrated Figure 2.2. figure visualized using ggtree (see also Chapters 4 5).\nFIGURE 2.2: Reroot phylogenetic tree associated data. Original tree () re-rooted tree (B) associated data mapped branches nodes tree correctly. () (B) present rooting branch leading tip node ‘Suricata_suricatta’, respectively.\noutgroup parameter represents specific new outgroup, can node label (character) node number. “single one” value, meaning using node tip new root, multiple values, meaning recent common values used new root. Note , node labels treated edge labels, edgelabel set TRUE return correct relationship node associated data. details re-root, including precautions pitfalls, please refer review article (Czech et al., 2017).","code":"\nlibrary(ggtree)\nlibrary(treeio)\nlibrary(tidytree)\nlibrary(TDbook)\n\n# load `tree_boots`, `df_tip_data`, and `df_inode_data` from 'TDbook'\n\ntrda <- tree_boots %>% \n        left_join(df_tip_data, by=c(\"label\" = \"Newick_label\")) %>% \n        left_join(df_inode_data, by=c(\"label\" = \"newick_label\"))\ntrda## 'treedata' S4 object'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 7 tips and 6 internal nodes.\n## \n## Tip labels:\n##   Rangifer_tarandus, Cervus_elaphus, Bos_taurus,\n## Ovis_orientalis, Suricata_suricatta,\n## Cystophora_cristata, ...\n## Node labels:\n##   Mammalia, Artiodactyla, Cervidae, Bovidae,\n## Carnivora, Caniformia\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   '', 'vernacularName', 'imageURL', 'imageLicense',\n## 'imageAuthor', 'infoURL', 'mass_in_kg',\n## 'trophic_habit', 'ncbi_taxid', 'rank',\n## 'vernacularName.y', 'infoURL.y', 'rank.y',\n## 'bootstrap', 'posterior'.\n## \n## # The associated data tibble abstraction: 13 × 17\n## # The 'node', 'label' and 'isTip' are from the phylo tree.\n##     node label            isTip vernacularName imageURL\n##    <int> <chr>            <lgl> <chr>          <chr>   \n##  1     1 Rangifer_tarand… TRUE  Reindeer       http://…\n##  2     2 Cervus_elaphus   TRUE  Red deer       http://…\n##  3     3 Bos_taurus       TRUE  Cattle         https:/…\n##  4     4 Ovis_orientalis  TRUE  Asiatic moufl… http://…\n##  5     5 Suricata_surica… TRUE  Meerkat        http://…\n##  6     6 Cystophora_cris… TRUE  Hooded seal    http://…\n##  7     7 Mephitis_mephit… TRUE  Striped skunk  http://…\n##  8     8 Mammalia         FALSE <NA>           <NA>    \n##  9     9 Artiodactyla     FALSE <NA>           <NA>    \n## 10    10 Cervidae         FALSE <NA>           <NA>    \n## # … with 3 more rows, and 12 more variables:\n## #   imageLicense <chr>, imageAuthor <chr>,\n## #   infoURL <chr>, mass_in_kg <dbl>,\n## #   trophic_habit <chr>, ncbi_taxid <int>, rank <chr>,\n## #   vernacularName.y <chr>, infoURL.y <chr>,\n## #   rank.y <chr>, bootstrap <int>, posterior <dbl>\n# reroot\ntrda2 <- root(trda, outgroup = \"Suricata_suricatta\", edgelabel = TRUE)\n# The original tree\np1 <- trda %>%\n      ggtree() +\n      geom_nodelab(\n        mapping = aes(\n          x = branch,\n          label = bootstrap\n        ),\n        nudge_y = 0.36\n      ) +\n      xlim(-.1, 4.5) +\n      geom_tippoint(\n        mapping = aes(\n          shape = trophic_habit, \n          color = trophic_habit, \n          size = mass_in_kg\n        )\n      ) +\n      scale_size_continuous(range = c(3, 10)) +\n      geom_tiplab(\n        offset = .14, \n      ) +\n      geom_nodelab(\n        mapping = aes(\n          label = vernacularName.y, \n          fill = posterior\n        ),\n        geom = \"label\"\n      ) + \n      scale_fill_gradientn(colors = RColorBrewer::brewer.pal(3, \"YlGnBu\")) +\n      theme(legend.position = \"right\")  \n\n# after reroot\np2 <- trda2 %>%\n      ggtree() +\n      geom_nodelab(\n        mapping = aes(\n          x = branch,\n          label = bootstrap\n        ),\n        nudge_y = 0.36\n      ) +\n      xlim(-.1, 5.5) +\n      geom_tippoint(\n        mapping = aes(\n          shape = trophic_habit,\n          color = trophic_habit,\n          size = mass_in_kg\n        )\n      ) +\n      scale_size_continuous(range = c(3, 10)) +\n      geom_tiplab(\n        offset = .14,\n      ) +\n      geom_nodelab(\n        mapping = aes(\n          label = vernacularName.y,\n          fill = posterior\n        ),\n        geom = \"label\"\n      ) +\n      scale_fill_gradientn(colors = RColorBrewer::brewer.pal(3, \"YlGnBu\")) +\n      theme(legend.position = \"right\")\n\nplot_list(p1, p2, tag_levels='A', ncol=2)"},{"path":"chapter2.html","id":"rescale-treeio","chapter":"2 Manipulating Tree with Data","heading":"2.4 Rescaling Tree Branches","text":"Phylogenetic data can merged joint analysis (Figure 2.1). can displayed tree structure complex annotation help visually inspection evolutionary patterns. numerical data stored treedata object can used re-scale tree branches. example, CodeML infers dN/dS, dN, dS, statistics can used branch lengths (Figure 2.3). values can also used color tree (session 4.3.4) can projected vertical dimension create two-dimensional tree phenogram (session 4.2.2 Figures 4.5 4.11).\nFIGURE 2.3: Rescaling tree branches. tree branches scaled time (year root) (). tree rescaled using dN branch lengths (B). tree rescaled using substitution rates (C).\nModifying branch lengths tree object addtion using rescale_tree() function, users can directly specify variable branch length ggtree() demonstrated session 4.3.6.","code":"\np1 <- ggtree(merged_tree) + theme_tree2()\np2 <- ggtree(rescale_tree(merged_tree, 'dN')) + theme_tree2()\np3 <- ggtree(rescale_tree(merged_tree, 'rate')) + theme_tree2()\n\nplot_list(p1, p2, p3, ncol=3, tag_levels='A')"},{"path":"chapter2.html","id":"subsetting-tree-with-data","chapter":"2 Manipulating Tree with Data","heading":"2.5 Subsetting Tree with Data","text":"","code":""},{"path":"chapter2.html","id":"remove-tip","chapter":"2 Manipulating Tree with Data","heading":"2.5.1 Removing tips in a phylogenetic tree","text":"Sometimes want remove selected tips phylogenetic tree. due several reasons, including low sequence quality, errors sequence assembly, alignment error part sequence, error phylogenetic inference, etc.Let’s say want remove three tips (colored red) tree (Figure 2.4A), drop.tip() method removes specified tips updates tree (Figure 2.4B). associated data maintained updated tree.\nFIGURE 2.4: Removing tips tree. Original tree three tips (colored red) remove (). updated tree removed selected tips (B).\n","code":"\nf <- system.file(\"extdata/NHX\", \"phyldog.nhx\", package=\"treeio\")\nnhx <- read.nhx(f)\nto_drop <- c(\"Physonect_sp_@2066767\",\n            \"Lychnagalma_utricularia@2253871\",\n            \"Kephyes_ovata@2606431\")\np1 <- ggtree(nhx) + geom_tiplab(aes(color = label %in% to_drop)) +\n  scale_color_manual(values=c(\"black\", \"red\")) + xlim(0, 0.8)\n\nnhx_reduced <- drop.tip(nhx, to_drop)\np2 <- ggtree(nhx_reduced) + geom_tiplab() + xlim(0, 0.8)  \nplot_list(p1, p2, ncol=2, tag_levels = \"A\")"},{"path":"chapter2.html","id":"subset-tip","chapter":"2 Manipulating Tree with Data","heading":"2.5.2 Subsetting tree by tip label","text":"Sometimes tree can large difficult look portions interest. tree_subset() function created treeio package (Wang et al., 2020) extract subset tree portion still maintaining structure tree portion. beast_tree Figure 2.5A slightly crowded. Obviously, can make figure taller allow space labels (similar using “Expansion” slider FigTree) can make text smaller. However, solutions always applicable lot tips (e.g., hundreds thousands tips). particular, interested portion tree around particular tip, certainly don’t want explore large tree find certain species interested .Let’s say interested tip /Swine/HK/168/2012 tree (Figure 2.5A) want look immediate relatives tip.tree_subset() function allows look portions tree interest. default, tree_subset() function internally call groupOTU() assign group specified tip rest tips (Figure 2.5B). Additionally, branch lengths related associated data maintained subsetting (Figure 2.5C). root tree always anchored zero subset tree default distances relative root. want distances relative original root, can specify root position (root.position parameter) root edge subset tree, sum branch lengths original root root subset tree (Figures 2.5D E).\nFIGURE 2.5: Subsetting tree specific tip. Original tree (). Subset tree (B). Subset tree data (C). Visualize subset tree relative original position, without rootedge (D) rootedge (E).\n","code":"\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\n\np1 = ggtree(beast_tree) + \n  geom_tiplab(offset=.05) +  xlim(0, 40) + theme_tree2()\n\ntree2 = tree_subset(beast_tree, \"A/Swine/HK/168/2012\", levels_back=4)  \np2 <- ggtree(tree2, aes(color=group)) +\n  scale_color_manual(values = c(\"black\", \"red\"), guide = 'none') +\n  geom_tiplab(offset=.2) +  xlim(0, 4.5) + theme_tree2() \n\np3 <- p2 +   \n  geom_point(aes(fill = rate), shape = 21, size = 4) +\n  scale_fill_continuous(low = 'blue', high = 'red') +\n  xlim(0,5) + theme(legend.position = 'right')\n\np4 <- ggtree(tree2, aes(color=group), \n          root.position = as.phylo(tree2)$root.edge) +\n  geom_tiplab() + xlim(18, 24) + \n  scale_color_manual(values = c(\"black\", \"red\"), guide = 'none') +\n  theme_tree2()\n\np5 <- p4 + \n  geom_rootedge() + xlim(0, 50) \n\nplot_list(p1, p2, p3, p4, p5, \n        design=\"AABBCC\\nAADDEE\", tag_levels='A')"},{"path":"chapter2.html","id":"subset-node","chapter":"2 Manipulating Tree with Data","heading":"2.5.3 Subsetting tree by internal node number","text":"interested certain clade, can specify input node internal node number. tree_subset() function take clade whole also trace back particular levels look immediate relatives clade (Figures 2.6A B). can use tree_subset() function zoom selected portions plot whole tree portion , similar ape::zoom() function explore large tree (Figures 2.6C D). Users can also use viewClade() function restrict tree visualization specific clade demonstrated session 6.1.\nFIGURE 2.6: Subsetting tree specific clade. Extracting clade (). Extracting clade tracing back look immediate relatives (B). Viewing large tree (C) selected portion (D).\n","code":"\nclade <- tree_subset(beast_tree, node=121, levels_back=0)\nclade2 <- tree_subset(beast_tree, node=121, levels_back=2)\np1 <- ggtree(clade) + geom_tiplab() + xlim(0, 5)\np2 <- ggtree(clade2, aes(color=group)) + geom_tiplab() + \n  xlim(0, 9) + scale_color_manual(values=c(\"black\", \"red\"))\n\n\nlibrary(ape)\nlibrary(tidytree)\nlibrary(treeio)\n\ndata(chiroptera)\n\nnodes <- grep(\"Plecotus\", chiroptera$tip.label)\nchiroptera <- groupOTU(chiroptera, nodes)\n\nclade <- MRCA(chiroptera, nodes)\nx <- tree_subset(chiroptera, clade, levels_back = 0)\n\np3 <- ggtree(chiroptera, aes(colour = group)) + \n  scale_color_manual(values=c(\"black\", \"red\")) +\n  theme(legend.position = \"none\")\np4 <- ggtree(x) + geom_tiplab() + xlim(0, 6)\nplot_list(p1, p2, p3, p4, \n  ncol=2, tag_levels = 'A')"},{"path":"chapter2.html","id":"ggtree-fortify","chapter":"2 Manipulating Tree with Data","heading":"2.6 Manipulating Tree Data for Visualization","text":"Tree visualization supported ggtree (Yu et al., 2017). Although ggtree implemented several methods visual exploration trees data, may want something supported directly. case, need manipulate tree data node coordination positions used visualization. quite easy ggtree. Users can use fortify() method internally calls tidytree::as_tibble() convert tree tidy data frame add columns coordination positions (.e., x, y, branch, angle) used plot tree. can also access data via ggtree(tree)$data.example plot two trees face--face similar graph produced ape::cophyloplot() function (Figure 2.7).\nFIGURE 2.7: Plot two phylogenetic trees face--face. Plotting tree using ggtree() (left-hand side) subsequently adding another layer tree geom_tree() (right-hand side). relative positions plotted trees can manually adjusted adding layers trees (e.g., tip labels highlighting clades) independent.\nquite easy plot multiple trees connect taxa one figure; instance, plotting trees constructed internal gene segments influenza virus connecting equivalent strains across trees (Venkatesh et al., 2018). Figure 2.8 demonstrates usage plotting multiple trees combining multiple layers geom_tree().\nFIGURE 2.8: Plot multiple phylogenetic trees side--side. Plotting tree using ggtree() subsequently adding multiple layers trees geom_tree().\n","code":"\nlibrary(dplyr)\nlibrary(ggtree)\n\nset.seed(1024)\nx <- rtree(30)\ny <- rtree(30)\np1 <- ggtree(x, layout='roundrect') + \n  geom_hilight(\n         mapping=aes(subset = node %in% c(38, 48, 58, 36),\n                     node = node,\n                     fill = as.factor(node)\n                     )\n     ) +\n    labs(fill = \"clades for tree in left\" )\n\np2 <- ggtree(y)\n\nd1 <- p1$data\nd2 <- p2$data\n\n## reverse x-axis and \n## set offset to make the tree on the right-hand side of the first tree\nd2$x <- max(d2$x) - d2$x + max(d1$x) + 1\n\npp <- p1 + geom_tree(data=d2, layout='ellipse') +      \n  ggnewscale::new_scale_fill() +\n  geom_hilight(\n         data = d2, \n         mapping = aes( \n            subset = node %in% c(38, 48, 58),\n            node=node,\n            fill=as.factor(node))\n  ) +\n  labs(fill = \"clades for tree in right\" ) \n\ndd <- bind_rows(d1, d2) %>% \n  filter(!is.na(label))\n\npp + geom_line(aes(x, y, group=label), data=dd, color='grey') +\n    geom_tiplab(geom = 'shadowtext', bg.colour = alpha('firebrick', .5)) +\n    geom_tiplab(data = d2, hjust=1, geom = 'shadowtext', \n                bg.colour = alpha('firebrick', .5))\nz <- rtree(30)\nd2 <- fortify(y)\nd3 <- fortify(z)\nd2$x <- d2$x + max(d1$x) + 1\nd3$x <- d3$x + max(d2$x) + 1\n\ndd = bind_rows(d1, d2, d3) %>% \n  filter(!is.na(label))\n\np1 + geom_tree(data = d2) + geom_tree(data = d3) + geom_tiplab(data=d3) + \n  geom_line(aes(x, y, group=label, color=node < 15), data=dd, alpha=.3)"},{"path":"chapter2.html","id":"summary2","chapter":"2 Manipulating Tree with Data","heading":"2.7 Summary","text":"treeio package allows us import diverse phylogeny associated data R. However, phylogenetic tree stored way facilitate computational processing human friendly needs expertise manipulate explore tree data. tidytree package provides tidy interface exploring tree data, ggtree provides set utilities visualize explore tree data using grammar graphics. full suite packages makes easy ordinary users interact tree data allows us integrate phylogeny associated data different sources (e.g., experimental results analysis findings), creates possibilities integrative comparative study. Moreover, package suite brings phylogenetic analysis tidyverse certainly takes us next level processing phylogenetic data.","code":""},{"path":"chapter3.html","id":"chapter3","chapter":"3 Exporting tree with data","heading":"3 Exporting tree with data","text":"","code":""},{"path":"chapter3.html","id":"introduction","chapter":"3 Exporting tree with data","heading":"3.1 Introduction","text":"treeio package (Wang et al., 2020) supports parsing various phylogenetic tree file formats including software outputs contain evolutionary evidence. formats just log files\n(e.g., PAML\nr8s output), others \nnon-standard formats (e.g., BEAST\nMrBayes output introduce square\nbracket, reserved store comments standard Nexus format, store\ninferences). treeio, \nnow able parse files extract phylogenetic trees map associated\ndata tree structure. Exporting tree structure easy, users can use\n.phyo() method defined treeio \nconvert treedata object phylo object use write.tree() \nwrite.nexus() implemented\nape package\n(Paradis et al., 2004) export tree structure Newick text Nexus file.\nquite useful converting non-standard formats standard format \nextracting trees software outputs, log files.However, exporting tree associated data still challenging. \nassociated data can parsed analysis programs obtained external\nsources (e.g., phenotypic data, experimental data, clinical data). major\nobstacle standard format designed storing \ntree data. NeXML (Vos et al., 2012) may \nflexible format. However, currently widely supported. \nanalysis programs field rely extensively Newick string Nexus\nformat. opinion, although BEAST Nexus\nformat may best solution,\ncurrently good approach storing heterogeneous associated data. \nbeauty format annotated elements stored within square\nbrackets, reserved comments. way, existing programs can read standard Nexus format able parse ignoring annotated elements.","code":""},{"path":"chapter3.html","id":"exporting-tree-data-to-beast-nexus-format","chapter":"3 Exporting tree with data","heading":"3.2 Exporting Tree Data to BEAST Nexus Format","text":"","code":""},{"path":"chapter3.html","id":"exportingconverting-software-output","chapter":"3 Exporting tree with data","heading":"3.2.1 Exporting/converting software output","text":"treeio package (Wang et al., 2020) provides write.beast() function export treedata object BEAST Nexus file (Bouckaert et al., 2014).\ntreeio, easy convert\nsoftware output BEAST format output can parsed\ntreeio (see Chapter 1).example converting NHX file BEAST format:Another example converting CODEML output BEAST format:software tools support outputs can supported data conversion. example, can convert NHX file BEAST file use NHX tags color tree using\nFigTree (Figure 3.1A) convert CODEML output use\ndN/dS, dN, dS color tree FigTree (Figure 3.1B). conversion, files opened Figtree. Treeio’s conversion function makes data available software tools expands application range tools.\nFIGURE 3.1: Visualizing BEAST file FigTree. Directly visualizing NHX file () CodeML output (B) FigTree supported. treeio can convert files BEAST compatible NEXUS format can directly opened FigTree visualized together annotated data.\n","code":"\nnhxfile <- system.file(\"extdata/NHX\", \"phyldog.nhx\", package=\"treeio\")\nnhx <- read.nhx(nhxfile)\n# write.beast(nhx, file = \"phyldog.tree\")\nwrite.beast(nhx)#NEXUS\n[R-package treeio, Thu Oct 14 11:24:19 2021]\n\nBEGIN TAXA;\n    DIMENSIONS NTAX = 16;\n    TAXLABELS\n        Prayidae_D27SS7@2825365\n        Kephyes_ovata@2606431\n        Chuniphyes_multidentata@1277217\n        Apolemia_sp_@1353964\n        Bargmannia_amoena@263997\n        Bargmannia_elongata@946788\n        Physonect_sp_@2066767\n        Stephalia_dilata@2960089\n        Frillagalma_vityazi@1155031\n        Resomia_ornicephala@3111757\n        Lychnagalma_utricularia@2253871\n        Nanomia_bijuga@717864\n        Cordagalma_sp_@1525873\n        Rhizophysa_filiformis@3073669\n        Hydra_magnipapillata@52244\n        Ectopleura_larynx@3556167\n    ;\nEND;\nBEGIN TREES;\n    TRANSLATE\n        1   Prayidae_D27SS7@2825365,\n        2   Kephyes_ovata@2606431,\n        3   Chuniphyes_multidentata@1277217,\n        4   Apolemia_sp_@1353964,\n        5   Bargmannia_amoena@263997,\n        6   Bargmannia_elongata@946788,\n        7   Physonect_sp_@2066767,\n        8   Stephalia_dilata@2960089,\n        9   Frillagalma_vityazi@1155031,\n        10  Resomia_ornicephala@3111757,\n        11  Lychnagalma_utricularia@2253871,\n        12  Nanomia_bijuga@717864,\n        13  Cordagalma_sp_@1525873,\n        14  Rhizophysa_filiformis@3073669,\n        15  Hydra_magnipapillata@52244,\n        16  Ectopleura_larynx@3556167\n    ;\n    TREE * UNTITLED = [&R] (((1[&Ev=S,ND=0,S=58]:0.0682841,(2[&Ev=S,ND=1,\nS=69]:0.0193941,3[&Ev=S,ND=2,S=70]:0.0121378)[&Ev=S,ND=3,S=60]:0.0217782)\n[&Ev=S,ND=4,S=36]:0.0607598,((4[&Ev=S,ND=9,S=31]:0.11832,(((5[&Ev=S,ND=10,\nS=37]:0.0144549,6[&Ev=S,ND=11,S=38]:0.0149723)[&Ev=S,ND=12,S=33]:0.0925388,\n7[&Ev=S,ND=13,S=61]:0.077429)[&Ev=S,ND=14,S=24]:0.0274637,(8[&Ev=S,ND=15,\nS=52]:0.0761163,((9[&Ev=S,ND=16,S=53]:0.0906068,10[&Ev=S,ND=17,S=54]:1e-06)\n[&Ev=S,ND=18,S=45]:1e-06,((11[&Ev=S,ND=19,S=65]:0.120851,12[&Ev=S,ND=20,\nS=71]:0.133939)[&Ev=S,ND=21,S=56]:1e-06,13[&Ev=S,ND=22,S=64]:0.0693814)\n[&Ev=S,ND=23,S=46]:1e-06)[&Ev=S,ND=24,S=40]:0.0333823)[&Ev=S,ND=25,S=35]:\n1e-06)[&Ev=D,ND=26,S=24]:0.0431861)[&Ev=S,ND=27,S=19]:1e-06,14[&Ev=S,ND=28,\nS=26]:0.22283)[&Ev=S,ND=29,S=17]:0.0292362)[&Ev=D,ND=8,S=17]:0.185603,\n(15[&Ev=S,ND=5,S=16]:0.0621782,16[&Ev=S,ND=6,S=15]:0.332505)[&Ev=S,ND=7,\nS=12]:0.185603)[&Ev=S,ND=30,S=9];\nEND;\nmlcfile <- system.file(\"extdata/PAML_Codeml\", \"mlc\", package=\"treeio\")\nml <- read.codeml_mlc(mlcfile)\n# write.beast(ml, file = \"codeml.tree\")\nwrite.beast(ml) # output not shown"},{"path":"chapter3.html","id":"combining-tree-with-external-data","chapter":"3 Exporting tree with data","heading":"3.2.2 Combining tree with external data","text":"Using utilities provided\ntidytree treeio, easy link\nexternal data onto corresponding phylogeny. write.beast() function enables users export tree external data single tree file.merging, fake_trait another_trait stored fake_data linked tree, phylo, stored treedata object, fake_tree. write.beast() function exports tree associated data single BEAST format file. associated data can used visualize tree using ggtree (Figure 5.8) FigTree (Figure 3.1).","code":"\nphylo <- as.phylo(nhx)\n## save space for printing the tree text\nphylo$edge.length <- round(phylo$edge.length, 2)\n\n## print the newick text\nwrite.tree(phylo)(((Prayidae_D27SS7@2825365:0.07,(Kephyes_ovata@2606431:0.02,\nChuniphyes_multidentata@1277217:0.01):0.02):0.06,((Apolemia_sp_@1353964:0.12,\n(((Bargmannia_amoena@263997:0.01,Bargmannia_elongata@946788:0.01):0.09,\nPhysonect_sp_@2066767:0.08):0.03,(Stephalia_dilata@2960089:0.08,\n((Frillagalma_vityazi@1155031:0.09,Resomia_ornicephala@3111757:0):0,\n((Lychnagalma_utricularia@2253871:0.12,Nanomia_bijuga@717864:0.13):0,\nCordagalma_sp_@1525873:0.07):0):0.03):0):0.04):0,Rhizophysa_filiformis@3073669:\n0.22):0.03):0.19,(Hydra_magnipapillata@52244:0.06,\nEctopleura_larynx@3556167:0.33):0.19);\nN <- Nnode2(phylo)\nfake_data <- tibble(node = 1:N, fake_trait = round(rnorm(N), 2), \n                    another_trait = round(runif(N), 2))\nfake_tree <- full_join(phylo, fake_data, by = \"node\")\n# write.beast(fake_tree)\n\n## to save space, use a subtree\nfake_tree2 = tree_subset(fake_tree, node=27, levels_back=0)\nwrite.beast(fake_tree2)#NEXUS\n[R-package treeio, Tue Nov 16 10:13:32 2021]\n\nBEGIN TAXA;\n    DIMENSIONS NTAX = 5;\n    TAXLABELS\n        Frillagalma_vityazi@1155031\n        Resomia_ornicephala@3111757\n        Lychnagalma_utricularia@2253871\n        Nanomia_bijuga@717864\n        Cordagalma_sp_@1525873\n    ;\nEND;\nBEGIN TREES;\n    TRANSLATE\n        1   Frillagalma_vityazi@1155031,\n        2   Resomia_ornicephala@3111757,\n        3   Lychnagalma_utricularia@2253871,\n        4   Nanomia_bijuga@717864,\n        5   Cordagalma_sp_@1525873\n    ;\n    TREE * UNTITLED = [&R] ((1[&fake_trait=-1.42,another_trait=0.17]:0.09,\n2[&fake_trait=0.19,another_trait=0.04]:0)[&fake_trait=0.85,\nanother_trait=0.56]:0,(5[&fake_trait=0.22,another_trait=0.73]:0.07,\n(3[&fake_trait=0.02,another_trait=0.29]:0.12,4[&fake_trait=-1.29,\nanother_trait=0.35]:0.13)[&fake_trait=-0.33,another_trait=0.88]:0)\n[&fake_trait=0.27,another_trait=0.94]:0):0.29;\nEND;"},{"path":"chapter3.html","id":"merging-tree-data-from-different-sources","chapter":"3 Exporting tree with data","heading":"3.2.3 Merging tree data from different sources","text":"Newick tree text can combined associated data, also tree\ndata obtained software output can combined external data, well\ndifferent tree objects can merged (details, see Chapter 2).merging data different sources, tree associated data can\nexported single file.output BEAST Nexus file can imported R using read.beast\nfunction associated data can used annotate tree\nusing ggtree (Yu et al., 2017).","code":"\n## combine tree object with data\ntree_with_data <- full_join(nhx, fake_data, by = \"node\")\ntree_with_data## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/treeio/extdata/NHX/phyldog.nhx'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 16 tips and 15 internal nodes.\n## \n## Tip labels:\n##   Prayidae_D27SS7@2825365, Kephyes_ovata@2606431,\n## Chuniphyes_multidentata@1277217,\n## Apolemia_sp_@1353964, Bargmannia_amoena@263997,\n## Bargmannia_elongata@946788, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'Ev', 'ND', 'S', 'fake_trait', 'another_trait'.\n## merge two tree object\ntree2 <- merge_tree(nhx, fake_tree)\nidentical(tree_with_data, tree2)## [1] TRUE\noutfile <- tempfile(fileext = \".tree\")\nwrite.beast(tree2, file = outfile)\nread.beast(outfile)## 'treedata' S4 object that stored information\n## of\n##  '/tmp/Rtmp5AWs09/fileacaba915d635.tree'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 16 tips and 15 internal nodes.\n## \n## Tip labels:\n##   Prayidae_D27SS7@2825365, Kephyes_ovata@2606431,\n## Chuniphyes_multidentata@1277217,\n## Apolemia_sp_@1353964, Bargmannia_amoena@263997,\n## Bargmannia_elongata@946788, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'another_trait', 'Ev', 'fake_trait', 'ND', 'S'."},{"path":"chapter3.html","id":"write-jtree","chapter":"3 Exporting tree with data","heading":"3.3 Exporting Tree Data to the jtree Format","text":"treeio package (Wang et al., 2020) provides \nwrite.beast() function export treedata BEAST Nexus file. quite useful\nconvert file format, combine tree data merge tree data \ndifferent sources demonstrated \nprevious session.\ntreeio package also supplies\nread.beast() function parse output file write.beast() function. Although\ntreeio, R community ability \nmanipulate BEAST Nexus format process tree data, still lacking\nlibrary/package parsing BEAST files programming languages.JSON (JavaScript Object Notation) lightweight data-interchange format \nwidely supported almost modern programming languages. make easy\nimport tree data programming\nlanguages, treeio supports\nexporting tree data jtree format, JSON-based can easy parse using language supports JSON.jtree format based JSON can parsed using JSON parser.jtree file can directly imported treedata object using\nread.jtree() function provided also\ntreeio package (see also session 1.3).","code":"\n# write.jtree(tree2)\n\n# to save space, use a subtree\ntree3 <- tree_subset(tree2, node=24, levels_back=0) \nwrite.jtree(tree3){\n    \"tree\": \"(Physonect_sp_@2066767:0.077429{3},(Bargmannia_amoena@263997:0.0144549\n{1},Bargmannia_elongata@946788:0.0149723{2}):0.0925388{5}):0.28549{4};\",\n    \"data\":[\n  {\n    \"edge_num\": 1,\n    \"Ev\": \"S\",\n    \"ND\": 10,\n    \"S\": 37,\n    \"fake_trait\": -0.69,\n    \"another_trait\": 0.42\n  },\n  {\n    \"edge_num\": 2,\n    \"Ev\": \"S\",\n    \"ND\": 11,\n    \"S\": 38,\n    \"fake_trait\": -0.95,\n    \"another_trait\": 0.38\n  },\n  {\n    \"edge_num\": 3,\n    \"Ev\": \"S\",\n    \"ND\": 13,\n    \"S\": 61,\n    \"fake_trait\": 0.59,\n    \"another_trait\": 0.65\n  },\n  {\n    \"edge_num\": 4,\n    \"Ev\": \"S\",\n    \"ND\": 14,\n    \"S\": 24,\n    \"fake_trait\": -0.69,\n    \"another_trait\": 0.06\n  },\n  {\n    \"edge_num\": 5,\n    \"Ev\": \"S\",\n    \"ND\": 12,\n    \"S\": 33,\n    \"fake_trait\": -0.58,\n    \"another_trait\": 0.4\n  }\n],\n    \"metadata\": {\"info\": \"R-package treeio\", \"data\": \"Tue Nov 16 10:21:20 2021\"}\n}\njtree_file <- tempfile(fileext = '.jtree')\nwrite.jtree(tree3, file = jtree_file)\njsonlite::fromJSON(jtree_file)$tree\n[1] \"(Physonect_sp_@2066767:0.077429{3},(Bargmannia_amoena@263997:0.0144549{1},\nBargmannia_elongata@946788:0.0149723{2}):0.0925388{5}):0.28549{4};\"\n\n$data\n  edge_num Ev ND  S fake_trait another_trait\n1        1  S 10 37      -0.69          0.42\n2        2  S 11 38      -0.95          0.38\n3        3  S 13 61       0.59          0.65\n4        4  S 14 24      -0.69          0.06\n5        5  S 12 33      -0.58          0.40\n\n$metadata\n$metadata$info\n[1] \"R-package treeio\"\n\n$metadata$data\n[1] \"Tue Nov 16 10:24:34 2021\"\nread.jtree(jtree_file)## 'treedata' S4 object that stored information\n## of\n##  '/tmp/Rtmp5AWs09/fileacaba69c81b63.jtree'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 3 tips and 2 internal nodes.\n## \n## Tip labels:\n##   Physonect_sp_@2066767, Bargmannia_amoena@263997,\n## Bargmannia_elongata@946788\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'Ev', 'ND', 'S', 'fake_trait', 'another_trait'."},{"path":"chapter3.html","id":"summary3","chapter":"3 Exporting tree with data","heading":"3.4 Summary","text":"Phylogenetic tree-associated data often stored separate file needs expertise map data tree structure. Lacking standardization store represent phylogeny associated data makes difficult researchers access integrate phylogenetic data studies. treeio package provides functions import phylogeny associated data several sources, including analysis findings commonly used software external data experimental data, clinical data, meta-data. trees associated data can exported single file BEAST jtree formats, output file can parsed back R treeio data easy access. input output utilities supplied treeio package lay foundation phylogenetic data integration downstream comparative study visualization. creates possibility integrating tree associated data different sources extends applications phylogenetic analysis different disciplines.","code":""},{"path":"chapter4.html","id":"chapter4","chapter":"4 Phylogenetic Tree Visualization","heading":"4 Phylogenetic Tree Visualization","text":"","code":""},{"path":"chapter4.html","id":"introduction-1","chapter":"4 Phylogenetic Tree Visualization","heading":"4.1 Introduction","text":"many software packages web tools designed displaying phylogenetic trees, TreeView (Page, 2002), FigTree, TreeDyn (Chevenet et al., 2006), Dendroscope (Huson & Scornavacca, 2012), EvolView (et al., 2016), iTOL (Letunic & Bork, 2007), etc. , FigTree, TreeDyn iTOL, allow users annotate trees colored branches, highlighted clades tree features. However, pre-defined annotating functions usually limited specific phylogenetic data. phylogenetic trees becoming widely used multidisciplinary studies, increasing need incorporate various types phylogenetic covariates associated data different sources trees visualizations analyses. instance, influenza virus wide host range, diverse dynamic genotypes, characteristic transmission behaviors mostly associated virus’s evolution essentially among . Therefore, addition standalone applications focus specific analysis data types, researchers studying molecular evolution need robust programmable platform allows high levels integration visualization many different aspects data (raw primary analyses) phylogenetic trees identify associations patterns.fill gap, developed ggtree (Yu et al., 2017), package R programming language (R Core Team, 2016) released Bioconductor project (Gentleman et al., 2004). ggtree built work treedata objects (see Chapters 1 9), display tree graphics ggplot2 package (Wickham, 2016) based grammar graphics (Wilkinson et al., 2005).R language increasingly used phylogenetics. However, comprehensive package, designed viewing annotating phylogenetic trees, particularly complex data integration, yet available. R packages phylogenetics focus specific statistical analyses rather viewing annotating trees generalized phylogeny-associated data. packages, including ape (Paradis et al., 2004) phytools (Revell, 2012), capable displaying annotating trees, developed using base graphics system R. particular, ape one fundamental packages phylogenetic analysis data processing. However, base graphics system relatively difficult extend limits complexity tree figure displayed. OutbreakTools (Jombart et al., 2014) phyloseq (McMurdie & Holmes, 2013) extended ggplot2 plot phylogenetic trees. ggplot2 system graphics allows rapid customization exploration design solutions. However, packages designed epidemiology microbiome data respectively aim provide general solution tree visualization annotation. ggtree package also inherits versatile properties ggplot2, importantly allows constructing complex tree figures freely combining multiple layers annotations (see also Chapter 5) using tree associated data imported different sources (see detailed Chapter 1 (Wang et al., 2020)).","code":""},{"path":"chapter4.html","id":"visualizing-phylogenetic-tree-with-ggtree","chapter":"4 Phylogenetic Tree Visualization","heading":"4.2 Visualizing Phylogenetic Tree with ggtree","text":"ggtree package (Yu et al., 2017) designed annotating phylogenetic trees associated data different types various sources. data come users analysis programs might include evolutionary rates, ancestral sequences, etc. associated taxa real samples, internal nodes representing hypothetic ancestor strain/species, tree branches indicating evolutionary time courses (Wang et al., 2020). instance, data geographic positions sampled avian influenza viruses (informed survey locations) ancestral nodes (phylogeographic inference) viral gene tree (Lam et al., 2012).ggtree supports ggplot2’s graphical language, allows high level customization, intuitive flexible. Notably, ggplot2 provide low-level geometric objects support tree-like structures, hence ggtree useful extension regard. Even though two phylogenetics-related R packages, OutbreakTools, phyloseq, developed based ggplot2, valuable part ggplot2 syntax - adding layers annotations - supported packages. example, plotted tree without taxa labels, OutbreakTools phyloseq provide easy way general R users, little knowledge infrastructures packages, add layer taxa labels. ggtree extends ggplot2 support tree objects implementing geometric layer, geom_tree(), support visualizing tree structure. ggtree, viewing phylogenetic tree relatively easy, via command ggplot(tree_object) + geom_tree() + theme_tree() ggtree(tree_object) short. Layers annotations can added one--one via + operator. facilitate tree visualization, ggtree provides several geometric layers, including geom_treescale() adding legend tree branch scale (genetic distance, divergence time, etc.), geom_range() displaying uncertainty branch lengths (confidence interval range, etc.), geom_tiplab() adding taxa label, geom_tippoint() geom_nodepoint() adding symbols tips internal nodes, geom_hilight() highlighting clades rectangle, geom_cladelab() annotating selected clades bar text label, etc.. full list geometric layers provided ggtree summarized Table 5.1.view phylogenetic tree, first need parse tree file R.\ntreeio package able parse diverse annotation data different software outputs S4 phylogenetic data objects (see also Chapter 1). ggtree package mainly utilizes S4 objects display annotate tree. R packages defined S3/S4 classes store phylogenetic trees domain-specific associated data, including phylo4 phylo4d defined phylobase package, obkdata defined OutbreakTools package, phyloseq defined phyloseq package, etc. tree objects also supported ggtree specific annotation data can used annotate tree directly ggtree (see also Chapter 9). compatibility ggtree facilitates integration data analysis results. addition, ggtree also supports tree-like structures, including dendrogram tree graphs.","code":""},{"path":"chapter4.html","id":"basic-tree-visualization","chapter":"4 Phylogenetic Tree Visualization","heading":"4.2.1 Basic Tree Visualization","text":"ggtree package extends ggplot2 (Wickham, 2016) package support viewing phylogenetic tree.\nimplements geom_tree() layer displaying phylogenetic tree, shown Figure 4.1A.function, ggtree(), implemented shortcut visualize tree, works exactly shown .ggtree package takes advantages ggplot2. example, can change color, size, type lines ggplot2 (Figure 4.1B).default, tree viewed ladderize form, user can set parameter ladderize = FALSE disable (Figure 4.1C, see also FAQ .5).branch.length used scale edge, user can set parameter branch.length = \"none\" view tree topology (cladogram, Figure 4.1D) numerical variables scale tree (e.g., dN/dS, see also Chapter 5).\nFIGURE 4.1: Basic tree visualization. Default ggtree output ladderized effect (), non-variable setting (e.g., color, size, line type) (B), non-ladderized tree (C), cladogram displays tree topology without branch length information (D).\n","code":"\nlibrary(\"treeio\")\nlibrary(\"ggtree\")\n\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\ntree <- read.tree(nwk)\n\nggplot(tree, aes(x, y)) + geom_tree() + theme_tree()\nggtree(tree, color=\"firebrick\", size=2, linetype=\"dotted\")\nggtree(tree, ladderize=FALSE)\nggtree(tree, branch.length=\"none\")"},{"path":"chapter4.html","id":"tree-layouts","chapter":"4 Phylogenetic Tree Visualization","heading":"4.2.2 Layouts of a phylogenetic tree","text":"Viewing phylogenetic ggtree quite simple, just pass tree object ggtree() function. developed several types layouts tree presentation (Figure 4.2), including rectangular (default), roundrect (rounded rectangular), ellipse, slanted, circular, fan, unrooted (equal angle daylight methods), time-scaled, two-dimensional layouts.examples visualizing tree different layouts:\nFIGURE 4.2: Tree layouts. Phylogram: rectangular layout (), rounded rectangular layout (B), slanted layout (C), ellipse layout (D), circular layout (E), fan layout (F). Unrooted: equal-angle method (G) daylight method (H). Cladogram: rectangular layout (), ellipse (J), circular layout (K), unrooted layout (L). Slanted fan layouts cladogram also supported.\npossible layouts can drawn modifying\nscales/coordination (Figure 4.3).\nFIGURE 4.3: Derived Tree layouts. right--left rectangular layout (), bottom-rectangular layout (B), top-rectangular layout (Dendrogram) (C), rotated rectangular layout (D), bottom-slanted layout (E), top-slanted layout (Cladogram) (F), circular layout (G), circular inward layout (H ).\nPhylogram. Layouts rectangular, roundrect, slanted, ellipse, circular, fan supported visualize phylogram (default, branch length scaled) demonstrated Figures 4.2A-F.Unrooted layout. Unrooted (also called ‘radial’) layout supported equal-angle daylight algorithms; users can specify unrooted layout algorithm passing “equal_angle” “daylight” layout parameter visualize tree. equal-angle method proposed Christopher Meacham PLOTREE, incorporated PHYLIP (Retief, 2000). method starts root tree allocates arcs angle subtree proportional number tips . iterates root tips subdivides angle allocated subtree angles dependent subtrees. method fast implemented many software packages. shown Figure 4.2G, equal angle method drawback tips tend clustered together, leave many spaces unused. daylight method starts initial tree built equal angle iteratively improves successively going interior node swinging subtrees arcs “daylight” equal (Figure 4.2H). method firstly implemented PAUP* (Wilgenbusch & Swofford, 2003).Cladogram. visualize cladogram without branch length scaling displays tree structure, branch.length set “none” works types layouts (Figures 4.2I-L).Timescaled layout. timescaled tree, recent sampling date must specified via mrsd parameter, ggtree() scale tree sampling (tip) divergence (internal node) time, timescale axis displayed tree default. Users can use deeptime package add geologic timescale (e.g., periods eras) ggtree() plot.\nFIGURE 4.4: Timescaled layout. x-axis timescale (units year). divergence time example inferred BEAST using molecular clock model.\nTwo-dimensional tree layout. two-dimensional tree projection phylogenetic tree space defined associated phenotype (numerical categorical trait, y-axis) tree branch scale (e.g., evolutionary distance, divergent time, x-axis). phenotype can measure certain biological characteristics taxa hypothetical ancestors tree. layout useful track virus phenotypes behaviors (y-axis) changing virus evolution (x-axis). fact, analysis phenotypes genotypes evolutionary time widely used study influenza virus evolution (Neher et al., 2016), though analysis diagrams tree-like, .e., connection data points, unlike two-dimensional tree layout connects data points corresponding tree branches. Therefore, new layout provided make data analysis easier scalable large sequence datasets.example, used previous timescaled tree H3 human swine influenza viruses (Figure 4.4; data published (Liang et al., 2014)) scaled y-axis based predicted N-linked glycosylation sites (NLG) taxon ancestral sequences hemagglutinin proteins. NLG sites predicted using NetNGlyc 1.0 Server. scale y-axis, parameter yscale ggtree() function set numerical categorical variable. yscale categorical variable example, users specify categories mapped numerical values via yscale_mapping variables.\nFIGURE 4.5: Two-dimensional tree layout. trunk branches highlighted red (swine) blue (humans). x-axis scaled branch length (units year) timescaled tree. y-axis scaled node attribute variable, case, number predicted N-linked glycosylation sites (NLG) hemagglutinin protein. Colored circles indicate different types tree nodes. Note nodes assigned x- (temporal) y- (NLG) coordinates superimposed representation appear one node, shaded based colors nodes point.\nshown Figure 4.5, two-dimensional tree good visualizing change phenotype evolution phylogenetic tree. example, shown H3 gene human influenza virus maintained high level N-linked glycosylation sites (n=8 9) last two decades dropped significantly 5 6 separate viral lineage transmitted swine populations established . indeed hypothesized human influenza virus high level glycosylation viral hemagglutinin protein provides better shielding effect protect antigenic sites exposure herd immunity, thus selective advantage human populations maintain high level herd immunity circulating human influenza virus strains. viral lineage newly jumped across species barrier transmitted swine population, shielding effect high-level surface glycan oppositely imposes selective disadvantage receptor-binding domain may also shielded greatly affects viral fitness lineage newly adapted new host species. Another example two-dimensional tree can found Figure 4.12.","code":"\nlibrary(ggtree)\nset.seed(2017-02-16)\ntree <- rtree(50)\nggtree(tree)\nggtree(tree, layout=\"roundrect\")\nggtree(tree, layout=\"slanted\")\nggtree(tree, layout=\"ellipse\")\nggtree(tree, layout=\"circular\")\nggtree(tree, layout=\"fan\", open.angle=120)\nggtree(tree, layout=\"equal_angle\")\nggtree(tree, layout=\"daylight\")\nggtree(tree, branch.length='none')\nggtree(tree, layout=\"ellipse\", branch.length=\"none\")\nggtree(tree, branch.length='none', layout='circular')\nggtree(tree, layout=\"daylight\", branch.length = 'none')\nggtree(tree) + scale_x_reverse()\nggtree(tree) + coord_flip()\nggtree(tree) + layout_dendrogram()\nggplotify::as.ggplot(ggtree(tree), angle=-30, scale=.9)\nggtree(tree, layout='slanted') + coord_flip()\nggtree(tree, layout='slanted', branch.length='none') + layout_dendrogram()\nggtree(tree, layout='circular') + xlim(-10, NA)\nggtree(tree) + layout_inward_circular()\nggtree(tree) + layout_inward_circular(xlim=15)\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", \n                          package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\nggtree(beast_tree, mrsd=\"2013-01-01\") + theme_tree2()\nNAG_file <- system.file(\"examples/NAG_inHA1.txt\", package=\"ggtree\")\n\nNAG.df <- read.table(NAG_file, sep=\"\\t\", header=FALSE, \n                     stringsAsFactors = FALSE)\nNAG <- NAG.df[,2]\nnames(NAG) <- NAG.df[,1]\n\n## separate the tree by host species\ntip <- as.phylo(beast_tree)$tip.label\nbeast_tree <- groupOTU(beast_tree, tip[grep(\"Swine\", tip)], \n                       group_name = \"host\")\n\np <- ggtree(beast_tree, aes(color=host), mrsd=\"2013-01-01\", \n            yscale = \"label\", yscale_mapping = NAG) + \n  theme_classic() + theme(legend.position='none') +\n  scale_color_manual(values=c(\"blue\", \"red\"), \n                     labels=c(\"human\", \"swine\")) +\n  ylab(\"Number of predicted N-linked glycosylation sites\")\n\n## (optional) add more annotations to help interpretation\np + geom_nodepoint(color=\"grey\", size=3, alpha=.8) +\n  geom_rootpoint(color=\"black\", size=3) +\n  geom_tippoint(size=3, alpha=.5) + \n  annotate(\"point\", 1992, 5.6, size=3, color=\"black\") +\n  annotate(\"point\", 1992, 5.4, size=3, color=\"grey\") +\n  annotate(\"point\", 1991.6, 5.2, size=3, color=\"blue\") +\n  annotate(\"point\", 1992, 5.2, size=3, color=\"red\") + \n  annotate(\"text\", 1992.3, 5.6, hjust=0, size=4, label=\"Root node\") +\n  annotate(\"text\", 1992.3, 5.4, hjust=0, size=4, \n           label=\"Internal nodes\") +\n  annotate(\"text\", 1992.3, 5.2, hjust=0, size=4,\n           label=\"Tip nodes (blue: human; red: swine)\")"},{"path":"chapter4.html","id":"displaying-tree-components","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3 Displaying Tree Components","text":"","code":""},{"path":"chapter4.html","id":"geom-trescale","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.1 Displaying treescale (evolution distance)","text":"show treescale, user can use geom_treescale() layer (Figures 4.6A-C).geom_treescale() supports following parameters:x y treescale positionwidth length treescalefontsize size textlinesize size lineoffset relative position line textcolor color treescaleWe can also use theme_tree2() display treescale adding x axis (Figure 4.6D).\nFIGURE 4.6: Display treescale. geom_treescale() automatically add scale bar evolutionary distance (). Users can modify color, width, position scale (B) well size scale bar text relative position (C). Another possible solution enable x-axis useful timescaled tree (D).\nTreescale restricted evolution distance, treeio can rescale tree numerical variables (details described session 2.4), ggtree allows users specify numerical variable serve branch length visualization (details described session 4.3).","code":"\nggtree(tree) + geom_treescale()\nggtree(tree) + geom_treescale(x=0, y=45, width=1, color='red')\nggtree(tree) + geom_treescale(fontsize=6, linesize=2, offset=1)\nggtree(tree) + theme_tree2()"},{"path":"chapter4.html","id":"geom-nodepoint","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.2 Displaying nodes/tips","text":"Showing internal nodes tips tree can done adding layer points using geom_nodepoint(), geom_tippoint(), geom_point() (Figure 4.7).\nFIGURE 4.7: Display external internal nodes. geom_point() automatically add symbolic points nodes (). geom_nodepoint() adds symbolic points internal nodes geom_tippoint() adds symbolic points external nodes (B).\n","code":"\nggtree(tree) + \n    geom_point(aes(shape=isTip, color=isTip), size=3)\n\np <- ggtree(tree) + \n    geom_nodepoint(color=\"#b5e521\", alpha=1/4, size=10) \np + geom_tippoint(color=\"#FDAC4F\", shape=8, size=3)"},{"path":"chapter4.html","id":"displaying-labels","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.3 Displaying labels","text":"Users can use geom_text() geom_label() display node (available) tip labels simultaneously geom_tiplab() display tip labels (Figure 4.8A).geom_tiplab() layer supports using text label geom display labels, \nalso supports image geom label tip image files (see Chapter 7). corresponding\ngeom, geom_nodelab() also provided displaying node labels.circular unrooted layouts, ggtree supports rotating node labels according angles branches (Figure 4.8B).long tip labels, label may truncated. several ways solve issue (see FAQ: Tip label truncated). Another solution solve issue display tip labels y-axis labels (Figure 4.8C). However, works rectangular dendrogram layouts users need use theme() adjust tip labels case.\nFIGURE 4.8: Display tip labels. geom_tiplab() supports displaying tip labels (). circular, fan, unrooted tree layouts, labels can rotated fit angle branches (B). dendrogram/rectangular layout, tip labels can displayed y-axis labels (C).\ndefault, positions display text based node positions; can change based middle branch/edge (setting aes(x = branch)), useful annotating transition parent node child node.","code":"\np + geom_tiplab(size=3, color=\"purple\")\nggtree(tree, layout=\"circular\") + geom_tiplab(aes(angle=angle), color='blue')\nggtree(tree) + geom_tiplab(as_ylab=TRUE, color='firebrick')"},{"path":"chapter4.html","id":"displaying-root-edge","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.4 Displaying root-edge","text":"ggtree() doesn’t plot root-edge default. Users can use geom_rootedge() automatically display root-edge (Figure 4.9A). root edge information, geom_rootedge() display nothing default (Figure 4.9B). Users can set root-edge tree (Figure 4.9C) specify rootedge geom_rootedge() (Figure 4.9D). long root length useful increase readability circular tree (see also FAQ: Enlarge center space).\nFIGURE 4.9: Display root-edge. geom_rootedge() supports displaying root-edge root edge presented (). shows nothing root-edge (B). case, users can manually set root edge tree (C) just specify length root plotting (D).\n","code":"\n## with root-edge = 1\ntree1 <- read.tree(text='((A:1,B:2):3,C:2):1;')\nggtree(tree1) + geom_tiplab() + geom_rootedge()\n\n## without root-edge\ntree2 <- read.tree(text='((A:1,B:2):3,C:2);')\nggtree(tree2) + geom_tiplab() + geom_rootedge()\n\n## setting root-edge\ntree2$root.edge <- 2\nggtree(tree2) + geom_tiplab() + geom_rootedge()\n\n## specify the length of root edge for just plotting\n## this will ignore tree$root.edge\nggtree(tree2) + geom_tiplab() + geom_rootedge(rootedge = 3)"},{"path":"chapter4.html","id":"color-tree","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.5 Color tree","text":"ggtree (Yu et al., 2018), coloring phylogenetic tree easy, using aes(color=VAR) map color tree based specific variable (numerical categorical variables supported, see Figure 4.10).\nFIGURE 4.10: Color tree continuous discrete feature. Edges colored values associated child nodes.\nUsers can use feature (available), including clade posterior dN/dS, etc., scale color tree. feature continuous numerical value, ggtree provides continuous parameter support plotting continuous state transition edges. , use example9 demonstrate functionality (Figure 4.11A). want add thin black border tree branches, can place tree black slightly thicker branches tree emulate edge outlines demonstrated Figure 4.11B.\nFIGURE 4.11: Continuous state transition edges. Edges colored values ancestral trait offspring.\nBesides, can use two-dimensional tree (demonstrated Figure 4.5) visualize phenotype vertical dimension create phenogram Figure 4.12. can use ggrepel package repel tip labels avoid overlapping demonstrated Figure .4.\nFIGURE 4.12: Phenogram. Projecting tree space defined time (genetic distance) horizontal axis phenotype vertical dimension.\n","code":"\nggtree(beast_tree, aes(color=rate)) +\n    scale_color_continuous(low='darkgreen', high='red') +\n    theme(legend.position=\"right\")\nlibrary(ggtree)\nlibrary(treeio)\nlibrary(tidytree)\nlibrary(ggplot2)\nlibrary(TDbook)\n## ref: http://www.phytools.org/eqg2015/asr.html\n##\n## load `tree_anole` and `df_svl` from 'TDbook'\nsvl <- as.matrix(df_svl)[,1]\nfit <- phytools::fastAnc(tree_anole, svl, vars=TRUE, CI=TRUE)\n\ntd <- data.frame(node = nodeid(tree_anole, names(svl)),\n               trait = svl)\nnd <- data.frame(node = names(fit$ace), trait = fit$ace)\n\nd <- rbind(td, nd)\nd$node <- as.numeric(d$node)\ntree <- full_join(tree_anole, d, by = 'node')\n\np1 <- ggtree(tree, aes(color=trait), layout = 'circular', \n        ladderize = FALSE, continuous = 'colour', size=2) +\n    scale_color_gradientn(colours=c(\"red\", 'orange', 'green', 'cyan', 'blue')) +\n    geom_tiplab(hjust = -.1) + \n    xlim(0, 1.2) + \n    theme(legend.position = c(.05, .85)) \n\np2 <- ggtree(tree, layout='circular', ladderize = FALSE, size=2.8) + \n    geom_tree(aes(color=trait), continuous = 'colour', size=2) +  \n    scale_color_gradientn(colours=c(\"red\", 'orange', 'green', 'cyan', 'blue')) +\n    geom_tiplab(aes(color=trait), hjust = -.1) + \n    xlim(0, 1.2) + \n    theme(legend.position = c(.05, .85)) \n\nplot_list(p1, p2, ncol=2, tag_levels=\"A\")    \nggtree(tree, aes(color=trait), continuous = 'colour', yscale = \"trait\") + \n    scale_color_viridis_c() + theme_minimal()"},{"path":"chapter4.html","id":"rescale-tree","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.6 Rescale tree","text":"phylogenetic trees scaled evolutionary distance (substitution/site). ggtree, users can rescale phylogenetic tree numerical variable inferred evolutionary analysis (e.g., dN/dS).example displays time tree (Figure 4.13A) branches rescaled substitution rate inferred BEAST (Figure 4.13B).following example draws tree inferred CodeML (Figure 4.13C), branches can rescaled using dN/dS values (Figure 4.13D).\nFIGURE 4.13: Rescale tree branches. time-scaled tree inferred BEAST () branches rescaled substitution rate (B). tree inferred CodeML (C) branches rescaled dN/dS values (D).\nprovides convenient way allow us explore relationship tree associated data tree structure visualization.\naddition specifying branch.length tree visualization, users can change branch length stored tree object using rescale_tree() function provided treeio package (Wang et al., 2020), following command display tree identical Figure 4.13B. rescale_tree() function documented session 2.4.","code":"\nlibrary(\"treeio\")\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\nbeast_tree## 'treedata' S4 object that stored information\n## of\n##  '/home/ygc/R/library/ggtree/examples/MCC_FluA_H3.tree'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 76 tips and 75 internal nodes.\n## \n## Tip labels:\n##   A/Hokkaido/30-1-a/2013, A/New_York/334/2004,\n## A/New_York/463/2005, A/New_York/452/1999,\n## A/New_York/238/2005, A/New_York/523/1998, ...\n## \n## Rooted; includes branch lengths.\n## \n## with the following features available:\n##   'height', 'height_0.95_HPD', 'height_median',\n## 'height_range', 'length', 'length_0.95_HPD',\n## 'length_median', 'length_range', 'posterior', 'rate',\n## 'rate_0.95_HPD', 'rate_median', 'rate_range'.\np1 <- ggtree(beast_tree, mrsd='2013-01-01') + theme_tree2() +\n    labs(caption=\"Divergence time\")\np2 <- ggtree(beast_tree, branch.length='rate') + theme_tree2() +\n    labs(caption=\"Substitution rate\")\nmlcfile <- system.file(\"extdata/PAML_Codeml\", \"mlc\", package=\"treeio\")\nmlc_tree <- read.codeml_mlc(mlcfile)\np3 <- ggtree(mlc_tree) + theme_tree2() +\n    labs(caption=\"nucleotide substitutions per codon\")\np4 <- ggtree(mlc_tree, branch.length='dN_vs_dS') + theme_tree2() +\n    labs(caption=\"dN/dS tree\")\nbeast_tree2 <- rescale_tree(beast_tree, branch.length='rate')\nggtree(beast_tree2) + theme_tree2()"},{"path":"chapter4.html","id":"modify-components-of-a-theme","chapter":"4 Phylogenetic Tree Visualization","heading":"4.3.7 Modify components of a theme","text":"theme_tree() defined totally blank canvas, theme_tree2() adds\nphylogenetic distance (via x-axis). two themes accept parameter \nbgcolor defined background color. Users can use theme components theme_tree() theme_tree2() functions modify (Figure 4.14).\nFIGURE 4.14: Three themes. ggplot2 theme components can modified, ggplot2 themes can applied ggtree() output.\nUsers can also use image file tree background, see example Appendix B.","code":"\nset.seed(2019)\nx <- rtree(30)\nggtree(x, color=\"#0808E5\", size=1) + theme_tree(\"#FEE4E9\")\nggtree(x, color=\"orange\", size=1) + theme_tree('grey30')"},{"path":"chapter4.html","id":"visualize-a-list-of-trees","chapter":"4 Phylogenetic Tree Visualization","heading":"4.4 Visualize a List of Trees","text":"ggtree supports multiPhylo treedataList objects list trees can viewed simultaneously. trees visualize one top another can plotted different panels facet_wrap() facet_grid() functions (Figure 4.15).\nFIGURE 4.15: Visualizing multiPhylo object. ggtree() function supports visualizing multiple trees stored multiPhylo treedataList objects.\nOne hundred bootstrap trees can also viewed simultaneously (Figure 4.16). allows researchers explore large set phylogenetic trees find consensus distinct trees. consensus tree can summarized via density tree (Figure 4.18).\nFIGURE 4.16: Visualizing one hundred bootstrap trees simultaneously.\n","code":"\n## trees <- lapply(c(10, 20, 40), rtree)\n## class(trees) <- \"multiPhylo\"\n## ggtree(trees) + facet_wrap(~.id, scale=\"free\") + geom_tiplab()\n\nf <- system.file(\"extdata/r8s\", \"H3_r8s_output.log\", package=\"treeio\")\nr8s <- read.r8s(f)\nggtree(r8s) + facet_wrap( ~.id, scale=\"free\") + theme_tree2()\nbtrees <- read.tree(system.file(\"extdata/RAxML\", \n                                \"RAxML_bootstrap.H3\", \n                                package=\"treeio\")\n                    )\nggtree(btrees) + facet_wrap(~.id, ncol=10)"},{"path":"chapter4.html","id":"annotate-one-tree-with-values-from-different-variables","chapter":"4 Phylogenetic Tree Visualization","heading":"4.4.1 Annotate one tree with values from different variables","text":"annotate one tree (tree) values different variables, one can plot separately use patchwork aplot combine side--side.Another solution utilize ability plot list trees ggtree, add annotation layers selected variable specific panel via subset aesthetic mapping supported ggtree using td_filter() demonstrated Figure 4.17. .id conserved variable internally used store IDs different trees.\nFIGURE 4.17: Annotate one tree values different variables. Using subset aesthetic mapping (TREE1 panel) td_filter() (TREE2 panel) filter variables displayed specific panel.\n","code":"\nset.seed(2020)\nx <- rtree(30)\nd <- data.frame(label=x$tip.label, var1=abs(rnorm(30)), var2=abs(rnorm(30)))\ntree <- full_join(x, d, by='label')\ntrs <- list(TREE1 = tree, TREE2 = tree)\nclass(trs) <- 'treedataList'\nggtree(trs) + facet_wrap(~.id) + \n  geom_tippoint(aes(subset=.id == 'TREE1', colour=var1)) + \n  scale_colour_gradient(low='blue', high='red') +  \n  ggnewscale::new_scale_colour()  + \n  geom_tippoint(aes(colour=var2), data=td_filter(.id == \"TREE2\")) + \n  scale_colour_viridis_c()"},{"path":"chapter4.html","id":"densitree","chapter":"4 Phylogenetic Tree Visualization","heading":"4.4.2 DensiTree","text":"Another way view bootstrap trees merge form density tree using ggdensitree() function (Figure 4.18). help us identify consensus differences among large set trees. trees stacked top structures trees rotated ensure consistency tip order. tip order determined tip.order parameter default (tip.order = 'mode') tips ordered commonly seen topology. user can pass character vector specify tip order, pass integer, N, order tips order tips Nth tree. Passing mds tip.order order tips based MDS (Multidimensional Scaling) path length tips, passing mds_dist order tips based MDS distance tips.\nFIGURE 4.18: DensiTree. Trees stacked top structures trees rotated ensure consistency tip order.\n","code":"\nggdensitree(btrees, alpha=.3, colour='steelblue') + \n    geom_tiplab(size=3) + hexpand(.35)"},{"path":"chapter4.html","id":"summary4","chapter":"4 Phylogenetic Tree Visualization","heading":"4.5 Summary","text":"Visualizing phylogenetic trees ggtree easy using single command ggtree(tree). ggtree package provides several geometric layers display tree components tip labels, symbolic points external internal nodes, root-edge, etc. Associated data can used rescale branch lengths, color tree, displayed tree. can done ggplot2 grammar graphic syntax, makes easy overlay layers customize tree graph (via ggplot2 themes scales). ggtree package also provides several layers specifically designed tree annotation introduced Chapter 5. ggtree package makes presentation trees associated data extremely easy. Simple graphs easy generate, complex graphs simply superimposed layers also easy generate.","code":""},{"path":"chapter5.html","id":"chapter5","chapter":"5 Phylogenetic Tree Annotation","heading":"5 Phylogenetic Tree Annotation","text":"","code":""},{"path":"chapter5.html","id":"visualizing-and-annotating-tree-using-grammar-of-graphics","chapter":"5 Phylogenetic Tree Annotation","heading":"5.1 Visualizing and Annotating Tree Using Grammar of Graphics","text":"ggtree (Yu et al., 2017) designed general-purpose specific type tree visualization annotation. supports grammar graphics implemented ggplot2 users can freely visualize/annotate tree combining several annotation layers.\nFIGURE 5.1: Annotating tree using grammar graphics. NHX tree annotated using grammar graphic syntax combining different layers using + operator. Species information labeled middle branches. Duplication events shown recent common ancestor clade bootstrap values displayed near .\n, example, visualized tree several layers display annotation stored NHX tags, including layer geom_tiplab() display tip labels (gene name case), layer using geom_label() show species information (S tag) colored light green, layer duplication event information (D tag) colored steelblue another layer using geom_text() show bootstrap value (B tag).Layers defined ggplot2 can applied ggtree directly demonstrated Figure 5.1 using geom_label() geom_text(). ggplot2 provide graphic layers specifically designed phylogenetic tree annotation. instance, layers tip labels, tree branch scale legend, highlight, labeling clade unavailable. make tree annotation flexible, several layers implemented ggtree (Table 5.1), enabling different ways annotation various parts/components phylogenetic tree.\nTABLE 5.1: Geom layers defined ggtree.\n","code":"\nlibrary(ggtree)\ntreetext = \"(((ADH2:0.1[&&NHX:S=human], ADH1:0.11[&&NHX:S=human]):\n0.05 [&&NHX:S=primates:D=Y:B=100],ADHY:\n0.1[&&NHX:S=nematode],ADHX:0.12 [&&NHX:S=insect]):\n0.1[&&NHX:S=metazoa:D=N],(ADH4:0.09[&&NHX:S=yeast],\nADH3:0.13[&&NHX:S=yeast], ADH2:0.12[&&NHX:S=yeast],\nADH1:0.11[&&NHX:S=yeast]):0.1[&&NHX:S=Fungi])[&&NHX:D=N];\"\ntree <- read.nhx(textConnection(treetext))\nggtree(tree) + geom_tiplab() + \n  geom_label(aes(x=branch, label=S), fill='lightgreen') + \n  geom_label(aes(label=D), fill='steelblue') + \n  geom_text(aes(label=B), hjust=-.5)"},{"path":"chapter5.html","id":"layers-for-tree-annotation","chapter":"5 Phylogenetic Tree Annotation","heading":"5.2 Layers for Tree Annotation","text":"","code":""},{"path":"chapter5.html","id":"colored-strips","chapter":"5 Phylogenetic Tree Annotation","heading":"5.2.1 Colored strips","text":"ggtree (Yu et al., 2017) implements geom_cladelab() layer annotate selected clade bar indicating clade corresponding label.geom_cladelab() layer accepts selected internal node number labels corresponding clade automatically (Figure 5.2A). get internal node number, please refer Chapter 2.Users can set parameter, align = TRUE, align clade label, offset, adjust position color set color bar label text, etc. (Figure 5.2B).Users can change angle clade label text relative position text bar via parameter offset.text. size bar text can changed via parameters barsize fontsize, respectively (Figure 5.2C).Users can also use geom_label() label text can set background color fill parameter (Figure 5.2D).\nFIGURE 5.2: Labeling clades. Default (); aligning coloring clade bar text (B); changing size angle (C) using geom_label() background color text (D).\naddition, geom_cladelab() allows users use image phylopic annotate clades, supports using aesthetic mapping automatically annotate clade bar text label image (e.g., mapping variable color clade labels) (Figure 5.3).\nFIGURE 5.3: Labeling clades using aesthetic mapping. geom_cladelab() layer allows users use aesthetic mapping annotate clades (); supports using images phylopic annotate clades (B); mapping variable change color size text image also supported (C).\ngeom_cladelab() layer also supports unrooted tree layouts (Figure 5.4A).geom_cladelab() designed labeling Monophyletic (Clade) related taxa form clade. ggtree, provide another layer, geom_strip(), add strip/bar indicate association optional label Polyphyletic Paraphyletic (Figure 5.4B).\nFIGURE 5.4: Labeling associated taxa. geom_cladelab() designed labeling Monophyletic supports unrooted layouts (). geom_strip() designed labeling types associated taxa, including Monophyletic, Polyphyletic, Paraphyletic (B).\n","code":"\nset.seed(2015-12-21)\ntree <- rtree(30)\np <- ggtree(tree) + xlim(NA, 8)\n\np + geom_cladelab(node=45, label=\"test label\") +\n    geom_cladelab(node=34, label=\"another clade\")\np + geom_cladelab(node=45, label=\"test label\", align=TRUE,  \n                  offset = .2, textcolor='red', barcolor='red') +\n    geom_cladelab(node=34, label=\"another clade\", align=TRUE, \n                  offset = .2, textcolor='blue', barcolor='blue')\np + geom_cladelab(node=45, label=\"test label\", align=TRUE, angle=270, \n            hjust='center', offset.text=.5, barsize=1.5, fontsize=8) +\n    geom_cladelab(node=34, label=\"another clade\", align=TRUE, angle=45)\np + geom_cladelab(node=34, label=\"another clade\", align=TRUE, \n                  geom='label', fill='lightblue')\ndat <- data.frame(node = c(45, 34), \n            name = c(\"test label\", \"another clade\"))\n# The node and label is required when geom=\"text\" \n## or geom=\"label\" or geom=\"shadowtext\".\np1 <- p + geom_cladelab(data = dat, \n        mapping = aes(node = node, label = name, color = name), \n        fontsize = 3)\n\ndt <- data.frame(node = c(45, 34), \n                 image = c(\"7fb9bea8-e758-4986-afb2-95a2c3bf983d\", \n                          \"0174801d-15a6-4668-bfe0-4c421fbe51e8\"), \n                 name = c(\"specie A\", \"specie B\"))\n\n# when geom=\"phylopic\" or geom=\"image\", the image of aes is required.\np2 <- p + geom_cladelab(data = dt, \n                mapping = aes(node = node, label = name, image = image), \n                geom = \"phylopic\", imagecolor = \"black\", \n                offset=1, offset.text=0.5)\n\n# The color or size of image also can be mapped.\np3 <- p + geom_cladelab(data = dt, \n              mapping = aes(node = node, label = name, \n                          image = image, color = name), \n              geom = \"phylopic\", offset = 1, offset.text=0.5)\nggtree(tree, layout=\"daylight\") + \n  geom_cladelab(node=35, label=\"test label\", angle=0, \n                  fontsize=8, offset=.5, vjust=.5)  + \n  geom_cladelab(node=55, label='another clade', \n                  angle=-95, hjust=.5, fontsize=8)\np + geom_tiplab() + \n  geom_strip('t10', 't30', barsize=2, color='red', \n            label=\"associated taxa\", offset.text=.1) + \n  geom_strip('t1', 't18', barsize=2, color='blue', \n            label = \"another label\", offset.text=.1)"},{"path":"chapter5.html","id":"highlight-clades","chapter":"5 Phylogenetic Tree Annotation","heading":"5.2.2 Highlight clades","text":"ggtree implements geom_hilight() layer, accepts internal node number adds layer rectangle highlight selected clade (Figure 5.5)10.geom_hilight layer also supports highlighting clades unrooted layout trees round (‘encircle’) rectangular (‘rect’) shape (Figure 5.5C).Another way highlight selected clades setting clades different colors /line types demonstrated Figure 6.2.addition geom_hilight(), ggtree also implements geom_balance()\ndesigned highlight neighboring subclades given internal node (Figure 5.5D).geom_hilight() layer supports using aesthetic mapping automatically highlight clades demonstrated Figures 5.5E-F. plot Cartesian coordinates (e.g., rectangular layout), rectangle can rounded (Figure 5.5E) filled gradient colors (Figure 5.5F).\nFIGURE 5.5: Highlight selected clades. Rectangular layout (), circular/fan (B), unrooted layouts. Highlight neighboring subclades simultaneously (D). Highlight selected clades using associated data (E F).\n","code":"\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\ntree <- read.tree(nwk)\nggtree(tree) + \n    geom_hilight(node=21, fill=\"steelblue\", alpha=.6) +\n    geom_hilight(node=17, fill=\"darkgreen\", alpha=.6) \n\nggtree(tree, layout=\"circular\") + \n    geom_hilight(node=21, fill=\"steelblue\", alpha=.6) +\n    geom_hilight(node=23, fill=\"darkgreen\", alpha=.6)\n## type can be 'encircle' or 'rect'\npg + geom_hilight(node=55, linetype = 3) + \n  geom_hilight(node=35, fill='darkgreen', type=\"rect\")\nggtree(tree) +\n  geom_balance(node=16, fill='steelblue', color='white', alpha=0.6, extend=1) +\n  geom_balance(node=19, fill='darkgreen', color='white', alpha=0.6, extend=1) \n## using external data\nd <- data.frame(node=c(17, 21), type=c(\"A\", \"B\"))\nggtree(tree) + geom_hilight(data=d, aes(node=node, fill=type),\n                            type = \"roundrect\")\n\n## using data stored in the tree object\nx <- read.nhx(system.file(\"extdata/NHX/ADH.nhx\", package=\"treeio\"))\nggtree(x) + geom_hilight(mapping=aes(subset = node %in% c(10, 12), \n                                    fill = S),\n                        type = \"gradient\", gradient.direction = 'rt',\n                        alpha = .8) +\n  scale_fill_manual(values=c(\"steelblue\", \"darkgreen\"))"},{"path":"chapter5.html","id":"taxa-connection","chapter":"5 Phylogenetic Tree Annotation","heading":"5.2.3 Taxa connection","text":"evolutionary events (e.g., reassortment, horizontal gene transfer) modeled simple tree. ggtree provides geom_taxalink() layer allows drawing straight curved lines two nodes tree, allowing represent evolutionary events connecting taxa. works rectangular (Figure 5.6A), circular (Figure 5.6B), inward circular (Figure 5.6C) layouts. geom_taxalink() useful presenting evolutionary events, can also used combine evolutionary trees present relationships interactions species (Xu, Dai, et al., 2021).geom_taxalink() layout supports aesthetic mapping, requires data.frame stores association information /without meta-data input (Figure 5.6D).\nFIGURE 5.6: Linking related taxa. can used indicate evolutionary events relationships species. Rectangular layout (), circular layout (B), inward circular layout (C D). supports aesthetic mapping map variables set line sizes colors (D).\n","code":"\np1 <- ggtree(tree) + geom_tiplab() + geom_taxalink(taxa1='A', taxa2='E') + \n  geom_taxalink(taxa1='F', taxa2='K', color='red', linetype = 'dashed',\n    arrow=arrow(length=unit(0.02, \"npc\")))\n\np2 <- ggtree(tree, layout=\"circular\") + \n      geom_taxalink(taxa1='A', taxa2='E', color=\"grey\", alpha=0.5, \n                offset=0.05, arrow=arrow(length=unit(0.01, \"npc\"))) + \n      geom_taxalink(taxa1='F', taxa2='K', color='red', \n                linetype = 'dashed', alpha=0.5, offset=0.05,\n                arrow=arrow(length=unit(0.01, \"npc\"))) +\n      geom_taxalink(taxa1=\"L\", taxa2=\"M\", color=\"blue\", alpha=0.5, \n                offset=0.05, hratio=0.8, \n                arrow=arrow(length=unit(0.01, \"npc\"))) + \n      geom_tiplab()\n\n# when the tree was created using reverse x, \n# we can set outward to FALSE, which will generate the inward curve lines.\np3 <- ggtree(tree, layout=\"inward_circular\", xlim=150) +\n      geom_taxalink(taxa1='A', taxa2='E', color=\"grey\", alpha=0.5, \n                    offset=-0.2, outward=FALSE,\n                    arrow=arrow(length=unit(0.01, \"npc\"))) +\n      geom_taxalink(taxa1='F', taxa2='K', color='red', linetype = 'dashed', \n                    alpha=0.5, offset=-0.2, outward=FALSE,\n                    arrow=arrow(length=unit(0.01, \"npc\"))) +\n      geom_taxalink(taxa1=\"L\", taxa2=\"M\", color=\"blue\", alpha=0.5, \n                    offset=-0.2, outward=FALSE,\n                    arrow=arrow(length=unit(0.01, \"npc\"))) +\n      geom_tiplab(hjust=1) \n\ndat <- data.frame(from=c(\"A\", \"F\", \"L\"), \n                  to=c(\"E\", \"K\", \"M\"), \n                  h=c(1, 1, 0.1), \n                  type=c(\"t1\", \"t2\", \"t3\"), \n                  s=c(2, 1, 2))\np4 <- ggtree(tree, layout=\"inward_circular\", xlim=c(150, 0)) +\n          geom_taxalink(data=dat, \n                         mapping=aes(taxa1=from, \n                                     taxa2=to, \n                                     color=type, \n                                     size=s), \n                         ncp=10,\n                         offset=0.15) + \n          geom_tiplab(hjust=1) +\n          scale_size_continuous(range=c(1,3))\nplot_list(p1, p2, p3, p4, ncol=2, tag_levels='A')"},{"path":"chapter5.html","id":"uncertainty-of-evolutionary-inference","chapter":"5 Phylogenetic Tree Annotation","heading":"5.2.4 Uncertainty of evolutionary inference","text":"geom_range() layer supports displaying interval (highest posterior density, confidence interval, range) horizontal bars tree nodes. center interval anchor corresponding node. center default mean value interval (Figure 5.7A). can set center estimated mean median value (Figure 5.7B), observed value. tree branch interval may scale, ggtree provides scale_x_range add second x-axis range (Figure 5.7C). Note x-axis disabled default theme, need enable want display (e.g., using theme_tree2()).\nFIGURE 5.7: Displaying uncertainty evolutionary inference. center (mean value range () estimated value (B)) anchored tree nodes. second x-axis used range scaling (C).\n","code":"\nfile <- system.file(\"extdata/MEGA7\", \"mtCDNA_timetree.nex\", package = \"treeio\")\nx <- read.mega(file)\np1 <- ggtree(x) + geom_range('reltime_0.95_CI', color='red', size=3, alpha=.3)\np2 <- ggtree(x) + geom_range('reltime_0.95_CI', color='red', size=3, \n                              alpha=.3, center='reltime')  \np3 <- p2 + scale_x_range() + theme_tree2()"},{"path":"chapter5.html","id":"tree-annotation-with-output-from-evolution-software","chapter":"5 Phylogenetic Tree Annotation","heading":"5.3 Tree Annotation with Output from Evolution Software","text":"","code":""},{"path":"chapter5.html","id":"tree-annotation-using-data-from-evolutionary-analysis-software","chapter":"5 Phylogenetic Tree Annotation","heading":"5.3.1 Tree annotation using data from evolutionary analysis software","text":"Chapter 1 introduced using treeio package (Wang et al., 2020) parse different tree formats commonly used software outputs obtain phylogeny-associated data. imported data, S4 objects, can visualized directly using ggtree. Figure 5.1 demonstrates tree annotated using information (species classification, duplication event, bootstrap value) stored NHX file. PHYLDOG pkg_revbayes output NHX files can parsed treeio visualized ggtree annotation using inference data.Furthermore, evolutionary data inference BEAST, MrBayes, RevBayes, dN/dS values inferred CODEML, ancestral sequences inferred HyPhy, CODEML, BASEML short read placement EPA PPLACER can used annotate tree directly.\nFIGURE 5.8: Annotating BEAST tree length_95%_HPD posterior. Branch length credible intervals (95% HPD) displayed red horizontal bars clade posterior values shown middle branches.\nFigure 5.8, tree visualized annotated posterior >0.9 demonstrated length uncertainty (95% Highest Posterior Density (HPD) interval).Ancestral sequences inferred HyPhy can parsed using treeio, whereas substitutions along tree branch automatically computed stored inside phylogenetic tree object (.e., S4 object). ggtree package can utilize information stored object annotate tree, demonstrated Figure 5.9.\nFIGURE 5.9: Annotating tree amino acid substitution determined ancestral sequences inferred HyPhy. Amino acid substitutions displayed middle branches.\nPAML’s BASEML CODEML can also used infer ancestral sequences, whereas CODEML can infer selection pressure. parsing information using treeio, ggtree can integrate information tree structure used annotation illustrated Figure 5.10.\nFIGURE 5.10: Annotating tree amino acid substitution dN/dS inferred CODEML. Branches rescaled colored dN/dS values, amino acid substitutions displayed middle branches.\ntree data parsed treeio can used visualize annotate phylogenetic tree using ggtree, also trees tree-like objects defined R community supported. ggtree plays unique role R ecosystem facilitate phylogenetic analysis, can easily integrated packages pipelines. details working tree-like structures, please refer Chapter 9. addition direct support tree objects, ggtree also allows users plot tree different types external data (see also Chapter 7 (Yu et al., 2018)).","code":"\nfile <- system.file(\"extdata/BEAST\", \"beast_mcc.tree\", package=\"treeio\")\nbeast <- read.beast(file)\nggtree(beast, aes(color=rate))  +\n    geom_range(range='length_0.95_HPD', color='red', alpha=.6, size=2) +\n    geom_nodelab(aes(x=branch, label=round(posterior, 2)), vjust=-.5, size=3) +\n    scale_color_continuous(low=\"darkgreen\", high=\"red\") +\n    theme(legend.position=c(.1, .8))\nnwk <- system.file(\"extdata/HYPHY\", \"labelledtree.tree\", \n                   package=\"treeio\")\nancseq <- system.file(\"extdata/HYPHY\", \"ancseq.nex\", \n                      package=\"treeio\")\ntipfas <- system.file(\"extdata\", \"pa.fas\", package=\"treeio\")\nhy <- read.hyphy(nwk, ancseq, tipfas)\nggtree(hy) + \n  geom_text(aes(x=branch, label=AA_subs), size=2, \n            vjust=-.3, color=\"firebrick\")\nrstfile <- system.file(\"extdata/PAML_Codeml\", \"rst\", \n                       package=\"treeio\")\nmlcfile <- system.file(\"extdata/PAML_Codeml\", \"mlc\", \n                       package=\"treeio\")\nml <- read.codeml(rstfile, mlcfile)\nggtree(ml, aes(color=dN_vs_dS), branch.length='dN_vs_dS') + \n  scale_color_continuous(name='dN/dS', limits=c(0, 1.5),\n                         oob=scales::squish,\n                         low='darkgreen', high='red') +\n  geom_text(aes(x=branch, label=AA_subs), \n            vjust=-.5, color='steelblue', size=2) +\n  theme_tree2(legend.position=c(.9, .3))"},{"path":"chapter5.html","id":"summary5","chapter":"5 Phylogenetic Tree Annotation","heading":"5.4 Summary","text":"ggtree package implements grammar graphics annotating phylogenetic trees. Users can use ggplot2 syntax combine different annotation layers produce complex tree annotation. familiar ggplot2, tree annotation high level customization can intuitive flexible using ggtree. ggtree can collect information treedata object link external data structure tree. enable us use phylogenetic tree data integration analysis comparative studies, greatly expand application phylogenetic tree different fields.","code":""},{"path":"chapter6.html","id":"chapter6","chapter":"6 Visual Exploration of Phylogenetic Trees","heading":"6 Visual Exploration of Phylogenetic Trees","text":"ggtree (Yu et al., 2017) supports many ways manipulating tree visually, including viewing selected clade explore large tree (Figure 6.1), taxa clustering (Figure 6.5), rotating clade tree (Figure 6.6B 6.8), zoom collapsing clades (Figure 6.3A 6.2), etc.. Details tree manipulation functions summarized Table 6.1.\nTABLE 6.1: Tree manipulation functions.\n","code":""},{"path":"chapter6.html","id":"viewing-selected-clade","chapter":"6 Visual Exploration of Phylogenetic Trees","heading":"6.1 Viewing Selected Clade","text":"clade monophyletic group contains single ancestor descendants. can visualize specifically selected clade via viewClade() function demonstrated Figure 6.1B. Another solution extract selected clade new tree object described session 2.5. functions developed help users explore large tree.\nFIGURE 6.1: Viewing selected clade tree. example tree used demonstrate ggtree supports exploring manipulating phylogenetic tree visually (). ggtree supports visualizing selected clade (B). clade can selected specifying node number determined recent common ancestor selected tips.\nfunctions, e.g., viewClade(), work clade accept parameter internal node number. get internal node number, users can use MRCA() function (Figure 6.1) providing two taxa names. function return node number input taxa’s recent common ancestor (MRCA). works tree graphic (.e., ggtree() output) object. tidytree package also provides MRCA() method extract information MRCA node (see details session 2.1.3).","code":"\nlibrary(ggtree)\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\ntree <- read.tree(nwk)\np <- ggtree(tree) + geom_tiplab()\nviewClade(p, MRCA(p, \"I\", \"L\"))"},{"path":"chapter6.html","id":"scale-clade","chapter":"6 Visual Exploration of Phylogenetic Trees","heading":"6.2 Scaling Selected Clade","text":"ggtree provides another option zoom (compress) selected clades via scaleClade() function. way, retain topology branch lengths compressed clades. helps save space highlight clades primary interest study.\nFIGURE 6.2: Scaling selected clade. Clades can zoomed (scale > 1) highlight zoomed save space.\nusers want emphasize important clades, can use scaleClade() function passing numeric value larger 1 scale parameter. selected clade zoomed . Users can also use groupClade() function assign selected clades different clade IDs can used color clades different colors shown Figure 6.2.","code":"\ntree2 <- groupClade(tree, c(17, 21))\np <- ggtree(tree2, aes(color=group)) + theme(legend.position='none') +\n  scale_color_manual(values=c(\"black\", \"firebrick\", \"steelblue\"))\nscaleClade(p, node=17, scale=.1) "},{"path":"chapter6.html","id":"collapsing-and-expanding-clade","chapter":"6 Visual Exploration of Phylogenetic Trees","heading":"6.3 Collapsing and Expanding Clade","text":"common practice prune collapse clades certain aspects tree can emphasized. ggtree supports collapsing selected clades using collapse() function shown Figure 6.3A.\nFIGURE 6.3: Collapsing selected clades expanding collapsed clades. Clades can selected collapse () collapsed clades can expanded back (B) necessary ggtree stored information species relationships. Green red symbols displayed tree indicate collapsed clades.\ntwo clades collapsed labeled green circle red square symbolic points. Collapsing common strategy collapse clades large displaying full primary interest study. ggtree, can expand (.e., uncollapse) collapsed branches back expand() function show details species relationships demonstrated Figure 6.3B.Triangles often used represent collapsed clade ggtree also supports . collapse() function provides “mode” parameter, default “none” selected clade collapsed “tip”. Users can specify mode “max” uses farthest tip (Figure 6.4A), “min” uses closest tip (Figure 6.4B), “mixed” uses (Figure 6.4C).can pass additional parameters set color transparency triangles (Figure 6.4D).can combine scaleClade collapse zoom /triangles (Figure 6.4E).\nFIGURE 6.4: Collapse clade triangle. ‘max’ takes position distant tip (). ‘min’ takes position closest tip (B). ‘mixed’ takes positions closest distant tips (C), looks like shape clade. Set color, fill, alpha triangles (D). Combine scaleClade zoom triangle save space (E).\n","code":"\np2 <- p %>% collapse(node=21) + \n  geom_point2(aes(subset=(node==21)), shape=21, size=5, fill='green')\np2 <- collapse(p2, node=23) + \n  geom_point2(aes(subset=(node==23)), shape=23, size=5, fill='red')\nprint(p2)\nexpand(p2, node=23) %>% expand(node=21)\np2 <- p + geom_tiplab()\nnode <- 21\ncollapse(p2, node, 'max') %>% expand(node)\ncollapse(p2, node, 'min') %>% expand(node)\ncollapse(p2, node, 'mixed') %>% expand(node)\ncollapse(p, 21, 'mixed', fill='steelblue', alpha=.4) %>% \n  collapse(23, 'mixed', fill='firebrick', color='blue')\nscaleClade(p, 23, .2) %>% collapse(23, 'min', fill=\"darkgreen\")  "},{"path":"chapter6.html","id":"group-taxa-vis","chapter":"6 Visual Exploration of Phylogenetic Trees","heading":"6.4 Grouping Taxa","text":"groupClade() function assigns branches nodes different clades different groups. accepts internal node vector internal nodes cluster clade/clades.Similarly, groupOTU() function assigns branches nodes different groups based user-specified groups operational taxonomic units (OTUs) necessarily within clade can monophyletic (clade), polyphyletic paraphyletic. accepts vector OTUs (taxa name) list OTUs trace back OTUs recent common ancestor (MRCA) cluster together demonstrated Figure 6.5.phylogenetic tree can annotated mapping different line types, sizes, colors, shapes branches nodes assigned different groups.\nFIGURE 6.5: Grouping OTUs. OTU clustering based relationships. Selected OTUs ancestors MRCA clustered together.\ncan group taxa tree level. following code produce identical figure Figure 6.5 (see details described session 2.2.3).","code":"\ndata(iris)\nrn <- paste0(iris[,5], \"_\", 1:150)\nrownames(iris) <- rn\nd_iris <- dist(iris[,-5], method=\"man\")\n\ntree_iris <- ape::bionj(d_iris)\ngrp <- list(setosa     = rn[1:50],\n            versicolor = rn[51:100],\n            virginica  = rn[101:150])\n\np_iris <- ggtree(tree_iris, layout = 'circular', branch.length='none')\ngroupOTU(p_iris, grp, 'Species') + aes(color=Species) +\n  theme(legend.position=\"right\")\ntree_iris <- groupOTU(tree_iris, grp, \"Species\")\nggtree(tree_iris, aes(color=Species), layout = 'circular', \n        branch.length = 'none') + \n  theme(legend.position=\"right\")"},{"path":"chapter6.html","id":"exploring-tree-structure","chapter":"6 Visual Exploration of Phylogenetic Trees","heading":"6.5 Exploring Tree Structure","text":"facilitate exploring tree structure, ggtree supports rotating selected clade 180 degrees using rotate() function (Figure 6.6B). Position immediate descendant clades internal node can exchanged via flip() function (Figure 6.6C).\nFIGURE 6.6: Exploring tree structure. clade (indicated dark green circle) tree () can rotated 180° (B) positions immediate descendant clades (colored blue red) can exchanged (C).\ntree manipulation functions working clades, ggtree also provides functions manipulate tree, including open_tree() transform tree either rectangular circular layout fan layout, rotate_tree() function rotate tree specific angle circular fan layouts, demonstrated Figures 6.7 6.8.\nFIGURE 6.7: Transforming tree fan layout. tree can transformed fan layout open_tree specific angle.\n\nFIGURE 6.8: Rotating tree. circular/fan layout tree can rotated specific angle.\nfollowing example rotates four selected clades (Figure 6.9). easy traverse internal nodes rotate one--one.\nFIGURE 6.9: Rotate selected clades. Four clades randomly selected rotate (indicated red symbol).\nFigure 6.10 demonstrates usage open_tree() different open angles.\nFIGURE 6.10: Open tree different angles.\nFigure 6.11 illustrates rotating tree different angles.\nFIGURE 6.11: Rotate tree different angles.\nInteractive tree manipulation also possible via identify() method (see details described Chapter 12).","code":"\np1 <- p + geom_point2(aes(subset=node==16), color='darkgreen', size=5)\np2 <- rotate(p1, 16)\nflip(p2, 17, 21)\np3 <- open_tree(p, 180) + geom_tiplab()\nprint(p3)\nrotate_tree(p3, 180)\nset.seed(2016-05-29)\nx <- rtree(50)\np <- ggtree(x) + geom_tiplab()\n\n## nn <- unique(reorder(x, 'postorder')$edge[,1]) \n## to traverse all the internal nodes\n\nnn <- sample(unique(reorder(x, 'postorder')$edge[,1]), 4)\n\npp <- lapply(nn, function(n) {\n    p <- rotate(p, n)\n    p + geom_point2(aes(subset=(node == n)), color='red', size=3)\n})\n\nplot_list(gglist=pp, tag_levels='A', nrow=1)\nset.seed(123)\ntr <- rtree(50)\np <- ggtree(tr, layout='circular') \nangles <- seq(0, 270, length.out=6)\n\npp <- lapply(angles, function(angle) {\n  open_tree(p, angle=angle) + ggtitle(paste(\"open angle:\", angle))\n})\n\nplot_list(gglist=pp, tag_levels='A', nrow=2)\nset.seed(123)\ntr <- rtree(50)\np <- ggtree(tr, layout='circular') \nangles <- seq(0, 270, length.out=6)\n\npp <- lapply(angles, function(angle) {\n  open_tree(p, angle=angle) + ggtitle(paste(\"open angle:\", angle))\n})\n\ng <- plot_list(gglist=pp, tag_levels='A', nrow=2)\nggplotify::as.ggplot(g, vjust=-.1,scale=1.1)"},{"path":"chapter6.html","id":"summary6","chapter":"6 Visual Exploration of Phylogenetic Trees","heading":"6.6 Summary","text":"good visualization tool can help users present data, also able help users explore data. Data exploration can allow users better understand data also help discover hidden patterns. ggtree provides set functions allow visually manipulating phylogenetic trees exploring tree structures associated data. Exploring data evolutionary context may help discover new systematic patterns generate new hypotheses.","code":""},{"path":"chapter7.html","id":"chapter7","chapter":"7 Plotting tree with data","heading":"7 Plotting tree with data","text":"Integrating user data annotate phylogenetic tree can done different\nlevels. treeio package (Wang et al., 2020) implements full_join() methods combine tree data phylogenetic tree object.\ntidytree package supports linking tree data phylogeny\nusing tidyverse verbs (see also Chapter 2).\nggtree package (Yu et al., 2018) supports mapping external data phylogeny \nvisualization annotation fly. Although feature linking external data overlapping among packages, different application scopes. example, addition treedata object, ggtree also supports several tree objects (see Chapter 9), including phylo4d, phyloseq, obkData designed contain domain-specific data. design objects consider supporting linking external data object (can done tree object level). can visualize trees objects using ggtree link external data visualization level (Yu et al., 2018).ggtree package provides two general methods mapping visualizing associated external data phylogenies. Method 1 allows external data mapped tree structure used visual characteristics tree data visualization. Method 2 plots data tree side--side using different geometric functions reordering data based tree structure. two methods integrate data phylogeny exploration comparison evolutionary biology context. ggtreeExtra provides better implementation Method 2 proposed ggtree (see also Chapter 10) works rectangular circular layouts (Xu, Dai, et al., 2021).","code":""},{"path":"chapter7.html","id":"attach-operator","chapter":"7 Plotting tree with data","heading":"7.1 Mapping Data to The tree Structure","text":"ggtree, implemented operator, %<+%, attach annotation data ggtree graphic object. data contains column “node” first column taxa labels can integrated using %<+% operator. Multiple datasets can attached progressively. data attached, information stored data serves numerical/categorical node attributes can directly used visualize tree scaling attributes different colors line sizes, labeling tree using original values attributes parsing math expression, emoji silhouette image. following example uses %<+% operator integrate taxon (df_tip_data) internal node (df_inode_data) information map data different colors shapes symbolic points labels (Figure 7.1). tip data contains imageURL links online figures species, can parsed used tip labels ggtree (see Chapter 8).\nFIGURE 7.1: Example attaching multiple datasets. External datasets including tip data (e.g., trophic habit body weight) node data (e.g., clade posterior vernacular name) attached ggtree graphic via %<+% operator data used annotate tree.\nAlthough data integrated %<+% operator ggtree tree visualization, data attached ggtree graphic object can converted treedata object contains tree attached data (see session 7.5).","code":"\nlibrary(ggimage)\nlibrary(ggtree)\nlibrary(TDbook)\n\n# load `tree_boots`, `df_tip_data`, and `df_inode_data` from 'TDbook'\np <- ggtree(tree_boots) %<+% df_tip_data + xlim(-.1, 4)\np2 <- p + geom_tiplab(offset = .6, hjust = .5) +\n    geom_tippoint(aes(shape = trophic_habit, color = trophic_habit, \n                size = mass_in_kg)) + \n    theme(legend.position = \"right\") + \n    scale_size_continuous(range = c(3, 10))\n\np2 %<+% df_inode_data + \n    geom_label(aes(label = vernacularName.y, fill = posterior)) + \n    scale_fill_gradientn(colors = RColorBrewer::brewer.pal(3, \"YlGnBu\"))"},{"path":"chapter7.html","id":"facet_plot","chapter":"7 Plotting tree with data","heading":"7.2 Aligning Graph to the Tree Based on the Tree Structure","text":"associating phylogenetic tree different types plot produced user’s data, ggtree provides geom_facet() layer facet_plot() function accept input data.frame geom layer draw input data. data displayed additional panel plot. geom_facet() (facet_plot) general solution linking graphic layer tree. function internally re-orders input data based tree structure visualizes data specific panel geometric layer. Users free visualize several panels plot different types data demonstrated Figure 9.4 use different geometric layers plot dataset (Figure 13.1) different datasets panel.geom_facet() designed work geom layers defined ggplot2 ggplot2-based packages. list geometric layers work seamlessly geom_facet() facet_plot() can found Table C.1. ggplot2 community keeps expanding geom layers implemented either ggplot2 extensions, geom_facet() facet_plot() gain power present data future. Note different geom layers can combined present data panel combinations different geom layers create possibility present complex data phylogeny (see also Figures 13.1 13.4). Users can progressively add multiple panels present compare different datasets evolutionary context (Figure 7.2). Detailed descriptions can found supplemental file (Yu et al., 2018).\nFIGURE 7.2: Example plotting SNP trait data. ‘location’ information attached tree used color tip symbols (Tree panel), datasets. SNP Trait data visualized dot chart (SNP panel) bar chart (Trait panel).\nCompanion functions adjust panel widths rename panel names described session 12.1. Removing panel name also possible example presented Figure 13.4. can also use aplot patchwork create composite plots described session 7.5.geom_facet() (facet_plot()) internally used ggplot2::facet_grid() works Cartesian coordinate system. align graph tree polar system (e.g., circular fan layouts), developed another Bioconductor package, ggtreeExtra. ggtreeExtra package provides geom_fruit() layer works similar geom_facet() (details described Chapter 10). geom_fruit() better implementation Method 2 proposed (Yu et al., 2018).","code":"\nlibrary(ggtree)\nlibrary(TDbook)\n\n## load `tree_nwk`, `df_info`, `df_alleles`, and `df_bar_data` from 'TDbook'\ntree <- tree_nwk\nsnps <- df_alleles\nsnps_strainCols <- snps[1,] \nsnps<-snps[-1,] # drop strain names\ncolnames(snps) <- snps_strainCols\n\ngapChar <- \"?\"\nsnp <- t(snps)\nlsnp <- apply(snp, 1, function(x) {\n        x != snp[1,] & x != gapChar & snp[1,] != gapChar\n    })\nlsnp <- as.data.frame(lsnp)\nlsnp$pos <- as.numeric(rownames(lsnp))\nlsnp <- tidyr::gather(lsnp, name, value, -pos)\nsnp_data <- lsnp[lsnp$value, c(\"name\", \"pos\")]\n\n## visualize the tree \np <- ggtree(tree) \n\n## attach the sampling information data set \n## and add symbols colored by location\np <- p %<+% df_info + geom_tippoint(aes(color=location))\n\n## visualize SNP and Trait data using dot and bar charts,\n## and align them based on tree structure\np + geom_facet(panel = \"SNP\", data = snp_data, geom = geom_point, \n               mapping=aes(x = pos, color = location), shape = '|') +\n    geom_facet(panel = \"Trait\", data = df_bar_data, geom = geom_col, \n                aes(x = dummy_bar_value, color = location, \n                fill = location), orientation = 'y', width = .6) +\n    theme_tree2(legend.position=c(.05, .85))"},{"path":"chapter7.html","id":"gheatmap","chapter":"7 Plotting tree with data","heading":"7.3 Visualize a Tree with an Associated Matrix","text":"gheatmap() function designed visualize phylogenetic tree heatmap associated matrix (either numerical categorical). geom_facet() layer general solution plotting data tree, including heatmap. gheatmap() function specifically designed plotting heatmap tree provides shortcut handling column labels color palettes. Another difference geom_facet() supports rectangular slanted tree layouts, gheatmap() supports rectangular, slanted, circular (Figure 7.4) layouts.following example, visualized tree H3 influenza viruses associated genotypes (Figure 7.3A).width parameter control width heatmap. supports another parameter offset controlling distance tree heatmap, allocating space tip labels.timescaled tree, example, ’s common use x-axis using theme_tree2. solution, heatmap just another layer change x-axis. overcome issue, implemented scale_x_ggtree() set x-axis reasonably (Figure 7.3B).\nFIGURE 7.3: Example plotting matrix gheatmap(). H3 influenza tree genotype table visualized heatmap (). Tips aligned tailored x-axis divergence times (tree) genomic segments (heatmap) (B).\n","code":"\nbeast_file <- system.file(\"examples/MCC_FluA_H3.tree\", package=\"ggtree\")\nbeast_tree <- read.beast(beast_file)\n\ngenotype_file <- system.file(\"examples/Genotype.txt\", package=\"ggtree\")\ngenotype <- read.table(genotype_file, sep=\"\\t\", stringsAsFactor=F)\ncolnames(genotype) <- sub(\"\\\\.$\", \"\", colnames(genotype))\np <- ggtree(beast_tree, mrsd=\"2013-01-01\") + \n    geom_treescale(x=2008, y=1, offset=2) + \n    geom_tiplab(size=2)\ngheatmap(p, genotype, offset=5, width=0.5, font.size=3, \n        colnames_angle=-45, hjust=0) +\n    scale_fill_manual(breaks=c(\"HuH3N2\", \"pdm\", \"trig\"), \n        values=c(\"steelblue\", \"firebrick\", \"darkgreen\"), name=\"genotype\")\np <- ggtree(beast_tree, mrsd=\"2013-01-01\") + \n    geom_tiplab(size=2, align=TRUE, linesize=.5) + \n    theme_tree2()\ngheatmap(p, genotype, offset=8, width=0.6, \n        colnames=FALSE, legend_title=\"genotype\") +\n    scale_x_ggtree() + \n    scale_y_continuous(expand=c(0, 0.3))"},{"path":"chapter7.html","id":"gheatmap-ggnewscale","chapter":"7 Plotting tree with data","heading":"7.3.1 Visualize a tree with multiple associated matrices","text":"course, can use multiple gheatmap() function calls align several associated matrices tree. However, ggplot2 doesn’t allow us use multiple fill scales11.solve issue, can use ggnewscale package create new fill scales. example using ggnewscale gheatmap().\nFIGURE 7.4: Example plotting matrix gheatmap(). H3 influenza tree genotype table visualized heatmap (). Tips aligned tailored x-axis divergence times (tree) genomic segments (heatmap) (B).\n","code":"\nnwk <- system.file(\"extdata\", \"sample.nwk\", package=\"treeio\")\n\ntree <- read.tree(nwk)\ncirc <- ggtree(tree, layout = \"circular\")\n\ndf <- data.frame(first=c(\"a\", \"b\", \"a\", \"c\", \"d\", \"d\", \"a\", \n                        \"b\", \"e\", \"e\", \"f\", \"c\", \"f\"),\n                 second= c(\"z\", \"z\", \"z\", \"z\", \"y\", \"y\", \n                        \"y\", \"y\", \"x\", \"x\", \"x\", \"a\", \"a\"))\nrownames(df) <- tree$tip.label\n\ndf2 <- as.data.frame(matrix(rnorm(39), ncol=3))\nrownames(df2) <- tree$tip.label\ncolnames(df2) <- LETTERS[1:3]\n\n\np1 <- gheatmap(circ, df, offset=.8, width=.2,\n               colnames_angle=95, colnames_offset_y = .25) +\n    scale_fill_viridis_d(option=\"D\", name=\"discrete\\nvalue\")\n\n\nlibrary(ggnewscale)\np2 <- p1 + new_scale_fill()\ngheatmap(p2, df2, offset=15, width=.3,\n         colnames_angle=90, colnames_offset_y = .25) +\n    scale_fill_viridis_c(option=\"A\", name=\"continuous\\nvalue\")"},{"path":"chapter7.html","id":"msaplot","chapter":"7 Plotting tree with data","heading":"7.4 Visualize a Tree with Multiple Sequence Alignments","text":"msaplot() accepts tree (output ggtree()) fasta file, can visualize tree sequence alignment. can specify width (relative tree) alignment adjust relative position offset, similar gheatmap() function (Figure 7.5A)..specific slice alignment can also displayed specifying window parameter (Figure 7.5B)..\nFIGURE 7.5: Example plotting multiple sequence alignments tree. Whole MSA sequences visualized tree rectangular layout (). Circular layout slice alignment window (B).\nbetter support visualizing multiple sequence alignments tree associated data, developed ggmsa package ability label sequences color sequences different color schemes (Yu, 2020). ggmsa() output compatible geom_facet() ggtreeExtra::geom_fruit() can used visualize tree, multiple sequence alignments, different types associated data explore underlying linkages/associations.","code":"\nlibrary(TDbook)\n\n# load `tree_seq_nwk` and `AA_sequence` from 'TDbook'\np <- ggtree(tree_seq_nwk) + geom_tiplab(size=3)\nmsaplot(p, AA_sequence, offset=3, width=2)\np <- ggtree(tree_seq_nwk, layout='circular') + \n    geom_tiplab(offset=4, align=TRUE) + xlim(NA, 12)\nmsaplot(p, AA_sequence, window=c(120, 200))"},{"path":"chapter7.html","id":"composite_plot","chapter":"7 Plotting tree with data","heading":"7.5 Composite Plots","text":"addition aligning graphs tree using geom_facet() ggtreeExtra::geom_fruit() special cases using gheatmap() msaplot() functions, users can use cowplot, patchwork, gtable12 packages create composite plots. However, extra efforts need done make sure plots aligned properly. ggtree::get_taxa_name() function quite useful users re-order data based tree structure. remove obstacle, created R package aplot can re-order internal data ggplot object create composite plots align properly tree.following example, tree two associated datasets.align using cowplot, composite plots aligned properly anticipated (Figure 7.6A).Using aplot, dirty work us subplots aligned properly demonstrated Figure 7.6B.\nFIGURE 7.6: Example aligning tree data side--side create composite plot. cowplot` just places subplots together (), aplot extra work make sure tree-associated subplots properly ordered according tree structure (B). Note: ‘’ category bar plot matched tree removed.\n","code":"\nlibrary(ggplot2)\nlibrary(ggtree)\n\nset.seed(2019-10-31)\ntr <- rtree(10)\n\nd1 <- data.frame(\n    # only some labels match\n    label = c(tr$tip.label[sample(5, 5)], \"A\"),\n    value = sample(1:6, 6))\n\nd2 <- data.frame(\n    label = rep(tr$tip.label, 5),\n    category = rep(LETTERS[1:5], each=10),\n    value = rnorm(50, 0, 3)) \n\ng <- ggtree(tr) + geom_tiplab(align=TRUE) + hexpand(.01)\n\np1 <- ggplot(d1, aes(label, value)) + geom_col(aes(fill=label)) + \n    geom_text(aes(label=label, y= value+.1)) +\n    coord_flip() + theme_tree2() + theme(legend.position='none')\n \np2 <- ggplot(d2, aes(x=category, y=label)) + \n    geom_tile(aes(fill=value)) + scale_fill_viridis_c() + \n    theme_minimal() + xlab(NULL) + ylab(NULL)\ncowplot::plot_grid(g, p2, p1, ncol=3) \nlibrary(aplot)\np2 %>% insert_left(g) %>% insert_right(p1, width=.5) "},{"path":"chapter7.html","id":"summary7","chapter":"7 Plotting tree with data","heading":"7.6 Summary","text":"Although many software packages support visualizing phylogenetic trees, plotting tree data often missing limited support. packages define S4 classes store phylogenetic tree domain-specific data, OutbreakTools (Jombart et al., 2014) defined obkData storing tree epidemiology data phyloseq (McMurdie & Holmes, 2013) defines phyloseq storing tree microbiome data. packages capable presenting data stored object tree. However, associated data supported. example, species abundance stored phyloseq object supported visualized using phyloseq package. packages provide utilities integrate external data tree visualization. None packages support visualizing external data aligning plot tree based tree structure.ggtree package provides two general solutions integrating data. Method 1, %<+% operator, can integrate external internal node data map data visual characteristic visualize tree datasets used geom_facet() ggtreeExtra::geom_fruit(). Method 2, geom_facet layer ggtreeExtra::geom_fruit(), restriction input data long geom function available plot data (e.g., species abundance displayed geom_density_ridges demonstrated Figure 9.4). Users free combine different panels combine different geom layers panel (Figure 13.1).ggtree package many unique features found implementations (Yu et al., 2018):Integrating node/edge data tree can mapped visual characteristics tree datasets (Figure 7.1).Capable parsing expressions (math symbols text formatting), emoji, image files (Chapter 8).pre-definition input data types data plotted geom_facet() (Table C.1).Combining different geom functions visualize associated data supported (Figure 13.1).Visualizing different datasets panel supported.Data integrated %<+% can used geom_facet() layer.Able add annotations specific layers.Modular design separating tree visualization, data integration (Method 1), graph alignment (Method 2).Modular design unique feature ggtree stand packages. tree can visualized data stored tree object external data linked %<+% operator, fully annotated multiple layers annotations (Figures 7.1 13.1), passing geom_facet() layer. geom_facet() layer can called progressively add multiple panels multiple layers panels (Figure 13.1). creates possibility plotting full annotated tree complex data panels contain multiple graphic layers.ggtree package fits R ecosystem extends abilities integrate present data trees existing phylogenetic packages. demonstrated Figure 9.4, can plot species abundance distributions phyloseq object. easily done without ggtree. ggtree, able attach additional data tree objects using %<+% operator align graphs tree using geom_facet() layer. Integrating ggtree existing workflows extend abilities broaden applications present phylogeny-associated data, especially comparative studies.","code":""},{"path":"chapter8.html","id":"chapter8","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8 Annotating Tree with Silhouette Images and Sub-plots","text":"","code":""},{"path":"chapter8.html","id":"ggimage","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.1 Annotating Tree with Images","text":"usually use text label taxa, .e. displaying taxa names. text image file name (either local remote), ggtree can read image display actual image label taxa (Figure 8.1). geom_tiplab() geom_nodelab() capable render silhouette images supports -house developed package, ggimage.Online tools iTOL (Letunic & Bork, 2007) EvolView (et al., 2016) support displaying subplots phylogenetic tree. However, bar pie charts supported tools. Users may want visualize node-associated data visualization methods, violin plot (Grubaugh et al., 2017), venn diagram (Lott et al., 2015), sequence logo, etc., display tree. ggtree, kinds subplots supported, can export subplots image files use label corresponding nodes tree.\nFIGURE 8.1: Labelling taxa images. Users need specify geom = \"image\" map image file names onto image aesthetics.\n","code":"\nlibrary(ggimage)\nlibrary(ggtree)\n\nnwk <- paste0(\"((((bufonidae, dendrobatidae), ceratophryidae),\",\n          \"(centrolenidae, leptodactylidae)), hylidae);\")\n\nimgdir <- system.file(\"extdata/frogs\", package = \"TDbook\")\n\nx = read.tree(text = nwk)\nggtree(x) + xlim(NA, 7) + ylim(NA, 6.2) +\n    geom_tiplab(aes(image=paste0(imgdir, '/', label, '.jpg')), \n                geom=\"image\", offset=2, align=2, size=.2)  + \n    geom_tiplab(geom='label', offset=1, hjust=.5) + \n    geom_image(x=.8, y=5.5, image=paste0(imgdir, \"/frog.jpg\"), size=.2)"},{"path":"chapter8.html","id":"phylopic","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.2 Annotating Tree with Phylopic","text":"Phylopic contains 3200 silhouettes covers almost life forms. ggtree package supports using phylopic13 annotate tree setting geom=\"phylopic\" mapping phylopic UID image aesthetics. ggimage package supports querying phylopic UID scientific name, handy annotating tree phylopic. following example, tip labels used query phylopic UID, phylopic images used label tree another layer tip labels. importantly, can color resize images using numerical/categorical variables, values body mass used encode color images (Figure 8.2).\nFIGURE 8.2: Labelling taxa phylopic images. ggtree automatically download phylopic figures querying provided UID. figures can colored using numerical categorical values.\n","code":"\nlibrary(ggtree)\nnewick <- paste0(\"((Pongo_abelii,(Gorilla_gorilla_gorilla,(Pan_paniscus,\",\n          \"Pan_troglodytes)Pan,Homo_sapiens)Homininae)Hominidae,\",\n          \"Nomascus_leucogenys)Hominoidea;\")\n\ntree <- read.tree(text=newick)\n\nd <- ggimage::phylopic_uid(tree$tip.label)\nd$body_mass <- c(52, 114, 47, 45, 58, 6)\n\np <- ggtree(tree) %<+% d + \n  geom_tiplab(aes(image=uid, colour=body_mass), geom=\"phylopic\", offset=2.5) +\n  geom_tiplab(aes(label=label), offset = .2) + xlim(NA, 7) +\n  scale_color_viridis_c()"},{"path":"chapter8.html","id":"subplots","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.3 Annotating Tree with Sub-plots","text":"ggtree package provides layer, geom_inset(), adding subplots phylogenetic tree. input named list ggplot graphic objects (can kind chart). objects named node numbers. Users can also use ggplotify convert plots generated functions (even implemented base graphics) ggplot objects, can used geom_inset() layer. facilitate adding bar pie charts (e.g., summarized stats results ancestral reconstruction) phylogenetic tree, ggtree provides nodepie() nodebar() functions create list pie bar charts.","code":""},{"path":"chapter8.html","id":"annotate-with-bar-charts","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.3.1 Annotate with bar charts","text":"example uses ape::ace() function estimate ancestral character states. likelihoods stats visualized stacked bar charts overlayed onto internal nodes tree using geom_inset() layer (Figure 8.3A).x position can one ‘node’ ‘branch’ can adjusted parameters, hjust vjust, horizontal vertical adjustment, respectively. width height parameters restrict size inset plots.","code":"\nlibrary(phytools)\ndata(anoletree)\nx <- getStates(anoletree,\"tips\")\ntree <- anoletree\n\ncols <- setNames(palette()[1:length(unique(x))],sort(unique(x)))\nfitER <- ape::ace(x,tree,model=\"ER\",type=\"discrete\")\nancstats <- as.data.frame(fitER$lik.anc)\nancstats$node <- 1:tree$Nnode+Ntip(tree)\n\n## cols parameter indicate which columns store stats\nbars <- nodebar(ancstats, cols=1:6)\nbars <- lapply(bars, function(g) g+scale_fill_manual(values = cols))\n\ntree2 <- full_join(tree, data.frame(label = names(x), stat = x ), by = 'label')\np <- ggtree(tree2) + geom_tiplab() +\n    geom_tippoint(aes(color = stat)) + \n    scale_color_manual(values = cols) +\n    theme(legend.position = \"right\") + \n    xlim(NA, 8)\np1 <- p + geom_inset(bars, width = .08, height = .05, x = \"branch\") "},{"path":"chapter8.html","id":"annotate-with-pie-charts","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.3.2 Annotate with pie charts","text":"Similarly, users can use nodepie() function generate list pie charts place charts annotate corresponding nodes (Figure 8.3B). nodebar() nodepie() accept parameter alpha allow transparency.\nFIGURE 8.3: Annotate internal nodes bar pie charts. Using bar charts () pie charts (B) display summary statistics internal nodes.\n","code":"\npies <- nodepie(ancstats, cols = 1:6)\npies <- lapply(pies, function(g) g+scale_fill_manual(values = cols))\np2 <- p + geom_inset(pies, width = .1, height = .1) \n\nplot_list(p1, p2, guides='collect', tag_levels='A')"},{"path":"chapter8.html","id":"annotate-with-mixed-types-of-charts","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.3.3 Annotate with mixed types of charts","text":"geom_inset() layer accepts list ‘ggplot’ graphic objects input objects restricted pie bar charts. can kind charts hybrid charts. geom_inset() useful display ancestral stats, also applicable visualize different types data associated selected nodes tree. , use mixture pie bar charts annotate tree example (Figure 8.4).\nFIGURE 8.4: Annotate internal nodes different types subplots.\n","code":"\npies_and_bars <- pies\ni <- sample(length(pies), 20)\npies_and_bars[i] <- bars[i]\np + geom_inset(pies_and_bars, width=.08, height=.05)"},{"path":"chapter8.html","id":"phylomoji","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.4 Have Fun with Phylomoji","text":"Phylomoji phylogenetic tree emoji. fun14 useful education evolution concept. ggtree supports producing phylomoji since 201515. , use ggtree recreate following phylomoji figure16 (Figure 8.5):\nFIGURE 8.5: Parsing label emoji. Text (e.g., node tip labels) can parsed emoji.\nNote output may depend emoji fonts installed system17.ggtree, easy generate phylomoji. emoji treated text, like ‘abc’. can use emojis label taxa, clade, color rotate emoji given color angle. functionality internally supported emojifont package.","code":"\nlibrary(ggplot2)\nlibrary(ggtree)\n\ntt = '((snail,mushroom),(((sunflower,evergreen_tree),leaves),green_salad));'\ntree = read.tree(text = tt)\nd <- data.frame(label = c('snail','mushroom', 'sunflower',\n                          'evergreen_tree','leaves', 'green_salad'),\n                group = c('animal', 'fungi', 'flowering plant',\n                          'conifers', 'ferns', 'mosses'))\n\np <- ggtree(tree, linetype = \"dashed\", size=1, color='firebrick') %<+% d + \n  xlim(0, 4.5) + ylim(0.5, 6.5) +\n  geom_tiplab(parse=\"emoji\", size=15, vjust=.25) +\n  geom_tiplab(aes(label = group), geom=\"label\", x=3.5, hjust=1)"},{"path":"chapter8.html","id":"emoji-in-circularfan-layout-tree","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.4.1 Emoji in circular/fan layout tree","text":"also works circular fan layouts demonstrated Figure 8.6.\nFIGURE 8.6: Phylomoji cirular fan layouts.\nAnother example using ggtree emojifont produce phylogeny plant emojis can found scientific article (Escudero & Wendel, 2020).","code":"\np <- ggtree(tree, layout = \"circular\", size=1) +  \n  geom_tiplab(parse=\"emoji\", size=10, vjust=.25)\nprint(p)\n\n## fan layout  \np2 <- open_tree(p, angle=200) \nprint(p2)\n\np2 %>% rotate_tree(-90)"},{"path":"chapter8.html","id":"emoji-to-label-clades","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.4.2 Emoji to label clades","text":"Parsing clade labels emojis also supported geom_cladelab() layer. example, phylogenetic tree influenza viruses, can use emojis label clades represent host species similar Figure 8.7.\nFIGURE 8.7: Emoji label clades.\n","code":"\nset.seed(123)\ntr <- rtree(30)\n\ndat <- data.frame(\n           node = c(41, 53, 48),\n           name = c(\"chicken\", \"duck\", \"family\")\n       )\n\np <- ggtree(tr) + \n     xlim(NA, 5.2) +\n     geom_cladelab(\n         data = dat,\n         mapping = aes(\n             node = node, \n             label = name, \n             color = name\n         ),\n         parse = \"emoji\",\n         fontsize = 12,\n         align = TRUE,\n         show.legend = FALSE\n     ) +\n     scale_color_manual(\n         values = c(\n             chicken=\"firebrick\", \n             duck=\"steelblue\", \n             family = \"darkkhaki\"\n         )\n     )\np"},{"path":"chapter8.html","id":"apple-color-emoji","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.4.3 Apple Color Emoji","text":"Although R’s graphical devices don’t support AppleColorEmoji font MacOS, ’s still possible use . can export plot svg file render Safari (Figure 8.8).\nFIGURE 8.8: Use Apple Color Emoji ggtree. tip labels parsed emojis using AppleColorEmoji font Safari.\n","code":"\nlibrary(ggtree)\ntree_text <- paste0(\"(((((cow, (whale, dolphin)), (pig2, boar)),\",\n                    \"camel), fish), seedling);\")\nx <- read.tree(text=tree_text)\nlibrary(ggimage)\np <-  ggtree(x, size=2) + geom_tiplab(size=20, parse='emoji') +\n    xlim(NA, 7) + ylim(NA, 8.5) \n\nsvglite::svglite(\"emoji.svg\", width = 10, height = 7)\nprint(p)\ndev.off()\n\n# or use `grid.export()` \n# ps = gridSVG::grid.export(\"emoji.svg\", addClass=T)"},{"path":"chapter8.html","id":"phylomoji-in-ascii-art","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.4.4 Phylomoji in ASCII art","text":"Producing phylomoji ASCII art also possible. Users can refer Appendix D details.","code":""},{"path":"chapter8.html","id":"summary8","chapter":"8 Annotating Tree with Silhouette Images and Sub-plots","heading":"8.5 Summary","text":"ggtree supports parsing labels, including tip labels, internal node labels, clade labels, images, math expression, emoji, case labels can parsed image file names, plotmath expression, emoji names, respectively. can fun, ’s also useful scientific research. use images phylogenetic trees can help present species-related characteristics, including morphological, anatomical, even macromolecular structures. Moreover, ggtree supports summarizing statistical inferences (e.g., biogeographic range reconstruction posterior distribution) associated data nodes subplots displayed phylogenetic tree.","code":""},{"path":"chapter9.html","id":"chapter9","chapter":"9 ggtree for Other Tree-like Objects","heading":"9 ggtree for Other Tree-like Objects","text":"","code":""},{"path":"chapter9.html","id":"ggtree-for-phylogenetic-tree-objects","chapter":"9 ggtree for Other Tree-like Objects","heading":"9.1 ggtree for Phylogenetic Tree Objects","text":"treeio packages (Wang et al., 2020) allow parsing evolutionary inferences several software outputs linking external data tree structure. serves infrastructure bring evolutionary data R community. ggtree package (Yu et al., 2017) works seamlessly treeio visualize tree-associated data annotate tree. ggtree package general tool tree visualization annotation fits ecosystem R packages. S3/S4 tree objects defined R packages also supported ggtree, including phylo (session 4.2), multiPhylo (session 4.4), phylo4, phylo4d, phyloseq, obkData. ggtree, able generate complex tree graphs possible easy packages. example, visualization phyloseq object Figure 9.4 supported phyloseq package. ggtree package also extends possibility linking external data tree objects (Yu et al., 2018).","code":""},{"path":"chapter9.html","id":"phylobase","chapter":"9 ggtree for Other Tree-like Objects","heading":"9.1.1 The phylo4 and phylo4d objects","text":"phylo4 phylo4d defined phylobase package. phylo4 object S4 version phylo, phylo4d extends phylo4 data frame contains trait data. phylobase package provides plot() method, internally called treePlot() function, display tree data. However, restrictions plot() method, can plot numeric values tree-associated data bubbles generate figure legend. Phylobase doesn’t implement visualization method display categorical values. Using associated data visual characteristics color, size, shape, also supported. Although possible color tree using associated data, requires users extract data map color vector manually followed passing color vector plot method. tedious error-prone since order color vector needs consistent edge list stored object.ggtree package supports phylo4d object associated data stored phylo4d object can used directly annotate tree (Figure 9.1).\nFIGURE 9.1: Visualizing phylo4d data using ggtree. Reproduce output plot() method provided phylobase package (). Visualize trait data heatmap supported phylobase package (B).\n","code":"\nlibrary(phylobase)\ndata(geospiza_raw)\ng1 <- as(geospiza_raw$tree, \"phylo4\")\ng2 <- phylo4d(g1, geospiza_raw$data, missing.data=\"warn\")\n\nd1 <- data.frame(x = seq(1.1, 2, length.out = 5),\n                lab = names(geospiza_raw$data))\n\np1 <- ggtree(g2) + geom_tippoint(aes(size = wingL), x = d1$x[1], shape = 1) + \n    geom_tippoint(aes(size = tarsusL), x = d1$x[2], shape = 1) + \n    geom_tippoint(aes(size = culmenL), x = d1$x[3], shape = 1) + \n    geom_tippoint(aes(size = beakD),   x = d1$x[4], shape = 1) + \n    geom_tippoint(aes(size = gonysW),  x = d1$x[5], shape = 1) + \n    scale_size_continuous(range = c(3,12), name=\"\") + \n    geom_text(aes(x = x, y = 0, label = lab), data = d1, angle = 45) +\n    geom_tiplab(offset = 1.3) + xlim(0, 3) +\n    theme(legend.position = c(.1, .75))  \n\n## users can use `as.treedata(g2)` to convert `g2` to a `treedata` object\n## and use `get_tree_data()` function to extract the associated data \n\np2 <- gheatmap(ggtree(g1), data=geospiza_raw$data, colnames_angle=45) + \n  geom_tiplab(offset=1) + hexpand(.2) + theme(legend.position = c(.1, .75))\n\naplot::plot_list(p1, p2, ncol=2, tag_levels='A')    "},{"path":"chapter9.html","id":"phylog","chapter":"9 ggtree for Other Tree-like Objects","heading":"9.1.2 The phylog object","text":"phylog defined ade4 package. package designed analyzing ecological data provides newick2phylog(), hclust2phylog(), taxo2phylog() functions create phylogeny Newick string, hierarchical clustering result, taxonomy (see also MicrobiotaProcess package described Chapter 11). phylog object also supported ggtree demonstrated Figure 9.2.\nFIGURE 9.2: Visualizing phylog tree object.\n","code":"\nlibrary(ade4)\ndata(taxo.eg)\ntax <- as.taxo(taxo.eg[[1]])\nnames(tax) <- c(\"genus\", \"family\", \"order\")\nprint(tax)##       genus family order\n## esp3     g1   fam1  ORD1\n## esp1     g1   fam1  ORD1\n## esp2     g1   fam1  ORD1\n## esp4     g1   fam1  ORD1\n## esp5     g1   fam1  ORD1\n## esp6     g1   fam1  ORD1\n## esp7     g1   fam1  ORD1\n## esp8     g2   fam2  ORD2\n## esp9     g3   fam2  ORD2\n## esp10    g4   fam3  ORD2\n## esp11    g5   fam3  ORD2\n## esp12    g6   fam4  ORD2\n## esp13    g7   fam4  ORD2\n## esp14    g8   fam5  ORD2\n## esp15    g8   fam5  ORD2\ntax.phy <- taxo2phylog(as.taxo(taxo.eg[[1]]))\nprint(tax.phy)## Phylogenetic tree with 15 leaves and 16 nodes\n## $class: phylog\n## $call: taxo2phylog(taxo = as.taxo(taxo.eg[[1]]))\n## $tre: ((((esp3,esp1,esp2,esp4,e...15)l1g8)l2fam5)l3ORD2)Root; \n## \n##         class   length\n## $leaves numeric 15    \n## $nodes  numeric 16    \n## $parts  list    16    \n## $paths  list    31    \n## $droot  numeric 31    \n##         content                                     \n## $leaves length of the first preceeding adjacent edge\n## $nodes  length of the first preceeding adjacent edge\n## $parts  subsets of descendant nodes                 \n## $paths  path from root to node or leave             \n## $droot  distance to root\nggtree(tax.phy) + geom_tiplab() + \n  geom_nodelab(geom='label') + hexpand(.05)"},{"path":"chapter9.html","id":"phyloseq","chapter":"9 ggtree for Other Tree-like Objects","heading":"9.1.3 The phyloseq object","text":"phyloseq class defined phyloseq package designed storing microbiome data, including phylogenetic tree, associated sample data, taxonomy assignment. can import data popular pipelines, QIIME (Kuczynski et al., 2011), mothur (Schloss et al., 2009), dada2 (Callahan et al., 2016) PyroTagger (Kunin & Hugenholtz, 2010), etc. ggtree supports visualizing phylogenetic tree stored phyloseq object related data can used annotate tree demonstrated Figures 9.3 9.4.\nFIGURE 9.3: Visualizing phyloseq tree object. example mimics output plot_tree() function provided phyloseq package.\nFigure 9.3 reproduces output phyloseq::plot_tree() function. Users phyloseq find ggtree useful visualizing microbiome data annotation since ggtree supports high-level annotation using grammar graphics can add tree data layers available phyloseq.\nFIGURE 9.4: Phylogenetic tree OTU abundance densities. Tips colored Phylum, corresponding abundances across different samples visualized density ridgelines sorted according tree structure.\nexample uses microbiome data provided phyloseq package density ridgeline employed visualize species abundance data. geom_facet() layer automatically re-arranges abundance data according tree structure, visualizes data using specified geom function, .e., geom_density_ridges(), aligns density curves tree demonstrated Figure 9.4. Note data stored phyloseq object visible ggtree() can used directly tree visualization (Phylum used color tips density ridgelines example). source code example firstly published supplemental file (Yu et al., 2018).","code":"\nlibrary(phyloseq)\nlibrary(scales)\n\ndata(GlobalPatterns)\nGP <- prune_taxa(taxa_sums(GlobalPatterns) > 0, GlobalPatterns)\nGP.chl <- subset_taxa(GP, Phylum==\"Chlamydiae\")\n\nggtree(GP.chl) + \n  geom_nodelab(aes(label=label), hjust=-.05, size=3.5) +\n\n  geom_point(aes(x=x+hjust, color=SampleType, shape=Family, \n                size=Abundance), na.rm=TRUE) +\n  geom_tiplab(aes(label=Genus), hjust=-.35) +                \n  scale_size_continuous(trans=log_trans(5)) +\n  theme(legend.position=\"right\") + hexpand(.4)\nlibrary(ggridges)\n\ndata(\"GlobalPatterns\")\nGP <- GlobalPatterns\nGP <- prune_taxa(taxa_sums(GP) > 600, GP)\nsample_data(GP)$human <- get_variable(GP, \"SampleType\") %in% \n  c(\"Feces\", \"Skin\") \n\nmergedGP <- merge_samples(GP, \"SampleType\")\nmergedGP <- rarefy_even_depth(mergedGP,rngseed=394582)\nmergedGP <- tax_glom(mergedGP,\"Order\") \n\nmelt_simple <- psmelt(mergedGP) %>% \n  filter(Abundance < 120) %>% \n  select(OTU, val=Abundance)\n\nggtree(mergedGP) + \n  geom_tippoint(aes(color=Phylum), size=1.5) +\n  geom_facet(mapping = aes(x=val,group=label, \n                           fill=Phylum),\n            data = melt_simple, \n            geom = geom_density_ridges,\n            panel=\"Abundance\",  \n            color='grey80', lwd=.3) +\n  guides(color = guide_legend(ncol=1))          "},{"path":"chapter9.html","id":"dendrogram","chapter":"9 ggtree for Other Tree-like Objects","heading":"9.2 ggtree for Dendrograms","text":"dendrogram tree diagram display hierarchical clustering classification/regression trees. R, can calculate hierarchical clustering using function hclust().hclust object describes tree produced clustering process. can converted dendrogram object, stores tree deeply-nested lists.ggtree package supports hierarchical clustering objects defined R community, including hclust dendrogram well agnes, diana, twins defined cluster package, pvclust object defined pvclust package (Table C.2). Users can use ggtree(object) display tree structure, use layers utilities customize graph course, add annotations tree.ggtree provides layout_dendrogram() layout tree top-, theme_dendrogram() display tree height (similar theme_tree2() phylogenetic tree) demonstrated Figure 9.5 (see also example (Yu, 2020)).\nFIGURE 9.5: Visualizing dendrogram. Use cutree() split tree several groups groupClade() assign grouping information. tree displayed classic top-layout branches colored grouping information tips colored labeled number cylinders.\n","code":"\nhc <- hclust(dist(mtcars))\nhc## \n## Call:\n## hclust(d = dist(mtcars))\n## \n## Cluster method   : complete \n## Distance         : euclidean \n## Number of objects: 32\nden <- as.dendrogram(hc)\nden## 'dendrogram' with 2 branches and 32 members total, at height 425.3\nclus <- cutree(hc, 4)\ng <- split(names(clus), clus)\n\np <- ggtree(hc, linetype='dashed')\nclades <- sapply(g, function(n) MRCA(p, n))\n\np <- groupClade(p, clades, group_name='subtree') + aes(color=subtree)\n\nd <- data.frame(label = names(clus), \n                  cyl = mtcars[names(clus), \"cyl\"])\n\np %<+% d + \n  layout_dendrogram() + \n  geom_tippoint(aes(fill=factor(cyl), x=x+.5), \n                size=5, shape=21, color='black') + \n  geom_tiplab(aes(label=cyl), size=3, hjust=.5, color='black') +\n  geom_tiplab(angle=90, hjust=1, offset=-10, show.legend=FALSE) + \n  scale_color_brewer(palette='Set1', breaks=1:4) +\n  theme_dendrogram(plot.margin=margin(6,6,80,6)) +\n  theme(legend.position=c(.9, .6))"},{"path":"chapter9.html","id":"igraph","chapter":"9 ggtree for Other Tree-like Objects","heading":"9.3 ggtree for Tree Graph","text":"tree graph (igraph object) can converted phylo object using .phylo() method provided treeio package (Table C.2). ggtree supports directly visualizing tree graph demonstrated Figure 9.6. Note currently igraph objects can supported ggtree. Currently, can supported tree graph.\nFIGURE 9.6: Visualizing tree graph. lines arrows indicate relationship parent node child node. nodes indicated steelblue circle points.\n","code":"\nlibrary(igraph)\ng <- graph.tree(40, 3)\narrow_size <- unit(rep(c(0, 3), times = c(27, 13)), \"mm\")\nggtree(g, layout='slanted', arrow = arrow(length=arrow_size)) + \n  geom_point(size=5, color='steelblue', alpha=.6) + \n  geom_tiplab(hjust=.5,vjust=2) + layout_dendrogram()"},{"path":"chapter9.html","id":"ggtree-for-other-tree-like-structures","chapter":"9 ggtree for Other Tree-like Objects","heading":"9.4 ggtree for Other Tree-like Structures","text":"ggtree package can used visualize data hierarchical structure. , use GNI (Gross National Income) numbers 2014 example. preparing edge list, matrix data frame contains two columns indicating relationship parent child nodes, can use .phylo() method provided treeio package convert edge list phylo object. can visualized using ggtree associated data. example, population used scale size circle points country (Figure 9.7).\nFIGURE 9.7: Visualizing data hierarchical structure. Hierarchical data represented nodes connected edges can converted phylo object visualized ggtree explore relationships properties associated relationships.\n","code":"\nlibrary(treeio)\nlibrary(ggplot2)\nlibrary(ggtree)\n\ndata(\"GNI2014\", package=\"treemap\")\nn <- GNI2014[, c(3,1)]\nn[,1] <- as.character(n[,1])\nn[,1] <- gsub(\"\\\\s\\\\(.*\\\\)\", \"\", n[,1])\n\nw <- cbind(\"World\", as.character(unique(n[,1])))\n\ncolnames(w) <- colnames(n)\nedgelist <- rbind(n, w)\n\ny <- as.phylo(edgelist)\nggtree(y, layout='circular') %<+% GNI2014 + \n    aes(color=continent) + geom_tippoint(aes(size=population), alpha=.6) + \n    geom_tiplab(aes(label=country), offset=.05, size=3) +\n    xlim(NA, 3)"},{"path":"chapter9.html","id":"summary9","chapter":"9 ggtree for Other Tree-like Objects","heading":"9.5 Summary","text":"ggtree supports various tree objects defined R language extension packages, makes easy integrate ggtree existing pipelines. Moreover, ggtree allows external data integration exploration data tree, greatly promote data visualization result interpretation downstream analysis existing pipelines. importantly, support converting edge list tree object enables tree-like structures incorporated framework treeio ggtree. enable tree-like structures related heterogeneous data different disciplines integrated visualized treeio ggtree, facilitates integrated analysis comparative analysis discover systematic patterns insights.","code":""},{"path":"chapter10.html","id":"chapter10","chapter":"10 ggtreeExtra for Presenting Data on a Circular Layout","heading":"10 ggtreeExtra for Presenting Data on a Circular Layout","text":"","code":""},{"path":"chapter10.html","id":"introduction-2","chapter":"10 ggtreeExtra for Presenting Data on a Circular Layout","heading":"10.1 Introduction","text":"ggtree package (Yu et al., 2017) provides programmable visualization annotation phylogenetic trees tree-like structures. supports visualizing tree data multiple layers tree side--side (see also Chapter 7 (Yu et al., 2018)). Although ggtree supports many layouts, geom_facet() layer works rectangular, roundrect, ellipse, slanted layouts present tree data different panels. direct support ggtree present data outer rings tree circular, fan, radial layouts. solve issue, developed ggtreeExtra package, allows users align associated graph layers outer rings circular layout tree. addition, also works rectangular tree layout (Figure 10.3).","code":""},{"path":"chapter10.html","id":"geom-fruit1","chapter":"10 ggtreeExtra for Presenting Data on a Circular Layout","heading":"10.2 Aligning Graphs to the Tree Based on a Tree Structure","text":"ggtreeExtra package provides layer function, geom_fruit(), align graphs tree side--side. Similar geom_facet() layout described Chapter 7, geom_fruit() internally re-orders input data based tree structure visualizes data using specified geometric layer function user-provided aesthetic mapping non-variable setting. graph displayed outer ring tree.geom_fruit() designed work geom layers defined ggplot2 extensions. position graph (.e., outer ring) controlled position parameter, accepts Position object. default value position parameter ‘auto’ geom_fruit() layer guess determine (hopefully) suitable position specified geometric layer. means using position_stackx() geom_bar(), position_dodgex() geom_violin() geom_boxplot(), position_identityx() others (e.g., geom_point(), geom_tile(), etc.). geometric layer position parameter compatible geom_fruit(), allows using position functions defined ggtreeExtra package adjust output layer positions. Besides, geom_fruit() layer allows setting axis background grid lines current layer using axis.params grid.params parameters, respectively.following example uses microbiome data provided phyloseq package boxplot employed visualize species abundance data. geom_fruit() layer automatically rearranges abundance data according circular tree structure visualizes data using specific geom function (.e., geom_boxplot()). Visualizing dataset using geom_density_ridges() geom_facet() can found figure 1 (Yu et al., 2018).\nFIGURE 10.1: Phylogenetic tree OTU abundance distribution. Species abundance distribution aligned tree visualized boxplots. Phylum information used color symbolic points tree also species abundance distributions.\n","code":"\nlibrary(ggtreeExtra)\nlibrary(ggtree)\nlibrary(phyloseq)\nlibrary(dplyr)\n\ndata(\"GlobalPatterns\")\nGP <- GlobalPatterns\nGP <- prune_taxa(taxa_sums(GP) > 600, GP)\nsample_data(GP)$human <- get_variable(GP, \"SampleType\") %in%\n                              c(\"Feces\", \"Skin\")\nmergedGP <- merge_samples(GP, \"SampleType\")\nmergedGP <- rarefy_even_depth(mergedGP,rngseed=394582)\nmergedGP <- tax_glom(mergedGP,\"Order\")\n\nmelt_simple <- psmelt(mergedGP) %>%\n               filter(Abundance < 120) %>%\n               select(OTU, val=Abundance)\n\np <- ggtree(mergedGP, layout=\"fan\", open.angle=10) + \n     geom_tippoint(mapping=aes(color=Phylum), \n                   size=1.5,\n                   show.legend=FALSE)\np <- rotate_tree(p, -90)\n\np <- p +\n     geom_fruit(\n         data=melt_simple,\n         geom=geom_boxplot,\n         mapping = aes(\n                     y=OTU,\n                     x=val,\n                     group=label,\n                     fill=Phylum,\n                   ),\n         size=.2,\n         outlier.size=0.5,\n         outlier.stroke=0.08,\n         outlier.shape=21,\n         axis.params=list(\n                         axis       = \"x\",\n                         text.size  = 1.8,\n                         hjust      = 1,\n                         vjust      = 0.5,\n                         nbreak     = 3,\n                     ),\n         grid.params=list()\n     ) \n     \np <- p +\n     scale_fill_discrete(\n         name=\"Phyla\",\n         guide=guide_legend(keywidth=0.8, keyheight=0.8, ncol=1)\n     ) +\n     theme(\n         legend.title=element_text(size=9), \n         legend.text=element_text(size=7) \n     )\np"},{"path":"chapter10.html","id":"geom-fruit2","chapter":"10 ggtreeExtra for Presenting Data on a Circular Layout","heading":"10.3 Aligning Multiple Graphs to the Tree for Multi-dimensional Data","text":"able add multiple geom_fruit() layers tree circular layout indeed compact efficient multi-dimensional data. example reproduces figure 2 (Morgan et al., 2013). data provided GraPhlAn (Asnicar et al., 2015), contained relative abundance microbiome different body sites. example demonstrates ability add multiple layers (heat map bar plot) present different types data (Figure 10.2).\nFIGURE 10.2: Presenting microbiome data (abundance location) phylogenetic tree. tree annotated symbolic points, highlighted clades, clade labels. Two geom_fruit() layers used visualize location abundance information.\nshape tip points indicates types microbes (commensal microbes potential pathogens). transparency heatmap indicates abundance microbes, colors heatmap indicate different sites human body. bar plot indicates relative abundance prevalent species body sites. node labels contain taxonomy information example, information used highlight label corresponding clades using geom_hilight() geom_cladelab(), respectively.geom_fruit() layer supports rectangular layout. Users can either add geom_fruit() layer rectangular tree (e.g., ggtree(tree_object) + geom_fruit(...)) use layout_rectangular() transform circular layout tree rectangular layout tree demonstrated Figure 10.3.\nFIGURE 10.3: Illustration using geom_fruit() rectangular tree layout. figure produced transforming Figure 10.2 using rectangular layout. Transforming rectangular layout tree circular layout tree also supported.\n","code":"\nlibrary(ggtreeExtra)\nlibrary(ggtree)\nlibrary(treeio)\nlibrary(tidytree)\nlibrary(ggstar)\nlibrary(ggplot2)\nlibrary(ggnewscale)\nlibrary(TDbook)\n\n# load data from TDbook, including tree_hmptree, \n# df_tippoint (the abundance and types of microbes),\n# df_ring_heatmap (the abundance of microbes at different body sites),\n# and df_barplot_attr (the abundance of microbes of greatest prevalence)\ntree <- tree_hmptree\ndat1 <- df_tippoint\ndat2 <- df_ring_heatmap\ndat3 <- df_barplot_attr\n\n# adjust the order\ndat2$Sites <- factor(dat2$Sites, \n                    levels=c(\"Stool (prevalence)\", \"Cheek (prevalence)\",\n                             \"Plaque (prevalence)\",\"Tongue (prevalence)\",\n                             \"Nose (prevalence)\", \"Vagina (prevalence)\",\n                             \"Skin (prevalence)\"))\ndat3$Sites <- factor(dat3$Sites, \n                    levels=c(\"Stool (prevalence)\", \"Cheek (prevalence)\",\n                             \"Plaque (prevalence)\", \"Tongue (prevalence)\",\n                             \"Nose (prevalence)\", \"Vagina (prevalence)\",\n                             \"Skin (prevalence)\"))\n# extract the clade label information. Because some nodes of tree are\n# annotated to genera, which can be displayed with high light using ggtree.\nnodeids <- nodeid(tree, tree$node.label[nchar(tree$node.label)>4])\nnodedf <- data.frame(node=nodeids)\nnodelab <- gsub(\"[\\\\.0-9]\", \"\", tree$node.label[nchar(tree$node.label)>4])\n# The layers of clade and hightlight\nposlist <- c(1.6, 1.4, 1.6, 0.8, 0.1, 0.25, 1.6, 1.6, 1.2, 0.4,\n             1.2, 1.8, 0.3, 0.8, 0.4, 0.3, 0.4, 0.4, 0.4, 0.6,\n             0.3, 0.4, 0.3)\nlabdf <- data.frame(node=nodeids, label=nodelab, pos=poslist)\n\n# The circular layout tree.\np <- ggtree(tree, layout=\"fan\", size=0.15, open.angle=5) +\n     geom_hilight(data=nodedf, mapping=aes(node=node),\n                  extendto=6.8, alpha=0.3, fill=\"grey\", color=\"grey50\",\n                  size=0.05) +\n     geom_cladelab(data=labdf, \n                   mapping=aes(node=node, \n                               label=label,\n                               offset.text=pos),\n                   hjust=0.5,\n                   angle=\"auto\",\n                   barsize=NA,\n                   horizontal=FALSE, \n                   fontsize=1.4,\n                   fontface=\"italic\"\n                   )\n\np <- p %<+% dat1 + geom_star(\n                        mapping=aes(fill=Phylum, starshape=Type, size=Size),\n                        position=\"identity\",starstroke=0.1) +\n        scale_fill_manual(values=c(\"#FFC125\",\"#87CEFA\",\"#7B68EE\",\"#808080\",\n                                \"#800080\", \"#9ACD32\",\"#D15FEE\",\"#FFC0CB\",\n                                \"#EE6A50\",\"#8DEEEE\", \"#006400\",\"#800000\",\n                                \"#B0171F\",\"#191970\"),\n                           guide=guide_legend(keywidth = 0.5, \n                                        keyheight = 0.5, order=1,\n                                        override.aes=list(starshape=15)),\n                           na.translate=FALSE)+\n        scale_starshape_manual(values=c(15, 1),\n                           guide=guide_legend(keywidth = 0.5, \n                                        keyheight = 0.5, order=2),\n                           na.translate=FALSE)+\n        scale_size_continuous(range = c(1, 2.5),\n                           guide = guide_legend(keywidth = 0.5, \n                                        keyheight = 0.5, order=3,\n                                        override.aes=list(starshape=15)))\n                                                    \np <- p + new_scale_fill() +\n         geom_fruit(data=dat2, geom=geom_tile,\n                  mapping=aes(y=ID, x=Sites, alpha=Abundance, fill=Sites),\n                  color = \"grey50\", offset = 0.04,size = 0.02)+\n         scale_alpha_continuous(range=c(0, 1),\n                             guide=guide_legend(keywidth = 0.3, \n                                             keyheight = 0.3, order=5)) +\n         geom_fruit(data=dat3, geom=geom_bar,\n                    mapping=aes(y=ID, x=HigherAbundance, fill=Sites),\n                    pwidth=0.38, \n                    orientation=\"y\", \n                    stat=\"identity\",\n         ) +\n         scale_fill_manual(values=c(\"#0000FF\",\"#FFA500\",\"#FF0000\",\n                                \"#800000\", \"#006400\",\"#800080\",\"#696969\"),\n                           guide=guide_legend(keywidth = 0.3, \n                                        keyheight = 0.3, order=4))+\n         geom_treescale(fontsize=2, linesize=0.3, x=4.9, y=0.1) +\n         theme(legend.position=c(0.93, 0.5),\n               legend.background=element_rect(fill=NA),\n               legend.title=element_text(size=6.5),\n               legend.text=element_text(size=4.5),\n               legend.spacing.y = unit(0.02, \"cm\"),\n             )\np\np + layout_rectangular() + \n    theme(legend.position=c(.05, .7))"},{"path":"chapter10.html","id":"examples-for-population-genetics","chapter":"10 ggtreeExtra for Presenting Data on a Circular Layout","heading":"10.4 Examples for Population Genetics","text":"ggtree (Yu et al., 2017) ggtreeExtra packages designed general tools can applied many research fields, infectious disease epidemiology, metagenome, population genetics, evolutionary biology, ecology. introduced examples metagenome research (Figure 10.1 Figure 10.2). session, present examples population genetics reproducing figure 4 (Chow et al., 2020) figure 1 (Wong et al., 2015).\nFIGURE 10.4: Antifungal susceptibility point mutations drug targets Candida Auris .\nexample, Figure 10.4 shows phylogenetic tree annotated different colors display different clades. external heatmaps present susceptibility fluconazole (FCZ), amphotericin B (AMB), micafungin (MCF). external points display point mutations lanosterol 14-alpha-demethylase ERG11 (Y132F, K143R, F126L) beta-1,3-D-glucan synthase FKS1 (S639Y/P/F) associated resistance (Chow et al., 2020).\nFIGURE 10.5: Population structure 1,832 S. Typhi isolates.\nFigure 10.5 rooted maximum-likelihood tree S. Typhi inferred 22,145 SNPs (Wong et al., 2015), colors tip points represent geographical origin isolates, red symbolic points indicate haplotype H58 lineage. color external heatmap indicates years isolation (Wong et al., 2015).","code":"\nlibrary(ggtree)\nlibrary(ggtreeExtra)\nlibrary(ggplot2)\nlibrary(ggnewscale)\nlibrary(reshape2)\nlibrary(dplyr)\nlibrary(tidytree)\nlibrary(ggstar)\nlibrary(TDbook)\n\n# load tr and dat from the TDbook package \ndat <- df_Candidaauris_data\ntr <- tree_Candidaauris\n\ncountries <- c(\"Canada\", \"United States\",\n               \"Colombia\", \"Panama\",\n               \"Venezuela\", \"France\",\n               \"Germany\", \"Spain\",\n               \"UK\", \"India\",\n               \"Israel\", \"Pakistan\",\n               \"Saudi Arabia\", \"United Arab Emirates\",\n               \"Kenya\", \"South Africa\",\n               \"Japan\", \"South Korea\",\n               \"Australia\")\n# For the tip points\ndat1 <- dat %>% select(c(\"ID\", \"COUNTRY\", \"COUNTRY__colour\"))\ndat1$COUNTRY <- factor(dat1$COUNTRY, levels=countries)\nCOUNTRYcolors <- dat1[match(countries,dat$COUNTRY),\"COUNTRY__colour\"]\n\n# For the heatmap layer\ndat2 <- dat %>% select(c(\"ID\", \"FCZ\", \"AMB\", \"MCF\"))\ndat2 <- melt(dat2,id=\"ID\", variable.name=\"Antifungal\", value.name=\"type\")\ndat2$type <- paste(dat2$Antifungal, dat2$type)\ndat2$type[grepl(\"Not_\", dat2$type)] = \"Susceptible\"\ndat2$Antifungal <- factor(dat2$Antifungal, levels=c(\"FCZ\", \"AMB\", \"MCF\"))\ndat2$type <- factor(dat2$type,\n                    levels=c(\"FCZ Resistant\",\n                            \"AMB Resistant\",\n                            \"MCF Resistant\",\n                            \"Susceptible\"))\n\n# For the points layer\ndat3 <- dat %>% select(c(\"ID\", \"ERG11\", \"FKS1\")) %>%\n        melt(id=\"ID\", variable.name=\"point\", value.name=\"mutation\")\ndat3$mutation <- paste(dat3$point, dat3$mutation)\ndat3$mutation[grepl(\"WT\", dat3$mutation)] <- NA\ndat3$mutation <- factor(dat3$mutation, \n                        levels=c(\"ERG11 Y132F\", \"ERG11 K143R\",\n                                 \"ERG11 F126L\", \"FKS1 S639Y/P/F\"))\n\n# For the clade group\ndat4 <- dat %>% select(c(\"ID\", \"CLADE\"))\ndat4 <- aggregate(.~CLADE, dat4, FUN=paste, collapse=\",\")\nclades <- lapply(dat4$ID, function(x){unlist(strsplit(x,split=\",\"))})\nnames(clades) <- dat4$CLADE\n\ntr <- groupOTU(tr, clades, \"Clade\")\nClade <- NULL\np <- ggtree(tr=tr, layout=\"fan\", open.angle=15, size=0.2, aes(colour=Clade)) +\n     scale_colour_manual(\n         values=c(\"black\",\"#69B920\",\"#9C2E88\",\"#F74B00\",\"#60C3DB\"),\n         labels=c(\"\",\"I\", \"II\", \"III\", \"IV\"),\n         guide=guide_legend(keywidth=0.5,\n                            keyheight=0.5,\n                            order=1,\n                            override.aes=list(linetype=c(\"0\"=NA,\n                                                         \"Clade1\"=1,\n                                                         \"Clade2\"=1,\n                                                         \"Clade3\"=1,\n                                                         \"Clade4\"=1\n                                                        )\n                                             )\n                           )\n     ) + \n     new_scale_colour()\n\np1 <- p %<+% dat1 +\n     geom_tippoint(aes(colour=COUNTRY),\n                   alpha=0) +\n     geom_tiplab(aes(colour=COUNTRY),\n                   align=TRUE,\n                   linetype=3,\n                   size=1,\n                   linesize=0.2,\n                   show.legend=FALSE\n                   ) +\n     scale_colour_manual(\n         name=\"Country labels\",\n         values=COUNTRYcolors,\n         guide=guide_legend(keywidth=0.5,\n                            keyheight=0.5,\n                            order=2,\n                            override.aes=list(size=2,alpha=1))\n     )\n\np2 <- p1 +\n      geom_fruit(\n          data=dat2,\n          geom=geom_tile,\n          mapping=aes(x=Antifungal, y=ID, fill=type),\n          width=0.1,\n          color=\"white\",\n          pwidth=0.1,\n          offset=0.15\n      ) +\n      scale_fill_manual(\n           name=\"Antifungal susceptibility\",\n           values=c(\"#595959\", \"#B30000\", \"#020099\", \"#E6E6E6\"),\n           na.translate=FALSE,\n           guide=guide_legend(keywidth=0.5,\n                              keyheight=0.5,\n                              order=3\n                             )\n      ) +\n      new_scale_fill()\n\np3 <- p2 +\n      geom_fruit(\n          data=dat3,\n          geom=geom_star,\n          mapping=aes(x=mutation, y=ID, fill=mutation, starshape=point),\n          size=1,\n          starstroke=0,\n          pwidth=0.1,\n          inherit.aes = FALSE,\n          grid.params=list(\n                          linetype=3,\n                          size=0.2\n                      )\n\n      ) +\n      scale_fill_manual(\n          name=\"Point mutations\",\n          values=c(\"#329901\", \"#0600FF\", \"#FF0100\", \"#9900CC\"),\n          guide=guide_legend(keywidth=0.5, keyheight=0.5, order=4,\n                             override.aes=list(\n                                    starshape=c(\"ERG11 Y132F\"=15,\n                                                \"ERG11 K143R\"=15,\n                                                \"ERG11 F126L\"=15,\n                                                \"FKS1 S639Y/P/F\"=1),\n                                    size=2)\n                            ),\n          na.translate=FALSE,\n      ) +\n      scale_starshape_manual(\n          values=c(15, 1),\n          guide=\"none\"\n      ) +\n      theme(\n          legend.background=element_rect(fill=NA),\n          legend.title=element_text(size=7), \n          legend.text=element_text(size=5.5),\n          legend.spacing.y = unit(0.02, \"cm\")\n      )\np3\nlibrary(ggtreeExtra)\nlibrary(ggtree)\nlibrary(ggplot2)\nlibrary(ggnewscale)\nlibrary(treeio)\nlibrary(tidytree)\nlibrary(dplyr)\nlibrary(ggstar)\nlibrary(TDbook)\n\n# load tree_NJIDqgsS and df_NJIDqgsS from TDbook\ntr <- tree_NJIDqgsS\nmetada <- df_NJIDqgsS\nmetadata <- metada %>%\n            select(c(\"id\", \"country\", \"country__colour\", \n                    \"year\", \"year__colour\", \"haplotype\"))\nmetadata$haplotype[nchar(metadata$haplotype) == 0] <- NA\n\ncountrycolors <- metada %>%\n                 select(c(\"country\", \"country__colour\")) %>%\n                 distinct()\n\nyearcolors <- metada %>%\n              select(c(\"year\", \"year__colour\")) %>%\n              distinct()\nyearcolors <- yearcolors[order(yearcolors$year, decreasing=TRUE),]\n\nmetadata$country <- factor(metadata$country, levels=countrycolors$country)\nmetadata$year <- factor(metadata$year, levels=yearcolors$year)\n\np <- ggtree(tr, layout=\"fan\", open.angle=15, size=0.1)\n\np <- p %<+% metadata\n\np1 <-p +\n     geom_tippoint(\n         mapping=aes(colour=country),\n         size=1.5,\n         stroke=0,\n         alpha=0.4\n     ) +\n     scale_colour_manual(\n         name=\"Country\",\n         values=countrycolors$country__colour,\n         guide=guide_legend(keywidth=0.3,\n                            keyheight=0.3,\n                            ncol=2,\n                            override.aes=list(size=2,alpha=1),\n                            order=1)\n     ) +\n     theme(\n         legend.title=element_text(size=5),\n         legend.text=element_text(size=4),\n         legend.spacing.y = unit(0.02, \"cm\")\n     )\n\np2 <-p1 +\n     geom_fruit(\n         geom=geom_star,\n         mapping=aes(fill=haplotype),\n         starshape=26,\n         color=NA,\n         size=2,\n         starstroke=0,\n         offset=0,\n     ) +\n     scale_fill_manual(\n         name=\"Haplotype\",\n         values=c(\"red\"),\n         guide=guide_legend(\n                   keywidth=0.3,\n                   keyheight=0.3,\n                   order=3\n               ),\n         na.translate=FALSE\n     )\n\np3 <-p2 +\n     new_scale_fill() +\n     geom_fruit(\n         geom=geom_tile,\n         mapping=aes(fill=year),\n         width=0.002,\n         offset=0.1\n     ) +\n     scale_fill_manual(\n         name=\"Year\",\n         values=yearcolors$year__colour,\n         guide=guide_legend(keywidth=0.3, keyheight=0.3, ncol=2, order=2)\n     ) +\n     theme(\n           legend.title=element_text(size=6), \n           legend.text=element_text(size=4.5),\n           legend.spacing.y = unit(0.02, \"cm\")\n           )\np3"},{"path":"chapter10.html","id":"summary10","chapter":"10 ggtreeExtra for Presenting Data on a Circular Layout","heading":"10.5 Summary","text":"Compared geom_facet(), geom_fruit() layer provided ggtreeExtra better implementation Method 2 proposed (Yu et al., 2018). geom_facet() geom_fruit() design philosophy similar user interface. rely geometric layers visualize tree-associated data. dependent layers provided ggplot2 extension packages, including ggtree. layers implemented ggplot2 community, types data graphics geom_facet() geom_fruit() can present also increase.","code":""},{"path":"chapter11.html","id":"chapter11","chapter":"11 Other ggtree Extensions","heading":"11 Other ggtree Extensions","text":"ggtree package general package visualizing tree structures associated data. special requirements directly provided ggtree, may need use one extension packages built top ggtree. example, RevGadgets package visualizing output RevBayes, sitePath package visualizing fixation events phylogenetic pathways, enrichplot package visualizing hierarchical structure enriched pathways.18 packages CRAN Bioconductor depend import ggtree several packages GitHub extend ggtree. briefly introduce extension packages, including MicrobiotaProcess tanggle.","code":"\nrp <- BiocManager::repositories()\ndb <- utils::available.packages(repo=rp)\nx <- tools::package_dependencies('ggtree', db=db, \n                                which = c(\"Depends\", \"Imports\"), \n                                reverse=TRUE)\nprint(x)                                ## $ggtree\n##  [1] \"enrichplot\"        \"ggtreeExtra\"      \n##  [3] \"LymphoSeq\"         \"miaViz\"           \n##  [5] \"microbiomeMarker\"  \"MicrobiotaProcess\"\n##  [7] \"philr\"             \"singleCellTK\"     \n##  [9] \"sitePath\"          \"systemPipeTools\"  \n## [11] \"tanggle\"           \"treekoR\"          \n## [13] \"dowser\"            \"genBaRcode\"       \n## [15] \"ggmotif\"           \"harrietr\"         \n## [17] \"shinyTempSignal\"   \"STraTUS\""},{"path":"chapter11.html","id":"MicrobiotaProcess","chapter":"11 Other ggtree Extensions","heading":"11.1 Taxonomy Annotation Using MicrobiotaProcess","text":"MicrobiotaProcess package provides LEfSe-like algorithm (Segata et al., 2011) discover microbiome biomarkers comparing taxon abundance different classes. provides several methods visualize analysis result. ggdiffclade developed based ggtree (Yu et al., 2017). addition diff_analysis() result, also supports data frame contains hierarchical relationship (e.g., taxonomy annotation KEGG annotation) another data frame contains taxa factor information /pvalue. following example demonstrates use data frames (.e., analysis results) visualize differential taxonomy tree. details can found vignette MicrobiotaProcess package.\nFIGURE 11.1: Visualize differential taxonomy clade.\ndata frame example analysis result diff_analysis() using public datasets (Kostic et al., 2012). colors represent features enriched relevant class groups. size circle points represents -log10(pvalue), .e., larger point indicates greater significance. Figure 11.1, can find Fusobacterium sequences enriched carcinomas, Firmicutes, Bacteroides, Clostridiales greatly reduced tumors. results consistent original article (Kostic et al., 2012). species Campylobacter proven associated colorectal cancer (Amer et al., 2017; et al., 2019; Wu et al., 2013). can find Figure 11.1 Campylobacter enriched tumors, relative abundance lower Fusobacterium.","code":"\nlibrary(MicrobiotaProcess)\nlibrary(ggplot2)\nlibrary(TDbook)\n\n# load `df_difftax` and `df_difftax_info` from TDbook\ntaxa <- df_alltax_info\ndt <- df_difftax\n\nggdiffclade(obj=taxa,\n            nodedf=dt,\n            factorName=\"DIAGNOSIS\",\n            layout=\"radial\",\n            skpointsize=0.6,\n            cladetext=2,\n            linewd=0.2,\n            taxlevel=3,\n            # This argument is to remove the branch of unknown taxonomy.\n            reduce=TRUE) + \n     scale_fill_manual(values=c(\"#00AED7\", \"#009E73\"))+\n     guides(color = guide_legend(keywidth = 0.1, keyheight = 0.6,\n                                 order = 3,ncol=1)) +\n     theme(panel.background=element_rect(fill=NA),\n           legend.position=\"right\",\n           plot.margin=margin(0,0,0,0),\n           legend.spacing.y=unit(0.02, \"cm\"), \n           legend.title=element_text(size=7.5), \n           legend.text=element_text(size=5.5), \n           legend.box.spacing=unit(0.02,\"cm\")\n        )"},{"path":"chapter11.html","id":"visualizing-phylogenetic-network-using-tanggle","chapter":"11 Other ggtree Extensions","heading":"11.2 Visualizing Phylogenetic Network Using Tanggle","text":"tanggle package provides functions display split network. extends ggtree package (Yu et al., 2017) allow visualization phylogenetic networks (Figure 11.2).\nFIGURE 11.2: Phylogenetic network.\n","code":"\nlibrary(ggplot2)\nlibrary(ggtree)\nlibrary(tanggle)\n\nfile <- system.file(\"extdata/trees/woodmouse.nxs\", package = \"phangorn\")\nNnet <- phangorn::read.nexus.networx(file)\n\nggsplitnet(Nnet) +\n    geom_tiplab2(aes(color=label), hjust=-.1)+\n    geom_nodepoint(color='firebrick', alpha=.4) +\n    scale_color_manual(values=rainbow(15)) +   \n    theme(legend.position=\"none\") +\n    ggexpand(.1) + ggexpand(.1, direction=-1)"},{"path":"chapter11.html","id":"summary11","chapter":"11 Other ggtree Extensions","heading":"11.3 Summary","text":"ggtree designed support grammar graphics, allowing users quickly explore phylogenetic data visualization. users special needs ggtree provide , highly recommended develop extension packages implement missing functions. good mechanism, also hope ggtree users can become ggtree community. way, functions special needs can developed shared among users. Everyone benefit , ’s exciting happening.","code":""},{"path":"chapter12.html","id":"chapter12","chapter":"12 ggtree Utilities","heading":"12 ggtree Utilities","text":"","code":""},{"path":"chapter12.html","id":"facet-utils","chapter":"12 ggtree Utilities","heading":"12.1 Facet Utilities","text":"","code":""},{"path":"chapter12.html","id":"facet_widths","chapter":"12 ggtree Utilities","heading":"12.1.1 facet_widths","text":"Adjusting relative widths facet panels common requirement, especially using geom_facet() visualize tree associated data. However, supported ggplot2 package. address issue, ggtree provides facet_widths() function works ggtree ggplot objects.also supports using name vector set widths specific panels. following code display identical figure Figure 12.1A.facet_widths() function also works ggplot objects demonstrated Figure 12.1B.\nFIGURE 12.1: Adjust relative widths ggplot facets. facet_widths() function works ggtree () well ggplot (B).\n","code":"\nlibrary(ggplot2)\nlibrary(ggtree)\nlibrary(reshape2)\n\nset.seed(123)\ntree <- rtree(30)\n\np <- ggtree(tree, branch.length = \"none\") + \n    geom_tiplab() + theme(legend.position='none')\n\na <- runif(30, 0,1)\nb <- 1 - a\ndf <- data.frame(tree$tip.label, a, b)\ndf <- melt(df, id = \"tree.tip.label\")\n\np2 <- p + geom_facet(panel = 'bar', data = df, geom = geom_bar, \n                 mapping = aes(x = value, fill = as.factor(variable)), \n                 orientation = 'y', width = 0.8, stat='identity') + \n        xlim_tree(9)\n\nfacet_widths(p2, widths = c(1, 2))\nfacet_widths(p2, c(Tree = .5))\np <- ggplot(iris, aes(Sepal.Width, Petal.Length)) + \n  geom_point() + facet_grid(.~Species)\nfacet_widths(p, c(setosa = .5))"},{"path":"chapter12.html","id":"facet_labeller","chapter":"12 ggtree Utilities","heading":"12.1.2 facet_labeller","text":"facet_labeller() function designed relabel selected panels (Figure 12.2), currently works ggtree objects (.e., geom_facet() outputs). versatile version works ggtree ggplot objects implemented ggfun package (.e., facet_set() function).want combine facet_widths() facet_labeller(), need call facet_labeller() relabel panels using facet_widths() set relative widths panel. Otherwise, won’t work since output facet_widths() redrawn grid object.\nFIGURE 12.2: Rename facet labels. Rename multiple labels simultaneously () specific one (B) supported. facet_labeller() can combine facet_widths() rename facet label adjust relative widths (B).\n","code":"\nfacet_labeller(p2, c(Tree = \"phylogeny\", bar = \"HELLO\"))\nfacet_labeller(p2, c(Tree = \"phylogeny\")) %>% facet_widths(c(Tree = .4))"},{"path":"chapter12.html","id":"geom2","chapter":"12 ggtree Utilities","heading":"12.2 Geometric Layers","text":"Subsetting supported layers defined ggplot2, quite useful phylogenetic annotation since allows us annotate specific node(s) (e.g., label bootstrap values larger 75).ggtree, provide several modified versions layers defined ggplot2 support subset aesthetic mapping, including:geom_segment2()geom_point2()geom_text2()geom_label2()layers works ggtree ggplot2 (Figure 12.3).\nFIGURE 12.3: Geometric layers support subsetting. layers work ggplot2 () ggtree (B).\n","code":"\nlibrary(ggplot2)\nlibrary(ggtree)\ndata(mpg)\np <- ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +\n   geom_point(mapping = aes(color = class)) + \n   geom_text2(aes(label=manufacturer, \n                  subset = hwy > 40 | displ > 6.5), \n                  nudge_y = 1) +\n   coord_cartesian(clip = \"off\") +\n   theme_light() +\n   theme(legend.position = c(.85, .75))          \n\np2 <- ggtree(rtree(10)) + \n    geom_label2(aes(subset = node <5, label = label))\n\nplot_list(p, p2, ncol=2, tag_levels='A')"},{"path":"chapter12.html","id":"layout-utilities","chapter":"12 ggtree Utilities","heading":"12.3 Layout Utilities","text":"session 4.2, introduce several layouts supported ggtree. ggtree package also provides several layout functions can transform one another. Note layouts supported (see Table 12.1 Figure 12.4).\nTABLE 12.1: Layout transformers.\n\nFIGURE 12.4: Layout functions transforming among different layouts. Default rectangular layout (); transform rectangular dendrogram layout (B); transform circular rectangular layout (C); transform rectangular circular layout (D); transform rectangular fan layout (E); transform rectangular inward circular layout (F).\n","code":"\nset.seed(2019)\nx <- rtree(20)\np <- ggtree(x)\np + layout_dendrogram()\nggtree(x, layout = \"circular\") + layout_rectangular()\np + layout_circular()\np + layout_fan(angle=90)\np + layout_inward_circular(xlim=4) + geom_tiplab(hjust=1)"},{"path":"chapter12.html","id":"scale-utilities","chapter":"12 ggtree Utilities","heading":"12.4 Scale Utilities","text":"ggtree package provides several scale functions manipulate x-axis, including scale_x_range() documented session 5.2.4, xlim_tree(), xlim_expand(), ggexpand(), hexpand() vexpand().","code":""},{"path":"chapter12.html","id":"xlim_expand","chapter":"12 ggtree Utilities","heading":"12.4.1 Expand x limit for a specific facet panel","text":"Sometimes need set xlim specific facet panel (e.g., allocate space long tip labels Tree panel). However, ggplot2::xlim() function applies panels. ggtree provides xlim_expand() adjust xlim user-specific facet panel. accepts two parameters, xlim, panel, can adjust individual panels demonstrated Figure 12.5A. want adjust xlim Tree panel, can use xlim_tree() shortcut.xlim_expand() function also works ggplot2::facet_grid(). demonstrated Figure 12.5B, xlim virginica panel adjusted xlim_expand().\nFIGURE 12.5: Setting xlim user-specific facet panels. Using xlim_tree() set Tree panel ggtree output () xlim_expand() set Dot panel ggtree output () Virginica panel ggplot output (B).\n","code":"\nset.seed(2019-05-02)\nx <- rtree(30)\np <- ggtree(x) + geom_tiplab()\nd <- data.frame(label = x$tip.label, \n                value = rnorm(30))\np2 <- p + geom_facet(panel = \"Dot\", data = d, \n            geom = geom_point, mapping = aes(x = value))\np2 + xlim_tree(6) + xlim_expand(c(-10, 10), 'Dot')\ng <- ggplot(iris, aes(Sepal.Length, Sepal.Width)) + \n    geom_point() + facet_grid(. ~ Species, scales = \"free_x\") \ng + xlim_expand(c(0, 15), 'virginica')"},{"path":"chapter12.html","id":"ggexpand","chapter":"12 ggtree Utilities","heading":"12.4.2 Expand plot limit by the ratio of plot range","text":"ggplot2 package automatically adjust plot limits common long text truncated. Users need adjust x (y) limits manually via xlim() (ylim()) command (see also FAQ: Tip label truncated).xlim() (ylim()) good solution issue. However, can make simple, expanding plot panel ratio axis range without knowing exact value .provide hexpand() function expand x limit specifying fraction x range works directions (direction=1 right-hand side direction=-1 left-hand side) (Figure 12.6). Another version vexpand() works similar behavior y-axis ggexpand() function works x- y-axis (Figure 11.2).\nFIGURE 12.6: Expanding plot limits fraction x y range. Expand x limit right-hand side default (), expand x limit left-hand side direction = -1 expand y limit upper side (B).\n","code":"\nx$tip.label <- paste0('to make the label longer_', x$tip.label)\np1 <- ggtree(x) + geom_tiplab() + hexpand(.4)\np2 <- ggplot(iris, aes(Sepal.Width, Petal.Width)) + \n    geom_point() + \n    hexpand(.2, direction = -1) +\n    vexpand(.2)\n\nplot_list(p1, p2, tag_levels=\"A\", widths=c(.6, .4))"},{"path":"chapter12.html","id":"tree-data-utilities","chapter":"12 ggtree Utilities","heading":"12.5 Tree data utilities","text":"","code":""},{"path":"chapter12.html","id":"td_filter","chapter":"12 ggtree Utilities","heading":"12.5.1 Filter tree data","text":"ggtree package defined several geom layers support subsetting tree data. However, many geom layers didn’t provide feature, defined ggplot2 extensions. allow filtering tree data layers, ggtree provides accompanying function, td_filter() returns function works similar dplyr::filter() can passed data parameter geom layers filter ggtree plot data demonstrated Figure 12.7.\nFIGURE 12.7: Filtering ggtree plot data geom layers. selected tips (offspring node indicated blue circle point) labeled.\n","code":"\nlibrary(tidytree)\n\nset.seed(1997)\ntree <- rtree(50)\np <- ggtree(tree) \nselected_nodes <- offspring(p, 67)$node\np + geom_text(aes(label=label), \n            data=td_filter(isTip & \n                        node %in% selected_nodes), \n            hjust=0) +\n    geom_nodepoint(aes(subset = node ==67), \n                    size=5, color='blue')"},{"path":"chapter12.html","id":"td_unnest","chapter":"12 ggtree Utilities","heading":"12.5.2 Flatten list-column tree data","text":"ggtree plot data tidy data frame row represents unique node. multiple values associated node, data can stored nested data (.e., list-column).Nested data supported operator, %<+%, can mapped tree structure. geom layer can’t directly support visualizing nested data, need flatten data applying geom layer display . ggtree package provides function, td_unnest(), returns function works similar tidyr::unnest() can used flatten ggtree plot data demonstrated Figure 12.8A.tree data utilities provide .f parameter pass function pre-operate data. creates possibility combine different tree data utilities demonstrated Figure 12.8B.\nFIGURE 12.8: Flattening ggtree plot data. List-columns can flattened td_unnest() two circle points displayed tip simultaneously (). Different tree data utilities can combined work together, e.g., filter data td_filter(), flatten td_unnest()) (B).\n","code":"\nset.seed(1997)\ntr <- rtree(5)\nd <- data.frame(id=rep(tr$tip.label,2), \n                value=abs(rnorm(10, 6, 2)), \n                group=c(rep(\"A\", 5),rep(\"B\",5)))\n\nrequire(tidyr)\nd2  <- nest(d, value =value, group=group)\n## d2 is a nested data\nd2## # A tibble: 5 × 3\n##   id    value            group           \n##   <chr> <list>           <list>          \n## 1 t2    <tibble [2 × 1]> <tibble [2 × 1]>\n## 2 t1    <tibble [2 × 1]> <tibble [2 × 1]>\n## 3 t5    <tibble [2 × 1]> <tibble [2 × 1]>\n## 4 t4    <tibble [2 × 1]> <tibble [2 × 1]>\n## 5 t3    <tibble [2 × 1]> <tibble [2 × 1]>\np <- ggtree(tr) %<+% d2\np2 <- p + \n    geom_point(aes(x, y, size= value, colour=group), \n            data = td_unnest(c(value, group)), alpha=.4) +\n    scale_size(range=c(3,10), limits=c(3, 10))\n\np3 <- p + \n    geom_point(aes(x, y, size= value, colour=group), \n            data = td_unnest(c(value, group), \n                        .f = td_filter(isTip & node==4)), \n            alpha=.4) +\n    scale_size(range=c(3,10), limits=c(3, 10))\n\nplot_list(p2, p3, tag_levels = 'A')"},{"path":"chapter12.html","id":"tree-utilities","chapter":"12 ggtree Utilities","heading":"12.6 Tree Utilities","text":"","code":""},{"path":"chapter12.html","id":"tiporder","chapter":"12 ggtree Utilities","heading":"12.6.1 Extract tip order","text":"create composite plots, users need re-order data manually creating tree-associated graphs. order data consistent tip order presented ggtree() plot. purpose, provide get_taxa_name() function extract ordered vector tips based tree structure plotted ggtree().\nFIGURE 12.9: example tree demonstrating get_taxa_name() function.\nget_taxa_name() function return vector ordered tip labels according tree structure displayed Figure 12.9.users specify node, get_taxa_name() extract tip order selected clade (.e., highlighted region Figure 12.9).","code":"\nset.seed(123)\ntree <- rtree(10)\np <- ggtree(tree) + geom_tiplab() + \n    geom_hilight(node = 12, extendto = 2.5)\n\nx <- paste(\"Taxa order:\", \n        paste0(get_taxa_name(p), collapse=', '))\np + labs(title=x)\nget_taxa_name(p)##  [1] \"t9\"  \"t8\"  \"t3\"  \"t2\"  \"t7\"  \"t10\" \"t1\"  \"t5\" \n##  [9] \"t6\"  \"t4\"\nget_taxa_name(p, node = 12)## [1] \"t5\" \"t6\" \"t4\""},{"path":"chapter12.html","id":"padding-taxa-labels","chapter":"12 ggtree Utilities","heading":"12.6.2 Padding taxa labels","text":"label_pad() function adds padding characters (default ·) taxa labels.feature useful want align tip labels end demonstrated Figure 12.10. Note case, monospace font used ensure lengths labels displayed plot .\nFIGURE 12.10: Align tip label end. dotted line () without dotted line (B).\n","code":"\nset.seed(2015-12-21)\ntree <- rtree(5)\ntree$tip.label[2] <- \"long string for test\"\n\nd <- data.frame(label = tree$tip.label, \n                newlabel = label_pad(tree$tip.label),\n                newlabel2 = label_pad(tree$tip.label, pad = \" \"))\nprint(d)##                  label             newlabel\n## 1                   t1 ··················t1\n## 2 long string for test long string for test\n## 3                   t2 ··················t2\n## 4                   t4 ··················t4\n## 5                   t3 ··················t3\n##              newlabel2\n## 1                   t1\n## 2 long string for test\n## 3                   t2\n## 4                   t4\n## 5                   t3\np <- ggtree(tree) %<+% d + xlim(NA, 5)\np1 <- p + geom_tiplab(aes(label=newlabel), \n                    align=TRUE, family='mono',\n                    linetype = \"dotted\", linesize = .7) \np2 <- p + geom_tiplab(aes(label=newlabel2), \n                    align=TRUE, family='mono',\n                    linetype = NULL, offset=-.5) + xlim(NA, 5)\nplot_list(p1, p2, ncol=2, tag_levels = \"A\")                            "},{"path":"chapter12.html","id":"identify","chapter":"12 ggtree Utilities","heading":"12.7 Interactive ggtree Annotation","text":"ggtree package supports interactive tree annotation manipulation implementing identify() method. Users can click node highlight clade, label rotate , etc. Users can also use plotly package convert ggtree object plotly object quickly create\ninteractive phylogenetic tree.\nFIGURE 12.11: Interactive phylogenetic tree using identify() method. Highlighting, labelling rotating clades supported.\nVideo using identify() interactively manipulate phylogenetic tree can found Youtube  Youku:Highlighting clades: Youtube  Youku.Labelling clades: Youtube  Youku.Rotating clades: Youtube  Youku.","code":""},{"path":"chapter13.html","id":"chapter13","chapter":"13 Gallery of Reproducible Examples","heading":"13 Gallery of Reproducible Examples","text":"","code":""},{"path":"chapter13.html","id":"hpv58","chapter":"13 Gallery of Reproducible Examples","heading":"13.1 Visualizing pairwise nucleotide sequence distance with a phylogenetic tree","text":"example reproduces figure 1 (Chen et al., 2017). extracts accession numbers tip labels HPV58 tree calculates pairwise nucleotide sequence distances. distance matrix visualized dot line plots. example demonstrates ability add multiple layers specific panel. illustrated Figure 13.1, geom_facet() function displays sequence distances dot plot adds layer line plot panel, .e., sequence distance. addition, tree geom_facet() can fully annotated multiple layers (clade labels, bootstrap support values, etc.). source code modified supplemental file (Yu et al., 2018).\nFIGURE 13.1: Phylogeny HPV58 complete genomes dot line plots pairwise nucleotide sequence distances.\n","code":"\nlibrary(TDbook)\nlibrary(tibble)\nlibrary(tidyr)\nlibrary(Biostrings)\nlibrary(treeio)\nlibrary(ggplot2)\nlibrary(ggtree)\n\n# loaded from TDbook package\ntree <- tree_HPV58\n\nclade <- c(A3 = 92, A1 = 94, A2 = 108, B1 = 156, \n            B2 = 159, C = 163, D1 = 173, D2 = 176)\ntree <- groupClade(tree, clade)\ncols <- c(A1 = \"#EC762F\", A2 = \"#CA6629\", A3 = \"#894418\", B1 = \"#0923FA\", \n         B2 = \"#020D87\", C = \"#000000\", D1 = \"#9ACD32\",D2 = \"#08630A\")\n\n## visualize the tree with tip labels and tree scale\np <- ggtree(tree, aes(color = group), ladderize = FALSE) %>% \n    rotate(rootnode(tree)) + \n    geom_tiplab(aes(label = paste0(\"italic('\", label, \"')\")), \n                parse = TRUE, size = 2.5) +\n    geom_treescale(x = 0, y = 1, width = 0.002) + \n    scale_color_manual(values = c(cols, \"black\"), \n                na.value = \"black\", name = \"Lineage\",\n                breaks = c(\"A1\", \"A2\", \"A3\", \"B1\", \"B2\", \"C\", \"D1\", \"D2\")) +\n    guides(color = guide_legend(override.aes = list(size = 5, shape = 15))) +\n    theme_tree2(legend.position = c(.1, .88))\n## Optional\n## add labels for monophyletic (A, C and D) and paraphyletic (B) groups \ndat <- tibble(node = c(94, 108, 131, 92, 156, 159, 163, 173, 176,172),\n              name = c(\"A1\", \"A2\", \"A3\", \"A\", \"B1\", \n                        \"B2\", \"C\", \"D1\", \"D2\", \"D\"),\n              offset = c(0.003, 0.003, 0.003, 0.00315, 0.003, \n                        0.003, 0.0031, 0.003, 0.003, 0.00315),\n              offset.text = c(-.001, -.001, -.001, 0.0002, -.001, \n                        -.001, 0.0002, -.001, -.001, 0.0002),\n              barsize = c(1.2, 1.2, 1.2, 2, 1.2, 1.2, 3.2, 1.2, 1.2, 2),\n              extend = list(c(0, 0.5), 0.5, c(0.5, 0), 0, c(0, 0.5), \n                        c(0.5, 0), 0, c(0, 0.5), c(0.5, 0), 0)\n            ) %>% \n       dplyr::group_split(barsize)\n\np <- p +\n     geom_cladelab(\n         data = dat[[1]],\n         mapping = aes(\n             node = node,\n             label = name,\n             color = group,\n             offset = offset,\n             offset.text = offset.text,\n             extend = extend\n         ),\n         barsize = 1.2,\n         fontface = 3,\n         align = TRUE\n     ) +\n     geom_cladelab(\n         data = dat[[2]],\n         mapping = aes(\n             node = node,\n             label = name,\n             offset = offset,\n             offset.text =offset.text,\n             extend = extend\n         ),\n         barcolor = \"darkgrey\",\n         textcolor = \"darkgrey\",\n         barsize = 2,\n         fontsize = 5,\n         fontface = 3,\n         align = TRUE\n     ) +\n     geom_cladelab(\n         data = dat[[3]],\n         mapping = aes(\n             node = node,\n             label = name,\n             offset = offset,\n             offset.text = offset.text,\n             extend = extend\n         ),\n         barcolor = \"darkgrey\",\n         textcolor = \"darkgrey\",\n         barsize = 3.2,\n         fontsize = 5,\n         fontface = 3,\n         align = TRUE\n     ) +\n     geom_strip(65, 71, \"italic(B)\", color = \"darkgrey\", \n                offset = 0.00315, align = TRUE, offset.text = 0.0002, \n                barsize = 2, fontsize = 5, parse = TRUE)\n\n## Optional\n## display support values\np <- p + geom_nodelab(aes(subset = (node == 92), label = \"*\"), \n                    color = \"black\", nudge_x = -.001, nudge_y = 1) +\n    geom_nodelab(aes(subset = (node == 155), label = \"*\"), \n                    color = \"black\", nudge_x = -.0003, nudge_y = -1) +\n    geom_nodelab(aes(subset = (node == 158), label = \"95/92/1.00\"), \n                    color = \"black\", nudge_x = -0.0001, \n                    nudge_y = -1, hjust = 1) +\n    geom_nodelab(aes(subset = (node == 162), label = \"98/97/1.00\"), \n                    color = \"black\", nudge_x = -0.0001, \n                    nudge_y = -1, hjust = 1) +\n    geom_nodelab(aes(subset = (node == 172), label = \"*\"), \n                    color = \"black\", nudge_x = -.0003, nudge_y = -1) \n## extract accession numbers from tip labels\ntl <- tree$tip.label\nacc <- sub(\"\\\\w+\\\\|\", \"\", tl)\nnames(tl) <- acc\n\n## read sequences from GenBank directly into R\n## and convert the object to DNAStringSet\ntipseq <- ape::read.GenBank(acc) %>% as.character %>% \n    lapply(., paste0, collapse = \"\") %>% unlist %>% \n    DNAStringSet\n## align the sequences using muscle\ntipseq_aln <- muscle::muscle(tipseq)\ntipseq_aln <- DNAStringSet(tipseq_aln)\n## calculate pairwise hamming distances among sequences\ntipseq_dist <- stringDist(tipseq_aln, method = \"hamming\")\n\n## calculate the percentage of differences\ntipseq_d <- as.matrix(tipseq_dist) / width(tipseq_aln[1]) * 100\n\n## convert the matrix to a tidy data frame for facet_plot\ndd <- as_tibble(tipseq_d)\ndd$seq1 <- rownames(tipseq_d)\ntd <- gather(dd,seq2, dist, -seq1)\ntd$seq1 <- tl[td$seq1]\ntd$seq2 <- tl[td$seq2]\n\ng <- p$data$group\nnames(g) <- p$data$label\ntd$clade <- g[td$seq2] \n\n## visualize the sequence differences using dot plot and line plot\n## and align the sequence difference plot to the tree using facet_plot\np2 <- p + geom_facet(panel = \"Sequence Distance\", \n            data = td, geom = geom_point, alpha = .6, \n            mapping = aes(x = dist, color = clade, shape = clade)) +\n    geom_facet(panel = \"Sequence Distance\", \n            data = td, geom = geom_path, alpha = .6, \n            mapping=aes(x = dist, group = seq2, color = clade)) + \n    scale_shape_manual(values = 1:8, guide = FALSE) \n\nprint(p2)"},{"path":"chapter13.html","id":"symbolic-bootstrap","chapter":"13 Gallery of Reproducible Examples","heading":"13.2 Displaying Different Symbolic Points for Bootstrap Values.","text":"can cut bootstrap values several intervals, e.g., indicate whether clade high, moderate, low support. can use intervals categorical variables set different colors shapes symbolic points indicate bootstrap values belong category (Figure 13.2).\nFIGURE 13.2: Partitioning bootstrap values. Bootstrap values divided three categories information used color circle points.\n","code":"\nlibrary(treeio)\nlibrary(ggplot2)\nlibrary(ggtree)\nlibrary(TDbook)\n\ntree <- read.newick(text=text_RMI_tree, node.label = \"support\")\nroot <- rootnode(tree)  \nggtree(tree, color=\"black\", size=1.5, linetype=1,  right=TRUE) + \n    geom_tiplab(size=4.5, hjust = -0.060, fontface=\"bold\") +  xlim(0, 0.09) + \n    geom_point2(aes(subset=!isTip & node != root, \n                    fill=cut(support, c(0, 700, 900, 1000))), \n                    shape=21, size=4) + \n    theme_tree(legend.position=c(0.2, 0.2)) + \n    scale_fill_manual(values=c(\"white\", \"grey\", \"black\"), guide='legend', \n                    name='Bootstrap Percentage(BP)', \n                    breaks=c('(900,1e+03]', '(700,900]', '(0,700]'), \n                    labels=expression(BP>=90,70 <= BP * \" < 90\", BP < 70))"},{"path":"chapter13.html","id":"phylo-grouping","chapter":"13 Gallery of Reproducible Examples","heading":"13.3 Highlighting Different Groups","text":"example reproduces Figure 1 (Larsen et al., 2019). used groupOTU() add grouping information chicken CTLDcps. branch line type color defined based grouping information. Two groups CTLDcps highlighted different background colors using geom_hilight (red Group II green Group V). avian-specific expansion Group V subgroups B- labeled using geom_cladelab (Figure 13.3).\nFIGURE 13.3: Phylogenetic tree CTLDcps. Using different background colors, line types colors, clade labels distinguish groups.\n","code":"\nlibrary(TDbook)\nmytree <- tree_treenwk_30.4.19\n\n# Define nodes for coloring later on\ntiplab <- mytree$tip.label\ncls <- tiplab[grep(\"^ch\", tiplab)] \nlabeltree <- groupOTU(mytree, cls)\n\np <- ggtree(labeltree, aes(color=group, linetype=group), layout=\"circular\") +\n    scale_color_manual(values = c(\"#efad29\", \"#63bbd4\")) +\n    geom_nodepoint(color=\"black\", size=0.1) +\n    geom_tiplab(size=2, color=\"black\")\n\np2 <- flip(p, 136, 110) %>% \n    flip(141, 145) %>% \n    rotate(141) %>% \n    rotate(142) %>% \n    rotate(160) %>% \n    rotate(164) %>% \n    rotate(131)\n\n### Group V and II coloring \ndat <- data.frame(\n           node = c(110, 88, 156,136),\n           fill = c(\"#229f8a\", \"#229f8a\", \"#229f8a\", \"#f9311f\")\n       )\np3 <- p2 +\n      geom_hilight(\n          data = dat,\n          mapping = aes(\n              node = node,\n              fill = I(fill)\n          ),\n          alpha = 0.2,\n          extendto = 1.4\n      )\n\n### Putting on a label on the avian specific expansion \np4 <- p3 +\n      geom_cladelab(\n          node = 113,\n          label = \"Avian-specific expansion\",\n          align = TRUE,\n          angle = -35,\n          offset.text = 0.05,\n          hjust = \"center\",\n          fontsize = 2,\n          offset = .2,\n          barsize = .2\n      )\n    \n### Adding the bootstrap values with subset used to remove all bootstraps < 50  \np5 <- p4 +\n      geom_nodelab(\n          mapping = aes(\n              x = branch,\n              label = label,\n              subset = !is.na(as.numeric(label)) & as.numeric(label) > 50\n          ),\n          size = 2,\n          color = \"black\",\n          nudge_y = 0.6\n      )\n\n### Putting labels on the subgroups \np6 <- p5 +\n      geom_cladelab(\n          data = data.frame(\n              node = c(114, 121),\n              name = c(\"Subgroup A\", \"Subgroup B\")\n          ),\n          mapping = aes(\n              node = node,\n              label = name\n          ),\n          align = TRUE,\n          offset = .05,\n          offset.text = .03,\n          hjust = \"center\",\n          barsize = .2,\n          fontsize = 2,\n          angle = \"auto\",\n          horizontal = FALSE\n      ) +\n      theme(\n          legend.position = \"none\",\n          plot.margin = grid::unit(c(-15, -15, -15, -15), \"mm\")\n      )\nprint(p6)"},{"path":"chapter13.html","id":"genome-locus","chapter":"13 Gallery of Reproducible Examples","heading":"13.4 Phylogenetic Tree with Genome Locus Structure","text":"geom_motif() defined ggtree wrapper layer gggenes::geom_gene_arrow(). geom_motif() can automatically adjust genomic alignment selective gene (via parameter) can label genes via label parameter. following example, use example_genes dataset provided gggenes. dataset provides genomic coordination set genes, phylogeny genomes needs constructed first. calculate Jaccard similarity based ratio overlapping genes among genomes correspondingly determine genome distance. BioNJ algorithm applied construct tree. can use geom_facet() visualize tree genomic structures (Figure 13.4).\nFIGURE 13.4: Genomic features phylogenetic tree.\n","code":"\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gggenes)\nlibrary(ggtree)\n\nget_genes <- function(data, genome) {\n    filter(data, molecule == genome) %>% pull(gene)\n}\n\ng <- unique(example_genes[,1])\nn <- length(g)\nd <- matrix(nrow = n, ncol = n)\nrownames(d) <- colnames(d) <- g\ngenes <- lapply(g, get_genes, data = example_genes)\n\nfor (i in 1:n) {\n    for (j in 1:i) {\n        jaccard_sim <- length(intersect(genes[[i]], genes[[j]])) / \n                       length(union(genes[[i]], genes[[j]]))\n        d[j, i] <- d[i, j] <- 1 - jaccard_sim\n    }\n}\n\ntree <- ape::bionj(d) \n\np <- ggtree(tree, branch.length='none') + \n    geom_tiplab() + xlim_tree(5.5) + \n    geom_facet(mapping = aes(xmin = start, xmax = end, fill = gene),\n               data = example_genes, geom = geom_motif, panel = 'Alignment',\n               on = 'genE', label = 'gene', align = 'left') +\n    scale_fill_brewer(palette = \"Set3\") + \n    scale_x_continuous(expand=c(0,0)) +\n    theme(strip.text=element_blank(),\n        panel.spacing=unit(0, 'cm'))\n\nfacet_widths(p, widths=c(1,2))"},{"path":"faq.html","id":"faq","chapter":"A Frequently Asked Questions","heading":"A Frequently Asked Questions","text":"ggtree mailing-list18 great place get help, created reproducible example illustrates problem.","code":""},{"path":"faq.html","id":"installation","chapter":"A Frequently Asked Questions","heading":"A.1 Installation","text":"ggtree released within Bioconductor project; need use BiocManager install .Bioconductor release adhered specific R version. Please make sure using latest version R want install latest release Bioconductor packages, including ggtree. Beware bugs fixed current release develop branches. find bug, please follow guide19 report .make easy install load multiple core packages single step, created meta-package, treedataverse. Users can install package via following command:installed, loading package also load core treedataverse packages, including tidytree, treeio, ggtree, ggtreeExtra.","code":"\n## you need to install BiocManager before using it\n## install.packages(\"BiocManager\")\nlibrary(BiocManager)\ninstall(\"ggtree\")\nBiocManager::install(\"YuLab-SMU/treedataverse\")"},{"path":"faq.html","id":"faq-r","chapter":"A Frequently Asked Questions","heading":"A.2 Basic R Related","text":"","code":""},{"path":"faq.html","id":"faq-local-file","chapter":"A Frequently Asked Questions","heading":"A.2.1 Use your local file","text":"new R want use ggtree tree visualization, please \nlearn basic R ggplot2.common issue users copy paste commands without looking \nfunction’s behavior. system.file() function used examples find files packed packages.users want use files, please just use relative absolute file path (e.g., file = \"/folder/filename\").","code":"system.file                package:base                R Documentation\n\nFind Names of R System Files\n\nDescription:\n\n     Finds the full file names of files in packages etc.\n\nUsage:\n\n     system.file(..., package = \"base\", lib.loc = NULL,\n                 mustWork = FALSE)"},{"path":"faq.html","id":"faq-aes-mapping","chapter":"A Frequently Asked Questions","heading":"A.3 Aesthetic mapping","text":"","code":""},{"path":"faq.html","id":"faq-inherit-aes","chapter":"A Frequently Asked Questions","heading":"A.3.1 Inherit aesthetic mapping","text":"example, can add symbolic points nodes geom_point() directly.\nmagic don’t need map x y position points providing aes(x, y) geom_point() since already mapped ggtree() function serves global mapping layers.provide dataset layer dataset doesn’t contain columns x /y,\nlayer function also tries map x y also others map ggtree() function.\nvariables available dataset, get following error:can fixed using parameter inherit.aes=FALSE disable inheriting mapping ggtree() function.","code":"\nggtree(rtree(30)) + geom_point()Error in eval(expr, envir, enclos) : object 'x' not found"},{"path":"faq.html","id":"faq-dollar-aes","chapter":"A Frequently Asked Questions","heading":"A.3.2 Never use $ in aesthetic mapping","text":"Never this20 please refer explanation ggplot2 book 2ed (Wickham, 2016):Never refer variable $ (e.g., diamonds$carat) aes(). breaks containment plot longer contains everything needs causes problems ggplot2 changes order rows, facetting.","code":""},{"path":"faq.html","id":"faq-text","chapter":"A Frequently Asked Questions","heading":"A.4 Text and Label","text":"","code":""},{"path":"faq.html","id":"faq-label-truncated","chapter":"A Frequently Asked Questions","heading":"A.4.1 Tip label truncated","text":"reason issue ggplot2 can’t auto-adjust xlim based added text21.example, tip labels displayed Figure .1A truncated. units two different spaces (data pixel). Users can use xlim allocate spaces tip labels (Figure .1B).Another solution set clip = \"\" allow drawing outside plot panel. may also need set plot.margin allocate spaces margin (Figure .1C).\nFIGURE .1: Allocating spaces truncated tip labels. Long tip labels may truncated (). One solution allocate spaces plot panel (B), another solution allow plotting labels outside plot panel (C).\nthird solution use hexpand() demonstrated session 12.4.rectangular/dendrogram layout trees, users can display tip labels y-axis labels. case, matter long labels , truncated (see Figure 4.8C).","code":"\nlibrary(ggtree)\n## example tree from https://support.bioconductor.org/p/72398/\ntree <- read.tree(text= paste(\"(Organism1.006G249400.1:0.03977,\", \n    \"(Organism2.022118m:0.01337,(Organism3.J34265.1:0.00284,\",\n    \"Organism4.G02633.1:0.00468)0.51:0.0104):0.02469);\"))\np <- ggtree(tree) + geom_tiplab()  \np + xlim(0, 0.08)\np + coord_cartesian(clip = 'off') + \n  theme_tree2(plot.margin=margin(6, 120, 6, 6))"},{"path":"faq.html","id":"faq-modify-label","chapter":"A Frequently Asked Questions","heading":"A.4.2 Modify (tip) labels","text":"want modify tip labels tree, can use treeio::rename_taxa() rename phylo treedata object.input tree object treedata instance, can use write.beast() export tree associated data BEAST compatible NEXUS file (see Chapter 3).Renaming phylogeny tip labels seems good idea, since may introduce problems mapping original sequence alignment tree. Personally, recommend storing new labels tip annotation treedata object.just want show different additional information plotting tree, don’t need modify tip labels. easily done via %<+% operator attach modified version labels use geom_tiplab() layer display\nmodified version (Figure .2).\nFIGURE .2: Alternative tip labels. Original tip labels () modified version (B).\n","code":"\ntree <- read.tree(text = \"((A, B), (C, D));\")\nd <- data.frame(label = LETTERS[1:4], \n                label2 = c(\"sunflower\", \"tree\", \"snail\", \"mushroom\"))\n\n## rename_taxa use 1st column as key and 2nd column as value by default                \n## rename_taxa(tree, d)\nrename_taxa(tree, d, label, label2) %>% write.tree## [1] \"((sunflower,tree),(snail,mushroom));\"\ntree2 <- full_join(tree, d, by = \"label\")\ntree2## 'treedata' S4 object'.\n## \n## ...@ phylo:\n## \n## Phylogenetic tree with 4 tips and 3 internal nodes.\n## \n## Tip labels:\n##   A, B, C, D\n## \n## Rooted; no branch lengths.\n## \n## with the following features available:\n##   'label2'.\n## \n## # The associated data tibble abstraction: 7 × 4\n## # The 'node', 'label' and 'isTip' are from the phylo tree.\n##    node label isTip label2   \n##   <int> <chr> <lgl> <chr>    \n## 1     1 A     TRUE  sunflower\n## 2     2 B     TRUE  tree     \n## 3     3 C     TRUE  snail    \n## 4     4 D     TRUE  mushroom \n## 5     5 <NA>  FALSE <NA>     \n## 6     6 <NA>  FALSE <NA>     \n## 7     7 <NA>  FALSE <NA>\np <- ggtree(tree) + xlim(NA, 3)\np1 <- p + geom_tiplab()\n\n## the following command will produce an identical figure of p2\n## ggtree(tree2) + geom_tiplab(aes(label = label2))\np2 <- p %<+% d + geom_tiplab(aes(label=label2))\nplot_list(p1, p2, ncol=2, tag_levels = \"A\")"},{"path":"faq.html","id":"faq-formatting-label","chapter":"A Frequently Asked Questions","heading":"A.4.3 Formatting (tip) labels","text":"want format labels, need set parse=TRUE geom_text()/geom_tiplab()/geom_nodelab() label string can parsed expression displayed described ?plotmath. Users can use latex2exp package convert LaTeX math formulas R’s plotmath expressions, use ggtext package render Markdown HTML.example, tip labels contain several parts (e.g., genus, species, geo), can differentiate pieces information different formats (Figure .3A).Using Markdown HTML format text may easier, supported via ggtext package (Figure .3B).\nFIGURE .3: Formatting labels. Formatting specific tip labels using plotmath expression (), Markdown/HTML (B).\n","code":"\ntree <- read.tree(text = \"((a,(b,c)),d);\")\ngenus <- c(\"Gorilla\", \"Pan\", \"Homo\", \"Pongo\")\nspecies <- c(\"gorilla\", \"spp.\", \"sapiens\", \"pygmaeus\")\ngeo <- c(\"Africa\", \"Africa\", \"World\", \"Asia\")\nd <- data.frame(label = tree$tip.label, genus = genus,\n                species = species, geo = geo)\n\nlibrary(glue)\nd2 <- dplyr::mutate(d, \n  lab = glue(\"italic({genus})~bolditalic({species})~({geo})\"),\n  color = c(\"#E495A5\", \"#ABB065\", \"#39BEB1\", \"#ACA4E2\"),\n  name = glue(\"<i style='color:{color}'>{genus} **{species}**<\/i> ({geo})\")\n) \n\np1 <- ggtree(tree) %<+% d2 + xlim(NA, 6) +\n    geom_tiplab(aes(label=lab), parse=T)\nlibrary(ggtext)\n\np2 <- ggtree(tree) %<+% d2 + \n  geom_richtext(data=td_filter(isTip), \n                aes(label=name), label.color=NA) + \n  hexpand(.3)\n\nplot_list(p1, p2, ncol=2, tag_levels = 'A') "},{"path":"faq.html","id":"faq-ggrepel","chapter":"A Frequently Asked Questions","heading":"A.4.4 Avoid overlapping text labels","text":"Users can use ggrepel package repel overlapping text labels (Figure .4).\nFIGURE .4: Repel labels. Repel labels avoid overlapping.\n","code":"\nlibrary(ggrepel)\nlibrary(ggtree)\nraxml_file <- system.file(\"extdata/RAxML\", \n                    \"RAxML_bipartitionsBranchLabels.H3\", package=\"treeio\")\nraxml <- read.raxml(raxml_file)\nggtree(raxml) + geom_label_repel(aes(label=bootstrap, fill=bootstrap)) + \n  theme(legend.position = c(.1, .8)) + scale_fill_viridis_c()"},{"path":"faq.html","id":"faq-bootstrap","chapter":"A Frequently Asked Questions","heading":"A.4.5 Bootstrap values from Newick format","text":"quite common store bootstrap value node label Newick format Figure .5. Visualizing node label easy using geom_text2(aes(subset = !isTip, label=label)).want display subset bootstrap (e.g., bootstrap > 80), can’t simply use geom_text2(subset= (label > 80), label=label) (geom_label2) since label character vector, contains node label (bootstrap value) tip label (taxa name). geom_text2(subset=(.numeric(label) > 80), label=label) won’t work either, since NAs introduced coercion. need convert NAs logical FALSE. can done following code:\nFIGURE .5: Bootstrap value stored node label.\ncommon issue, implemented read.newick() function treeio package allow parsing internal node labels supported values. result, can easier display bootstrap values using following code:","code":"\nnwk <- system.file(\"extdata/RAxML\",\"RAxML_bipartitions.H3\", package='treeio')\ntr <- read.tree(nwk)\nggtree(tr) + geom_label2(aes(label=label, \n      subset = !is.na(as.numeric(label)) & as.numeric(label) > 80))\ntr <- read.newick(nwk, node.label='support')\nggtree(tr) + geom_nodelab(geom='label', aes(label=support, subset=support > 80))"},{"path":"faq.html","id":"branch-setting","chapter":"A Frequently Asked Questions","heading":"A.5 Branch Setting","text":"","code":""},{"path":"faq.html","id":"plot-the-same-tree-as-in-plot.phylo","chapter":"A Frequently Asked Questions","heading":"A.5.1 Plot the same tree as in plot.phylo()","text":"default, ggtree() ladderizes input tree tree appear less cluttered. reason tree visualized ggtree() different one using plot.phylo() displays non-ladderized tree. disable ladderize effect, users can pass parameter ladderize = FALSE ggtree() function demonstrated Figure .6.\nFIGURE .6: Ladderized non-ladderized tree. plot.phylo() displays non-ladderized tree (), use ladderize = FALSE display non-ladderized tree ggtree() (B), ggtree() displays ladderized tree default (C).\n","code":"\nlibrary(ape)\nlibrary(ggtree)\nset.seed(42)\nx <- rtree(5)\nplot(x)\nggtree(x, ladderize = FALSE) + geom_tiplab()\nggtree(x) + geom_tiplab()"},{"path":"faq.html","id":"specifying-the-order-of-the-tips","chapter":"A Frequently Asked Questions","heading":"A.5.2 Specifying the order of the tips","text":"rotateConstr() function provided ape package rotates internal branches based specified order tips, order followed plotting tree (bottom top). ggtree() default ladderizes input tree, users need disable passing ladderize = FALSE. order tree displayed expected (Figure .7). Users can also extract tip order displayed ggtree() using get_taxa_name() function demonstrated session 12.6.\nFIGURE .7: Specifying tree order. order input tree maintained ggtree() ladderize = FALSE.\n","code":"\ny <- ape::rotateConstr(x, c('t4', 't2', 't5', 't1', 't3'))\nggtree(y, ladderize = FALSE) + geom_tiplab()"},{"path":"faq.html","id":"shrink-outlier-long-branch","chapter":"A Frequently Asked Questions","heading":"A.5.3 Shrink outlier long branch","text":"outgroups long branch length (Figure .8A), like keep outgroups tree ignore branch lengths (Figure .8B)22. can easily done modifying coordinates outgroups (Figure .8B). Another approach truncate plot using ggbreak package (Figure .8C) (Xu, Chen, et al., 2021).\nFIGURE .8: Shrink outlier long branch. Original tree (); reduced outgroup branch length (B); truncated tree plot (C).\n","code":"\nlibrary(TDbook)\nlibrary(ggtree)\n\nx <- tree_long_branch_example\nm <- MRCA(x, 75, 76)\ny <- groupClade(x, m)\n\n## A\np <- p1 <- ggtree(y, aes(linetype = group)) + \n  geom_tiplab(size = 2) + \n  theme(legend.position = 'none') \n\n## B\np$data[p$data$node %in% c(75, 76), \"x\"] <- mean(p$data$x)\n\n## C\nlibrary(ggbreak)\np2 <- p1 + scale_x_break(c(0.03, 0.09)) + hexpand(.05)\n\n## align plot\nplot_list(p1, p, p2, ncol=3, tag_levels=\"A\")"},{"path":"faq.html","id":"bind-tip","chapter":"A Frequently Asked Questions","heading":"A.5.4 Attach a new tip to a tree","text":"Sometimes known branches tree, like tree. Another common scenario new sequence species like update reference tree species inferring evolutionary position.Users can use phytools::bind.tip() (Revell, 2012) attach new tip tree. tidytree, easy add annotation differentiate newly introduced original branches reflect uncertainty added branch splits , demonstrated Figure .9.\nFIGURE .9: Attaching new tip tree. Different line types employed distinguish newly introduced tip error bar added indicate uncertainty added branch position.\n","code":"\nlibrary(phytools)\nlibrary(tidytree)\nlibrary(ggplot2)\nlibrary(ggtree)\n\nset.seed(2019-11-18)\ntr <- rtree(5)\n\ntr2 <- bind.tip(tr, 'U', edge.length = 0.1, where = 7, position=0.15)\nd <- as_tibble(tr2)\nd$type <- \"original\"\nd$type[d$label == 'U'] <- 'newly introduced'\nd$sd <- NA\nd$sd[parent(d, 'U')$node] <- 0.05\n\ntr3 <- as.treedata(d)\nggtree(tr3, aes(linetype=type)) +  geom_tiplab() +\n  geom_errorbarh(aes(xmin=x-sd, xmax=x+sd, y = y - 0.3), \n                linetype='dashed', height=0.1) +\n  scale_linetype_manual(values = c(\"newly introduced\" = \"dashed\", \n                                   \"original\" = \"solid\")) + \n  theme(legend.position=c(.8, .2)) "},{"path":"faq.html","id":"change-colors-or-line-types-of-arbitrarily-selected-branches","chapter":"A Frequently Asked Questions","heading":"A.5.5 Change colors or line types of arbitrarily selected branches","text":"want color change line types specific branches, need prepare data frame variables branch setting (e.g., selected unselected). Applying Method 1 described (Yu et al., 2018) map data onto tree make easy set colors line types (Figure .10).\nFIGURE .10: Change colors line types specific branches.\nUsers can use gginnards package manipulate plot elements complicated scenarios.","code":"\nset.seed(123)\nx <- rtree(10)\n## binary choices of colors\nd <- data.frame(node=1:Nnode2(x), colour = 'black')\nd[c(2,3,14,15), 2] <- \"red\"\n\n## multiple choices of line types\nd2 <- data.frame(node=1:Nnode2(x), lty = 1)\nd2[c(2,5,13, 14), 2] <- c(2, 3, 2,4)\n\np <- ggtree(x) + geom_label(aes(label=node))\np %<+% d %<+% d2 + aes(colour=I(colour), linetype=I(lty))"},{"path":"faq.html","id":"arbitrary-point","chapter":"A Frequently Asked Questions","heading":"A.5.6 Add an arbitrary point to a branch","text":"want add arbitrary point branch23, can use geom_nodepoint(), geom_tippoint(), geom_point2() (works external internal nodes) filter selected node (endpoint branch) via subset aesthetic mapping specify horizontal position x = x - offset aesthetic mapping, offset can absolute value (Figure .11A) proportion branch length (Figure .11B).\nFIGURE .11: Add arbitrary point branch. position symbolic point can adjusted absolute value () proportion branch length (B).\n","code":"\nset.seed(2020-05-20)\nx <- rtree(10)\np <- ggtree(x)\n\np1 <- p + geom_nodepoint(aes(subset = node == 13, x = x - .1),\n                        size = 5, colour = 'firebrick', shape = 21)\n\np2 <- p + geom_nodepoint(aes(subset = node == 13, x = x - branch.length * 0.2),\n                        size = 3, colour = 'firebrick') + \n       geom_nodepoint(aes(subset = node == 13, x = x - branch.length * 0.8),\n                        size = 5, colour = 'steelblue')\nplot_list(p1, p2, ncol=2, tag_levels=\"A\")"},{"path":"faq.html","id":"different-x-axis-labels-for-different-facet-panels","chapter":"A Frequently Asked Questions","heading":"A.6 Different X-axis Labels for Different Facet Panels","text":"supported ggplot2 general. However, can just draw text labels panel put labels beyond plot panels demonstrated Figure .12.\nFIGURE .12: X-axis titles different facet panels.\n","code":"\nlibrary(ggtree)\nlibrary(ggplot2)\nset.seed(2019-05-02)\nx <- rtree(30)\np <- ggtree(x) + geom_tiplab()\nd <- data.frame(label = x$tip.label, \n                value = rnorm(30))\np2 <- p + geom_facet(panel = \"Dot\", data = d, \n            geom = geom_point, mapping = aes(x = value)) \n            \np2 <- p2 + theme_bw() + \n    xlim_tree(5) + xlim_expand(c(-5, 5), 'Dot') \n\n# .panel is the internal variable used in `geom_facet` for faceting.\nd <- data.frame(.panel = c('Tree', 'Dot'), \n                lab = c(\"Distance\", \"Dot Units\"), \n                x=c(2.5,0), y=-2)\n\np2 + scale_y_continuous(limits=c(0, 31), \n                        expand=c(0,0), \n                        oob=function(x, ...) x) +\n    geom_text(aes(label=lab), data=d) + \n    coord_cartesian(clip='off')  + \n    theme(plot.margin=margin(6, 6, 40, 6))"},{"path":"faq.html","id":"faq-under-the-tree","chapter":"A Frequently Asked Questions","heading":"A.7 Plot Something behind the Phylogeny","text":"ggtree() function plots tree structure, normally add layers top tree.want layers behind tree layer, can reverse order layers.Another solution use ggplot() instead ggtree() + geom_tree() add layer tree structure correct position layer stack (Figure .13).\nFIGURE .13: Add layers behind tree structure. layer top tree structure (). Reverse layer order (B). Add layer behind tree layer (C).\n","code":"\nset.seed(1982)\nx <- rtree(5)\np <- ggtree(x) + geom_hilight(node=7, alpha=1)\np$layers <- rev(p$layers)\nggplot(x) + geom_hilight(node=7, alpha=1) + geom_tree() + theme_tree()     "},{"path":"faq.html","id":"faq-enlarge-center-space","chapter":"A Frequently Asked Questions","heading":"A.8 Enlarge Center Space in Circular/Fan Layout Tree","text":"question enlarging center space circular/fan layout tree asked several times24, published example can found (Barton et al., 2016). Increasing percentage center white space circular tree useful avoid overlapping tip labels increase readability tree moving nodes branches . can done simply using xlim() hexpand() allocate space (Figure .14A), just like Figure 4.3G, assigning long root branch similar “Root Length” parameter FigTree (Figure .14B).\nFIGURE .14: Enlarge center space circular tree. Allocate space xlim () long root branch (B).\n","code":"\nset.seed(1982)\ntree <- rtree(30)\nplot_list(\n  ggtree(tree, layout='circular') + xlim(-10, NA),\n  ggtree(tree, layout='circular') + geom_rootedge(5),\n  tag_levels = \"A\", ncol=2\n)"},{"path":"faq.html","id":"use-the-most-distant-tip-from-the-root-as-the-origin-of-the-timescale","chapter":"A Frequently Asked Questions","heading":"A.9 Use the Most Distant Tip from the Root as the Origin of the Timescale","text":"revts() reverse x-axis setting recent tip 0. can use scale_x_continuous(labels=abs) label x-axis using absolute values (Figure .15).\nFIGURE .15: Origin time scale. Forward: root tips (). Backward: distant tip root (B).\n","code":"\ntr <- rtree(10)\np <- ggtree(tr) + theme_tree2()\np2 <- revts(p) + scale_x_continuous(labels=abs)\nplot_list(p, p2, ncol=2, tag_levels=\"A\")"},{"path":"faq.html","id":"circular-blank","chapter":"A Frequently Asked Questions","heading":"A.10 Remove Blank Margins for Circular Layout Tree","text":"plots polar coordinates, circular layout tree, common extra spaces generated.using Rmarkdown, can set following options knitr remove extra white space automatically.Otherwise, can use command-line tools remove extra white space:want R, can use magick package:example (Figure .16):\nFIGURE .16: Trim extra white space polar coordinates. Original plot (). Trimmed version (B).\n","code":"\nlibrary(knitr)\nknit_hooks$set(crop = hook_pdfcrop)\nopts_chunk$set(crop = TRUE)## for pdf\npdfcrop x.pdf\n\n## for png\nconvert -trim x.png x-crop.png\nlibrary(magick)\n\nx <- image_read(\"x.png\")\n## x <- image_read_pdf(\"x.pdf\") # for PDF\n\nimage_trim(x)\nlibrary(ggplot2)\nlibrary(ggtree)\nlibrary(patchwork)\nlibrary(magick)\n\nset.seed(2021)\ntr <- rtree(30)\np <- ggtree(tr, size=1, colour=\"purple\", layout='circular')\n\nf <- tempfile(fileext=\".png\")\nggsave(filename = f, plot = p, width=7, height=7)\n\nx <- image_read(f, density=300)\ny <- image_trim(x)\n\npanel_border <- theme(panel.border=element_rect(colour='black', \n                                            fill=NA, size=2))\nxx <- image_ggplot(x) + panel_border\nyy <- image_ggplot(y) + panel_border\n\nplot_list(xx, yy, tag_levels = \"A\", ncol=2)"},{"path":"faq.html","id":"export-edit","chapter":"A Frequently Asked Questions","heading":"A.11 Edit Tree Graphic Details","text":"can hard modify plot details ordinary users using ggplot2/ggtree. recommend using eoffice package export ggtree output Microsoft Office Document edit tree graphic PowerPoint.","code":""},{"path":"related-tools.html","id":"related-tools","chapter":"B Related Tools","heading":"B Related Tools","text":"","code":""},{"path":"related-tools.html","id":"MicrobiotaProcess-taxonomy","chapter":"B Related Tools","heading":"B.1 MicrobiotaProcess: Convert Taxonomy Table to a treedata Object","text":"Taxonomy (genus, family, …) data widely used microbiome ecology. Hierarchical taxonomies tree-like structure organizes items subcategories can converted tree object (see also phylog object). MicrobiotaProcess supports converting taxonomyTable object, defined phyloseq package, treedata object, taxonomic hierarchical relationship can visualized using ggtree (Figure B.1). taxonomy names confused missing, .treedata() method taxonomyTable objects complete upper-level taxonomic information automatically.\nFIGURE B.1: Convert taxonomyTable object treedata object.\n","code":"\nlibrary(MicrobiotaProcess)\nlibrary(ggtree)\n\n# The original kostic2012crc is a MPSE object\ndata(kostic2012crc)\n\ntaxa <- tax_table(kostic2012crc)\n#The rownames (usually is OTUs or other features ) of the taxa will be \n# served as the tip labels if include.rownames = TRUE\ntree <- as.treedata(taxa, include.rownames=TRUE)\n# Or extract the taxa tree (treedata) with mp_extract_tree, because the \n# taxonomy information is stored as treedata in the MPSE class (kostic2012crc).\n# tree <- kostic2012crc %>% mp_extract_tree()\n\nggtree(tree, layout=\"circular\", size=0.2) +\n     geom_tiplab(size=1)"},{"path":"related-tools.html","id":"rtol","chapter":"B Related Tools","heading":"B.2 rtol: An R Interface to Open Tree API","text":"rtol (Michonneau et al., 2016) R package interact Open Tree Life data APIs. Users can use query phylogenetic trees visualize trees ggtree explore species relationships (Figure B.2).\nFIGURE B.2: Get induced subtree big Open Tree.\n","code":"\n## example from: https://github.com/ropensci/rotl\nlibrary(rotl)\napes <- c(\"Pongo\", \"Pan\", \"Gorilla\", \"Hoolock\", \"Homo\")\n(resolved_names <- tnrs_match_names(apes))##   search_string unique_name approximate_match ott_id\n## 1         pongo       Pongo             FALSE 417949\n## 2           pan         Pan             FALSE 417957\n## 3       gorilla     Gorilla             FALSE 417969\n## 4       hoolock     Hoolock             FALSE 712902\n## 5          homo        Homo             FALSE 770309\n##   is_synonym          flags number_matches\n## 1      FALSE                             2\n## 2      FALSE sibling_higher              2\n## 3      FALSE sibling_higher              1\n## 4      FALSE                             1\n## 5      FALSE sibling_higher              1\ntr <- tol_induced_subtree(ott_ids = ott_id(resolved_names))\nggtree(tr) + geom_tiplab() + xlim(NA, 5)"},{"path":"related-tools.html","id":"plotly","chapter":"B Related Tools","heading":"B.3 Convert a ggtree object to a plotly object","text":"One way make quick interactive phylogenetic tree using ggtree plotly package. ggplotly() able convert ggtree object plotly object. Note ggtree package also supports interactive manipulation phylogenetic tree via identify() method.\nFIGURE B.3: Interactive phylogenetic tree combining ggtree plotly.\n","code":"\n# example from https://twitter.com/drandersgs/status/965996335882059776\n\n# LOAD LIBS ---------------------------------------------------------------\nlibrary(ape)\nlibrary(ggtree)\nlibrary(plotly)\n# CREATE A TREE -------------------------------------------------------------\nn_samples <- 20\nn_grp <- 4\ntree <- ape::rtree(n = n_samples)\n# CREATE SOME METADATA ----------------------------------------------------\nid <- tree$tip.label\nset.seed(42)\ngrp <- sample(LETTERS[1:n_grp], size = n_samples, replace = T)\ndat <- tibble::tibble(id = id,\n                      grp = grp)\n# PLOT THE TREE -----------------------------------------------------------\np1 <- ggtree(tree)\nmetat <- p1$data %>%\n  dplyr::inner_join(dat, c('label' = 'id'))\np2 <- p1 +\n  geom_point(data = metat,\n             aes(x = x,\n                 y = y,\n                 colour = grp,\n                 label = id))\nplotly::ggplotly(p2)"},{"path":"related-tools.html","id":"commicR","chapter":"B Related Tools","heading":"B.4 Comic (xkcd-like) phylogenetic tree","text":"","code":"\nlibrary(htmltools)    \nlibrary(XML)    \nlibrary(gridSVG)    \nlibrary(ggplot2)    \nlibrary(ggtree)\nlibrary(comicR)    \n\np <- ggtree(rtree(30), layout=\"circular\")  +\n    geom_tiplab(aes(label=label), color=\"purple\")\nprint(p)\nsvg <- grid.export(name=\"\", res=100)$svg\n## need to convert it to png or pdf for pdfbook\ntagList(\n    tags$div(\n             id = \"ggtree_comic\",\n             tags$style(\"#ggtree_comic text {font-family:Chalkduster;}\"),\n             HTML(saveXML(svg)),\n             comicR(\"#ggtree_comic\", ff=5)\n         )\n) # %>% html_print"},{"path":"related-tools.html","id":"ascii-tree","chapter":"B Related Tools","heading":"B.5 Print ASCII-art Rooted Tree","text":"neat print ASCII-art phylogeny. Sometimes, don’t want plot tree, just take glance tree structure without leaving focus R console. However, good idea print whole tree ASCII text tree large. Sometimes, just want look specific portion tree immediate relatives. scenario, can use treeio::tree_subset() function (see session 2.4) extract selected portion tree. can print ASCII-art tree subset explore evolutionary relationship species interest R console.ggtree supports parsing tip labels emoji create phylomoji. data.tree emojifont packages, can also print phylomoji ASCII text (Figure B.4).\nFIGURE B.4: Print phylomoji ASCII text.\nAnother way print ASCII-art phylogeny use ascii() device defined devout package. example:","code":"\nlibrary(data.tree)\ntree <- rtree(10)\nd <- as.data.frame(as.Node(tree))\nnames(d) <- NULL\nprint(d, row.names=FALSE)                       \n 11                    \n  ¦--12                \n  ¦   ¦--13            \n  ¦   ¦   ¦--t4        \n  ¦   ¦   °--t7        \n  ¦   °--14            \n  ¦       ¦--15        \n  ¦       ¦   ¦--t1    \n  ¦       ¦   °--16    \n  ¦       ¦       ¦--t6\n  ¦       ¦       °--t5\n  ¦       °--t8        \n  °--17                \n      ¦--t3            \n      °--18            \n          ¦--19        \n          ¦   ¦--t10   \n          ¦   °--t9    \n          °--t2        \nlibrary(data.tree)\nlibrary(emojifont)\n\ntt <- '((snail,mushroom),(((sunflower,evergreen_tree),leaves),green_salad));'\ntree <- read.tree(text = tt)\ntree$tip.label <- emoji(tree$tip.label)\nd <- as.data.frame(as.Node(tree))\nnames(d) <- NULL\nprint(d, row.names=FALSE)\nlibrary(devout)\nascii(width=80)\nggtree(rtree(5))\ninvisible(dev.off())                                                                                \n                             #########################                          \n                             #                                                  \n                            ##                                                  \n                            ##                                                  \n                            #####################                               \n   ##########################                                                   \n   #                        #                                                   \n   #                        #                                                   \n   #                        ##########                                          \n   #                                                                            \n   #                                                                            \n   #                                                                            \n   #                                   ###############                          \n   #                                   #                                        \n   #####################################                                        \n                                       #                                        \n                                       #####################################    \n                                                                                \n                                                                                 "},{"path":"related-tools.html","id":"facet-zoom","chapter":"B Related Tools","heading":"B.6 Zoom in on the Selected Portion","text":"addition using viewClade() function, users can use ggforce package zoom selected clade (Figure B.5).\nFIGURE B.5: Zoom selected clade.\n","code":"\nset.seed(2019-08-05)\nx <- rtree(30)\nnn <- tidytree::offspring(x, 43, self_include=TRUE)\nggtree(x) + ggforce::facet_zoom(xy = node %in% nn)"},{"path":"related-tools.html","id":"ggimage-tips","chapter":"B Related Tools","heading":"B.7 Tips for Using ggtree with ggimage","text":"ggtree supports annotating tree silhouette images via ggimage package. ggimage provides grammar graphic syntax work image files. allows processing images fly via image_fun parameter, accepts function process magick-image objects (Figure B.6). magick package provides several functions, functions can combined perform particular task.","code":""},{"path":"related-tools.html","id":"ggimage-rm-image-bg","chapter":"B Related Tools","heading":"B.7.1 Example 1: Remove background of images","text":"\nFIGURE B.6: Remove image background. Plotting silhouette images phylogenetic tree background removed () removed (B).\n","code":"\nlibrary(ggimage)\n\nimgdir <- system.file(\"extdata/frogs\", package = \"TDbook\")\n\nset.seed(1982)\nx <- rtree(5)\np <- ggtree(x) + theme_grey()\np1 <- p + geom_nodelab(image=paste0(imgdir, \"/frog.jpg\"), \n                        geom=\"image\", size=.12) + \n      ggtitle(\"original image\")\np2 <- p + geom_nodelab(image=paste0(imgdir, \"/frog.jpg\"), \n            geom=\"image\", size=.12,\n            image_fun= function(.) magick::image_transparent(., \"white\")) + \n      ggtitle(\"image with background removed\")\nplot_grid(p1, p2, ncol=2)"},{"path":"related-tools.html","id":"ggimage-bgimage","chapter":"B Related Tools","heading":"B.7.2 Example 2: Plot tree on a background image","text":"geom_bgimage() adds layer image puts layer bottom layer stack. normal layer doesn’t change structure output ggtree object. Users can add annotation layers without background image layer (Figure B.7).\nFIGURE B.7: Use image file tree background.\n","code":"\nggtree(rtree(20), size=1.5, color=\"white\") + \n  geom_bgimage('img/blackboard.jpg') + \n  geom_tiplab(color=\"white\", size=5, family='xkcd')"},{"path":"related-tools.html","id":"run-ggtree-in-jupyter-notebook","chapter":"B Related Tools","heading":"B.8 Run ggtree in Jupyter Notebook","text":"Jupyter notebook installed system, can install IRkernel following command R:can use ggtree R packages Jupyter notebook (Figure B.8). screenshot recreating Figure 8.5 Jupyter notebook.\nFIGURE B.8: ggtree Jupyter notebook. Running ggtree Jupyter notebook via R kernel.\n","code":"\ninstall.packages(\"IRkernel\")\nIRkernel::installspec()"},{"path":"figures-and-tables.html","id":"figures-and-tables","chapter":"C Figures and Tables","heading":"C Figures and Tables","text":"\nTABLE C.1: Geometric layers supported `geom_facet()’\n\nTABLE C.2: Tree-like objects supported ggtree\n","code":""},{"path":"publications-of-the-ggtree-package-suite.html","id":"publications-of-the-ggtree-package-suite","chapter":"D Publications of the ggtree Package Suite","heading":"D Publications of the ggtree Package Suite","text":"Note: * Co-corresponding authorsS Xu, Z Dai, P Guo, X Fu, S Liu, L Zhou, W Tang, T Feng, M Chen, L Zhan, T Wu, E Hu, Y Jiang*, X Bo*, G Yu*. ggtreeExtra: Compact visualization richly annotated phylogenetic data. Molecular Biology Evolution. 2021, 38(9):4039-4042.\ndoi: 10.1093/molbev/msab166G Yu. Using ggtree visualize data tree-like structures. Current Protocols Bioinformatics, 2020, 69:e96. doi: 10.1002/cpbi.96LG Wang, TTY Lam, S Xu, Z Dai, L Zhou, T Feng, P Guo, CW Dunn, BR Jones, T Bradley, H Zhu, Y Guan, Y Jiang, G Yu*. treeio: R package phylogenetic tree input output richly annotated associated data. Molecular Biology Evolution. 2020, 37(2):599-603.\ndoi: 10.1093/molbev/msz240G Yu*, TTY Lam, H Zhu, Y Guan*. Two methods mapping visualizing associated data phylogeny using ggtree. Molecular Biology Evolution. 2018, 35(2):3041-3043.\ndoi: 10.1093/molbev/msy194G Yu, DK Smith, H Zhu, Y Guan, TTY Lam*. ggtree: R package \nvisualization annotation phylogenetic trees covariates \nassociated data. Methods Ecology Evolution. 2017, 8(1):28-36.\ndoi: 10.1111/2041-210X.12628","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
